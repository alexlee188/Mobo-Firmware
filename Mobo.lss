
Mobo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  000025c2  00002676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  0080017a  0080017a  000026f0  2**0
                  ALLOC
  3 .eeprom       0000006f  00810000  00810000  000026f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000019ec  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000064e  00000000  00000000  0000414c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000538  00000000  00000000  0000479a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000bae  00000000  00000000  00004cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000667c  00000000  00000000  00005880  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001e41  00000000  00000000  0000befc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000562e  00000000  00000000  0000dd3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000007d0  00000000  00000000  0001336c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001cb2  00000000  00000000  00013b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003597  00000000  00000000  000157ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000a8d  00000000  00000000  00018d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000458  00000000  00000000  00019812  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		
		default:
			break;
	}
	return 1;
}
       0:	d1 c0       	rjmp	.+418    	; 0x1a4 <__ctors_end>
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
       2:	00 00       	nop
       4:	eb c0       	rjmp	.+470    	; 0x1dc <__bad_interrupt>
       6:	00 00       	nop
       8:	e9 c0       	rjmp	.+466    	; 0x1dc <__bad_interrupt>
       a:	00 00       	nop
       c:	e7 c0       	rjmp	.+462    	; 0x1dc <__bad_interrupt>
       e:	00 00       	nop
      10:	e5 c0       	rjmp	.+458    	; 0x1dc <__bad_interrupt>
      12:	00 00       	nop
      14:	e3 c0       	rjmp	.+454    	; 0x1dc <__bad_interrupt>
      16:	00 00       	nop
      18:	e1 c0       	rjmp	.+450    	; 0x1dc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	df c0       	rjmp	.+446    	; 0x1dc <__bad_interrupt>
      1e:	00 00       	nop
      20:	dd c0       	rjmp	.+442    	; 0x1dc <__bad_interrupt>
      22:	00 00       	nop
      24:	db c0       	rjmp	.+438    	; 0x1dc <__bad_interrupt>
      26:	00 00       	nop
      28:	d9 c0       	rjmp	.+434    	; 0x1dc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c5       	rjmp	.+2586   	; 0xa48 <__vector_11>
      2e:	00 00       	nop
      30:	d5 c0       	rjmp	.+426    	; 0x1dc <__bad_interrupt>
      32:	00 00       	nop
      34:	d3 c0       	rjmp	.+422    	; 0x1dc <__bad_interrupt>
      36:	00 00       	nop
      38:	d1 c0       	rjmp	.+418    	; 0x1dc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cf c0       	rjmp	.+414    	; 0x1dc <__bad_interrupt>
      3e:	00 00       	nop
      40:	cd c0       	rjmp	.+410    	; 0x1dc <__bad_interrupt>
      42:	00 00       	nop
      44:	cb c0       	rjmp	.+406    	; 0x1dc <__bad_interrupt>
      46:	00 00       	nop
      48:	c9 c0       	rjmp	.+402    	; 0x1dc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c7 c0       	rjmp	.+398    	; 0x1dc <__bad_interrupt>
      4e:	00 00       	nop
      50:	c5 c0       	rjmp	.+394    	; 0x1dc <__bad_interrupt>
      52:	00 00       	nop
      54:	c3 c0       	rjmp	.+390    	; 0x1dc <__bad_interrupt>
      56:	00 00       	nop
      58:	c1 c0       	rjmp	.+386    	; 0x1dc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bf c0       	rjmp	.+382    	; 0x1dc <__bad_interrupt>
      5e:	00 00       	nop
      60:	bd c0       	rjmp	.+378    	; 0x1dc <__bad_interrupt>
      62:	00 00       	nop
      64:	bb c0       	rjmp	.+374    	; 0x1dc <__bad_interrupt>
      66:	00 00       	nop
      68:	b9 c0       	rjmp	.+370    	; 0x1dc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b7 c0       	rjmp	.+366    	; 0x1dc <__bad_interrupt>
      6e:	00 00       	nop
      70:	b5 c0       	rjmp	.+362    	; 0x1dc <__bad_interrupt>
      72:	00 00       	nop

00000074 <DeviceDescriptor>:
      74:	12 01 10 01 00 00 00 08 c0 16 dc 05 00 00 01 02     ................
      84:	03 01                                               ..

00000086 <ConfigurationDescriptor>:
      86:	09 02 12 00 01 01 00 c0 32 09 04 00 00 00 00 00     ........2.......
      96:	00 00                                               ..

00000098 <LanguageString>:
      98:	04 03 09 04                                         ....

0000009c <ManufacturerString>:
      9c:	1a 03 77 00 77 00 77 00 2e 00 6f 00 62 00 64 00     ..w.w.w...o.b.d.
      ac:	65 00 76 00 2e 00 61 00 74 00 00 00                 e.v...a.t...

000000b8 <ProductString>:
      b8:	16 03 44 00 47 00 38 00 53 00 41 00 51 00 2d 00     ..D.G.8.S.A.Q.-.
      c8:	49 00 32 00 43 00 00 00                             I.2.C...

000000d0 <SerialNumberString>:
      d0:	14 03 54 00 46 00 33 00 4c 00 4a 00 2d 00 31 00     ..T.F.3.L.J.-.1.
      e0:	2e 00 30 00 00 00                                   ..0...

000000e6 <__c.2106>:
      e6:	56 46 4f 20 4d 65 6d 6f 72 79 20 53 74 6f 72 65     VFO Memory Store
      f6:	64 20 20 20 00                                      d   .

000000fb <__c.2100>:
      fb:	25 30 32 75 00                                      %02u.

00000100 <__c.2098>:
     100:	20 20 2d 2d 00                                        --.

00000105 <__c.2096>:
     105:	25 32 75 2e 00                                      %2u..

0000010a <__c.2094>:
     10a:	53 57 52 00                                         SWR.

0000010e <__c.2088>:
     10e:	50 25 32 75 2e 25 30 33 75 57 00                    P%2u.%03uW.

00000119 <__c.2078>:
     119:	50 41 20 42 69 61 73 20 43 61 6c 69 62 72 61 74     PA Bias Calibrat
     129:	65 00                                               e.

0000012b <__c.2076>:
     12b:	54 65 6d 70 65 72 61 74 75 72 65 20 53 68 75 74     Temperature Shut
     13b:	64 6f 77 6e 00                                      down.

00000140 <__c.2073>:
     140:	20 20 42 69 61 73 3a 00                               Bias:.

00000148 <__c.2071>:
     148:	25 75 2e 25 30 32 75 41 00                          %u.%02uA.

00000151 <__c.2067>:
     151:	25 32 75 2e 25 31 75 56 00                          %2u.%1uV.

0000015a <__c.2063>:
     15a:	25 33 75 46 00                                      %3uF.

0000015f <__c.2057>:
     15f:	58 25 33 75 2e 25 30 36 6c 75 4d 48 7a 20 46 25     X%3u.%06luMHz F%
     16f:	78 2d 25 78 00                                      x-%x.

00000174 <LcdCustomChar>:
     174:	00 00 00 15 00 00 00 00 00 10 10 15 10 10 00 00     ................
     184:	00 18 18 1d 18 18 00 00 00 1c 1c 1d 1c 1c 00 00     ................
     194:	00 1e 1e 1e 1e 1e 00 00 00 1f 1f 1f 1f 1f 00 00     ................

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf ef       	ldi	r28, 0xFF	; 255
     1aa:	d2 e0       	ldi	r29, 0x02	; 2
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	11 e0       	ldi	r17, 0x01	; 1
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b1 e0       	ldi	r27, 0x01	; 1
     1b6:	e2 ec       	ldi	r30, 0xC2	; 194
     1b8:	f5 e2       	ldi	r31, 0x25	; 37
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__do_copy_data+0x10>
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0
     1c0:	aa 37       	cpi	r26, 0x7A	; 122
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <__do_copy_data+0xc>

000001c6 <__do_clear_bss>:
     1c6:	12 e0       	ldi	r17, 0x02	; 2
     1c8:	aa e7       	ldi	r26, 0x7A	; 122
     1ca:	b1 e0       	ldi	r27, 0x01	; 1
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a5 38       	cpi	r26, 0x85	; 133
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	9c d1       	rcall	.+824    	; 0x510 <main>
     1d8:	0c 94 df 12 	jmp	0x25be	; 0x25be <_exit>

000001dc <__bad_interrupt>:
     1dc:	11 cf       	rjmp	.-478    	; 0x0 <__vectors>

000001de <Initialize_USB>:
//-----------------------------------------------------------------------------------------
// Start the USB
//-----------------------------------------------------------------------------------------
void Initialize_USB(void)
{
	USB_Init();
     1de:	26 d4       	rcall	.+2124   	; 0xa2c <USB_Init>

	for (;;)
	{
		maintask();		// Start up the Mobo runtime stuff
     1e0:	37 d0       	rcall	.+110    	; 0x250 <maintask>
		USB_USBTask();	// Start up the USB works
     1e2:	cf d4       	rcall	.+2462   	; 0xb82 <USB_USBTask>
     1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <Initialize_USB+0x2>

000001e6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*          Address = NULL;
	uint16_t       Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1e6:	92 30       	cpi	r25, 0x02	; 2
     1e8:	29 f0       	breq	.+10     	; 0x1f4 <CALLBACK_USB_GetDescriptor+0xe>
     1ea:	93 30       	cpi	r25, 0x03	; 3
     1ec:	41 f0       	breq	.+16     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x18>
     1ee:	91 30       	cpi	r25, 0x01	; 1
     1f0:	29 f5       	brne	.+74     	; 0x23c <CALLBACK_USB_GetDescriptor+0x56>
     1f2:	1f c0       	rjmp	.+62     	; 0x232 <CALLBACK_USB_GetDescriptor+0x4c>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1f4:	22 e1       	ldi	r18, 0x12	; 18
     1f6:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     1f8:	e6 e8       	ldi	r30, 0x86	; 134
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1fc:	23 c0       	rjmp	.+70     	; 0x244 <CALLBACK_USB_GetDescriptor+0x5e>
		case DTYPE_String: 
			switch (DescriptorNumber)
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	59 f0       	breq	.+22     	; 0x218 <CALLBACK_USB_GetDescriptor+0x32>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	28 f0       	brcs	.+10     	; 0x210 <CALLBACK_USB_GetDescriptor+0x2a>
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	59 f0       	breq	.+22     	; 0x220 <CALLBACK_USB_GetDescriptor+0x3a>
     20a:	83 30       	cpi	r24, 0x03	; 3
     20c:	b9 f4       	brne	.+46     	; 0x23c <CALLBACK_USB_GetDescriptor+0x56>
     20e:	0c c0       	rjmp	.+24     	; 0x228 <CALLBACK_USB_GetDescriptor+0x42>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     210:	e8 e9       	ldi	r30, 0x98	; 152
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	24 91       	lpm	r18, Z+
     216:	0b c0       	rjmp	.+22     	; 0x22e <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     218:	ec e9       	ldi	r30, 0x9C	; 156
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	24 91       	lpm	r18, Z+
     21e:	07 c0       	rjmp	.+14     	; 0x22e <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     220:	e8 eb       	ldi	r30, 0xB8	; 184
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	24 91       	lpm	r18, Z+
     226:	03 c0       	rjmp	.+6      	; 0x22e <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x03: 
					Address = (void*)&SerialNumberString;
					Size    = pgm_read_byte(&SerialNumberString.Header.Size);
     228:	e0 ed       	ldi	r30, 0xD0	; 208
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	24 91       	lpm	r18, Z+
     22e:	30 e0       	ldi	r19, 0x00	; 0
					break;
     230:	09 c0       	rjmp	.+18     	; 0x244 <CALLBACK_USB_GetDescriptor+0x5e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     232:	22 e1       	ldi	r18, 0x12	; 18
     234:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t       Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
     236:	e4 e7       	ldi	r30, 0x74	; 116
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	04 c0       	rjmp	.+8      	; 0x244 <CALLBACK_USB_GetDescriptor+0x5e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*          Address = NULL;
	uint16_t       Size    = NO_DESCRIPTOR;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0

{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*          Address = NULL;
     240:	e0 e0       	ldi	r30, 0x00	; 0
     242:	f0 e0       	ldi	r31, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;		
     244:	da 01       	movw	r26, r20
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	fc 93       	st	X, r31
     24a:	ee 93       	st	-X, r30
	return Size;
}
     24c:	c9 01       	movw	r24, r18
     24e:	08 95       	ret

00000250 <maintask>:
	// Here we do routines which are to be run through as often as possible
	// currently measured to be approximately once every 30 us (1/33333 s)
	//-------------------------------------------------------------------------------
	{
		#if ENCODER_SCAN_STYLE						// Shaft Encoder which scans the GPIO inputs
		encoder_scan();								// Scan the Shaft Encoder
     250:	0e 94 30 0b 	call	0x1660	; 0x1660 <encoder_scan>
			PORTB = PORTB | IO_LED2;				// Led2 on
		}
		onoff++;
		#endif
		
		while (Status1 & REBOOT);					// If REBOOT flag is set, then get
     254:	40 91 7a 01 	lds	r20, 0x017A
     258:	41 fd       	sbrc	r20, 1
     25a:	59 c1       	rjmp	.+690    	; 0x50e <__stack+0x20f>
			#endif
		}
	}
	Timerval = TCNT1;
	#elif SSLO_POLL_DURING_RX						// Poll the I2C bus at 10s intervals only during Receive
	if (Timerval > TCNT1)							// When the timer overflows, do stuff
     25c:	80 91 84 00 	lds	r24, 0x0084
     260:	90 91 85 00 	lds	r25, 0x0085
     264:	20 91 80 01 	lds	r18, 0x0180
     268:	30 91 81 01 	lds	r19, 0x0181
     26c:	82 17       	cp	r24, r18
     26e:	93 07       	cpc	r25, r19
     270:	a8 f4       	brcc	.+42     	; 0x29c <maintask+0x4c>
	{
		static uint8_t a; a++;						// Second Counter
     272:	80 91 7e 01 	lds	r24, 0x017E
     276:	8f 5f       	subi	r24, 0xFF	; 255
     278:	80 93 7e 01 	sts	0x017E, r24
		if (a > 10)
     27c:	8b 30       	cpi	r24, 0x0B	; 11
     27e:	70 f0       	brcs	.+28     	; 0x29c <maintask+0x4c>
		{
			if(!(Status1 & TX_FLAG))				// Only do the below during RX
     280:	40 fd       	sbrc	r20, 0
     282:	0a c0       	rjmp	.+20     	; 0x298 <maintask+0x48>
			{
				tmp100(R.TMP100_I2C_addr);			// Update temperature reading,
     284:	80 91 02 01 	lds	r24, 0x0102
     288:	0e 94 1c 0c 	call	0x1838	; 0x1838 <tmp100>
													// value read into tmp100data variable

				ad7991_poll(R.AD7991_I2C_addr);		// Polls the AD7991 every time (9 bytes)
     28c:	80 91 04 01 	lds	r24, 0x0104
     290:	0e 94 4e 0c 	call	0x189c	; 0x189c <ad7991_poll>
													// => constant traffic on I2C
				#if LCD_PAR_DISPLAY2
				lcd_display_P_SWR_V_C_T();			// Display non-static measured values
     294:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <lcd_display_P_SWR_V_C_T>
				#endif
			}
			a = 0;
     298:	10 92 7e 01 	sts	0x017E, r1
		}
	}
	Timerval = TCNT1;
     29c:	80 91 84 00 	lds	r24, 0x0084
     2a0:	90 91 85 00 	lds	r25, 0x0085
     2a4:	90 93 81 01 	sts	0x0181, r25
     2a8:	80 93 80 01 	sts	0x0180, r24

	//-------------------------------------------------------------------------------
	// Here we do routines which are to be accessed once every 1/10th of a second
	// We have a free running timer which matures once every ~1.05 seconds
	//-------------------------------------------------------------------------------
	Timer1val = TCNT1/6554; // get current Timer1 value, changeable every ~1/10th sec
     2ac:	80 91 84 00 	lds	r24, 0x0084
     2b0:	90 91 85 00 	lds	r25, 0x0085
     2b4:	6a e9       	ldi	r22, 0x9A	; 154
     2b6:	79 e1       	ldi	r23, 0x19	; 25
     2b8:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
	if (Timer1val != lastIteration1)	// Once every 1/10th of a second, do stuff
     2bc:	80 91 84 01 	lds	r24, 0x0184
     2c0:	90 91 85 01 	lds	r25, 0x0185
     2c4:	68 17       	cp	r22, r24
     2c6:	79 07       	cpc	r23, r25
     2c8:	09 f4       	brne	.+2      	; 0x2cc <maintask+0x7c>
     2ca:	d0 c0       	rjmp	.+416    	; 0x46c <__stack+0x16d>
	{
		lastIteration1 = Timer1val;					// Make ready for next iteration
     2cc:	70 93 85 01 	sts	0x0185, r23
     2d0:	60 93 84 01 	sts	0x0184, r22

		#if SLOW_LOOP_THRU_LED1						// Blink PB2 LED every 100ms, when going through the mainloop 
		PORTB = PORTB ^ IO_LED1;  					// Blink a led
		#endif
		#if SLOW_LOOP_THRU_LED2						// Blink PB3 LED every 100ms, when going through the mainloop
		PORTB = PORTB ^ IO_LED2;  					// Blink a led
     2d4:	85 b1       	in	r24, 0x05	; 5
     2d6:	98 e0       	ldi	r25, 0x08	; 8
     2d8:	89 27       	eor	r24, r25
     2da:	85 b9       	out	0x05, r24	; 5
		#endif

		//
		// Protect the Transmit Power Amplifier against overtemperature
		//
		if(Status1 & TX_FLAG)						// If Transmitter is on the air
     2dc:	80 91 7a 01 	lds	r24, 0x017A
     2e0:	80 ff       	sbrs	r24, 0
     2e2:	18 c0       	rjmp	.+48     	; 0x314 <__stack+0x15>
		{
			// Minimize I2C traffic during receive, only read tmp rapidly during TX
			#if SLOW_POLL_DURING_RX || SSLO_POLL_DURING_RX
			tmp100(R.TMP100_I2C_addr);				// Update temperature reading,
     2e4:	80 91 02 01 	lds	r24, 0x0102
     2e8:	0e 94 1c 0c 	call	0x1838	; 0x1838 <tmp100>
			#endif									// value read into tmp100data variable

			if(tmp100_data.i1 > R.hi_tmp_trigger)	// Do we have a thermal runaway of the PA?
     2ec:	20 91 70 02 	lds	r18, 0x0270
     2f0:	33 27       	eor	r19, r19
     2f2:	27 fd       	sbrc	r18, 7
     2f4:	30 95       	com	r19
     2f6:	80 91 09 01 	lds	r24, 0x0109
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	82 17       	cp	r24, r18
     2fe:	93 07       	cpc	r25, r19
     300:	64 f4       	brge	.+24     	; 0x31a <__stack+0x1b>
			{
				Status1 |= TMP_ALARM;				// Set the Temperature Alarm flag
     302:	80 91 7a 01 	lds	r24, 0x017A
     306:	88 60       	ori	r24, 0x08	; 8
     308:	80 93 7a 01 	sts	0x017A, r24

				#if MOBO_STYLE_IO
				MoboPCF_set(Mobo_PCF_TX);			// Shut down transmitter
     30c:	80 e8       	ldi	r24, 0x80	; 128
     30e:	0e 94 00 0c 	call	0x1800	; 0x1800 <MoboPCF_set>
     312:	03 c0       	rjmp	.+6      	; 0x31a <__stack+0x1b>
				#if OLDSTYLE_IO
				IO_PORT_PTT_CWKEY &= ~IO_PTT;
				#endif//OLDSTYLE_IO
			}
		}
		else Status1 &= ~TMP_ALARM;					// Clear the Hi Temp flag
     314:	87 7f       	andi	r24, 0xF7	; 247
     316:	80 93 7a 01 	sts	0x017A, r24
		#if	FAN_CONTROL				// Turn PA Cooling FAN On/Off, based on temperature
		//
		// Activate Cooling Fan for the Transmit Power Amplifier, if needed
		//
		// Are we cool?
		if(Status2 & COOLING_FAN)
     31a:	40 91 7b 01 	lds	r20, 0x017B
     31e:	20 91 70 02 	lds	r18, 0x0270
     322:	47 ff       	sbrs	r20, 7
     324:	15 c0       	rjmp	.+42     	; 0x350 <__stack+0x51>
		{
			if(tmp100_data.i1 <= R.Fan_Off)
     326:	33 27       	eor	r19, r19
     328:	27 fd       	sbrc	r18, 7
     32a:	30 95       	com	r19
     32c:	80 91 6d 01 	lds	r24, 0x016D
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	82 17       	cp	r24, r18
     334:	93 07       	cpc	r25, r19
     336:	1c f1       	brlt	.+70     	; 0x37e <__stack+0x7f>
			{
				Status2 &= ~COOLING_FAN;			// Set FAN Status Off
     338:	4f 77       	andi	r20, 0x7F	; 127
     33a:	40 93 7b 01 	sts	0x017B, r20
				IO_PORT_FC = IO_PORT_FC & ~IO_FC; 	// Set Fan Bit low	
				#elif	BUILTIN_PCF_FAN
				MoboPCF_clear(PCF_MOBO_FAN_BIT);	// Builtin PCF, set fan bit low
				#elif	EXTERN_PCF_FAN
				//Read current status of the PCF
				uint8_t x = pcf8574_read(R.PCF_I2C_Ext_addr);
     33e:	80 91 08 01 	lds	r24, 0x0108
     342:	0e 94 08 0c 	call	0x1810	; 0x1810 <pcf8574_read>
				//and turn off the FAN bit
				x &= ~R.PCF_fan_bit;				// Extern PCF, set fan bit low
     346:	60 91 6e 01 	lds	r22, 0x016E
     34a:	60 95       	com	r22
     34c:	68 23       	and	r22, r24
     34e:	13 c0       	rjmp	.+38     	; 0x376 <__stack+0x77>
			}
		}
		// Do we need to start the cooling fan?
		else
		{
			if(tmp100_data.i1 > R.Fan_On)
     350:	33 27       	eor	r19, r19
     352:	27 fd       	sbrc	r18, 7
     354:	30 95       	com	r19
     356:	80 91 6c 01 	lds	r24, 0x016C
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	82 17       	cp	r24, r18
     35e:	93 07       	cpc	r25, r19
     360:	74 f4       	brge	.+28     	; 0x37e <__stack+0x7f>
			{
				Status2 |= COOLING_FAN;				// Set FAN Status ON
     362:	40 68       	ori	r20, 0x80	; 128
     364:	40 93 7b 01 	sts	0x017B, r20
				IO_PORT_FC = IO_PORT_FC | IO_FC; 	// Set Fan Bit high
				#elif	BUILTIN_PCF_FAN
				MoboPCF_set(PCF_MOBO_FAN_BIT);		// Builtin PCF, set fan bit high
				#elif	EXTERN_PCF_FAN
				//Read current status of the PCF
				uint8_t x = pcf8574_read(R.PCF_I2C_Ext_addr);
     368:	80 91 08 01 	lds	r24, 0x0108
     36c:	0e 94 08 0c 	call	0x1810	; 0x1810 <pcf8574_read>
				//and turn on the FAN bit
				x |= R.PCF_fan_bit;					// Extern PCF, set fan bit high
     370:	60 91 6e 01 	lds	r22, 0x016E
     374:	68 2b       	or	r22, r24
				pcf8574_byte(R.PCF_I2C_Ext_addr, x);
     376:	80 91 08 01 	lds	r24, 0x0108
     37a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <pcf8574_byte>
		//
		// Encoder activity watchdog, if Fast mode is active
		//
		static uint8_t fast_patience;				// Patience timer

		if (Status2 & ENC_FAST)						// Is fast mode active?
     37e:	90 91 7b 01 	lds	r25, 0x017B
     382:	94 ff       	sbrs	r25, 4
     384:	13 c0       	rjmp	.+38     	; 0x3ac <__stack+0xad>
		{
			if (Status2 & ENC_NEWFREQ)				// Encoder activity, reset timer
     386:	91 ff       	sbrs	r25, 1
     388:	03 c0       	rjmp	.+6      	; 0x390 <__stack+0x91>
				fast_patience=0;
     38a:	10 92 7d 01 	sts	0x017D, r1
     38e:	05 c0       	rjmp	.+10     	; 0x39a <__stack+0x9b>
			else									// No activity, increase timer
				fast_patience++;
     390:	80 91 7d 01 	lds	r24, 0x017D
     394:	8f 5f       	subi	r24, 0xFF	; 255
     396:	80 93 7d 01 	sts	0x017D, r24
					
			if(fast_patience>=ENC_FAST_PATIENCE)	// No activity for a long time, revert to normal mode
     39a:	80 91 7d 01 	lds	r24, 0x017D
     39e:	85 30       	cpi	r24, 0x05	; 5
     3a0:	28 f0       	brcs	.+10     	; 0x3ac <__stack+0xad>
			{
				Status2 &= ~ENC_FAST;
     3a2:	9f 7e       	andi	r25, 0xEF	; 239
     3a4:	90 93 7b 01 	sts	0x017B, r25
				fast_patience = 0;
     3a8:	10 92 7d 01 	sts	0x017D, r1
		}
		#endif
		//
		// Read Pushbutton state from Shaft encoder and manage Frequency band memories
		//
		if (pushcount >= ENC_PUSHB_MAX)				// "Long Push", store settings
     3ac:	80 91 7f 01 	lds	r24, 0x017F
     3b0:	8a 30       	cpi	r24, 0x0A	; 10
     3b2:	d8 f0       	brcs	.+54     	; 0x3ea <__stack+0xeb>
		{
			eeprom_write_block(&R.Freq[0], &E.Freq[R.SwitchFreq], sizeof(R.Freq[0]));
     3b4:	60 91 45 01 	lds	r22, 0x0145
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	66 0f       	add	r22, r22
     3bc:	77 1f       	adc	r23, r23
     3be:	66 0f       	add	r22, r22
     3c0:	77 1f       	adc	r23, r23
     3c2:	63 5e       	subi	r22, 0xE3	; 227
     3c4:	7f 4f       	sbci	r23, 0xFF	; 255
     3c6:	8d e1       	ldi	r24, 0x1D	; 29
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	44 e0       	ldi	r20, 0x04	; 4
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	0e 94 c8 12 	call	0x2590	; 0x2590 <__eewr_block_usb162>
			eeprom_write_block(&R.SwitchFreq, &E.SwitchFreq, sizeof (uint8_t));
     3d2:	85 e4       	ldi	r24, 0x45	; 69
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	65 e4       	ldi	r22, 0x45	; 69
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	0e 94 c8 12 	call	0x2590	; 0x2590 <__eewr_block_usb162>
			// // Maybe a bit redundant: Store in memory location 0:
			//eeprom_write_block(&R.Freq[0], &E.Freq[0], sizeof(R.Freq[0]));
			Status2 = Status2 | ENC_NEWFREQ | ENC_STORED;	// We have a new frequency stored.
     3e2:	80 91 7b 01 	lds	r24, 0x017B
     3e6:	86 60       	ori	r24, 0x06	; 6
     3e8:	26 c0       	rjmp	.+76     	; 0x436 <__stack+0x137>
													// NEWFREQ signals a frq update
													// STORED signals an LCD message
		}
		else if (ENC_PUSHB_INPORT & ENC_PUSHB_PIN) 	// Pin high = just released, or not pushed
     3ea:	4f 9b       	sbis	0x09, 7	; 9
     3ec:	2a c0       	rjmp	.+84     	; 0x442 <__stack+0x143>
		{
			if (pushcount >= ENC_PUSHB_MIN)			// Release after a "Short push"
     3ee:	88 23       	and	r24, r24
     3f0:	29 f1       	breq	.+74     	; 0x43c <__stack+0x13d>
			{	
				#if ENCODER_INT_STYLE				// Interrupt driven Shaft Encoder
				cli();								// Don't want a rogue interrupt to mess with us
				#endif
				R.SwitchFreq++;						// rotate through memories
     3f2:	80 91 45 01 	lds	r24, 0x0145
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	80 93 45 01 	sts	0x0145, r24
				if (R.SwitchFreq > 9) R.SwitchFreq = 1;
     3fc:	8a 30       	cpi	r24, 0x0A	; 10
     3fe:	18 f0       	brcs	.+6      	; 0x406 <__stack+0x107>
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	80 93 45 01 	sts	0x0145, r24
				R.Freq[0] = R.Freq[R.SwitchFreq];	// Fetch last stored frequency in next band
     406:	e0 91 45 01 	lds	r30, 0x0145
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	e0 50       	subi	r30, 0x00	; 0
     416:	ff 4f       	sbci	r31, 0xFF	; 255
     418:	85 8d       	ldd	r24, Z+29	; 0x1d
     41a:	96 8d       	ldd	r25, Z+30	; 0x1e
     41c:	a7 8d       	ldd	r26, Z+31	; 0x1f
     41e:	b0 a1       	ldd	r27, Z+32	; 0x20
     420:	80 93 1d 01 	sts	0x011D, r24
     424:	90 93 1e 01 	sts	0x011E, r25
     428:	a0 93 1f 01 	sts	0x011F, r26
     42c:	b0 93 20 01 	sts	0x0120, r27
				Status2 |= ENC_NEWFREQ;				// Signal a new frequency to be written
     430:	80 91 7b 01 	lds	r24, 0x017B
     434:	82 60       	ori	r24, 0x02	; 2
     436:	80 93 7b 01 	sts	0x017B, r24
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__stack+0x151>
				sei();
				#endif
			}
			else
			{										// No push or a very short push, do nothing
				pushcount = 0;						// Initialize push counter for next time
     43c:	10 92 7f 01 	sts	0x017F, r1
     440:	07 c0       	rjmp	.+14     	; 0x450 <__stack+0x151>
			}
		}
		else if (!(Status2 & ENC_STORED))			// Button Pushed, count up the push timer
     442:	90 91 7b 01 	lds	r25, 0x017B
     446:	92 fd       	sbrc	r25, 2
     448:	03 c0       	rjmp	.+6      	; 0x450 <__stack+0x151>
		{											// (unless this is tail end of a long push,
			pushcount++;							//  then do nothing)
     44a:	8f 5f       	subi	r24, 0xFF	; 255
     44c:	80 93 7f 01 	sts	0x017F, r24
		}
		
		if(Status2 & ENC_STORED)
     450:	80 91 7b 01 	lds	r24, 0x017B
     454:	82 ff       	sbrs	r24, 2
     456:	02 c0       	rjmp	.+4      	; 0x45c <__stack+0x15d>
		{
			lcd_display_Memory_Stored();			// Display Memory Stored for a certain amount of time
     458:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <lcd_display_Memory_Stored>
		// Print to LCD Display
		//
		lcd_display();
		
		#elif LCD_PAR_DISPLAY2
		lcd_display_TRX_status_on_change();			// Display TX/RX transition stuff
     45c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <lcd_display_TRX_status_on_change>
		if (Status1 & TX_FLAG)
     460:	80 91 7a 01 	lds	r24, 0x017A
     464:	80 ff       	sbrs	r24, 0
     466:	02 c0       	rjmp	.+4      	; 0x46c <__stack+0x16d>
		{
			lcd_display_P_SWR_V_C_T();				// Display non-static measured values
     468:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <lcd_display_P_SWR_V_C_T>
	
	//-------------------------------------------------------------------------------
	// Here we do routines which are to be accessed once every 1/100th of a second (10ms)
	// We have a free running timer which matures once every ~1.05 seconds
	//-------------------------------------------------------------------------------
	Timer1val2 = TCNT1/656; // get current Timer1 value, changeable every ~1/100th sec
     46c:	80 91 84 00 	lds	r24, 0x0084
     470:	90 91 85 00 	lds	r25, 0x0085
     474:	60 e9       	ldi	r22, 0x90	; 144
     476:	72 e0       	ldi	r23, 0x02	; 2
     478:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
	if (Timer1val2 != lastIteration2)				// Once every 1/100th of a second, do stuff
     47c:	80 91 82 01 	lds	r24, 0x0182
     480:	90 91 83 01 	lds	r25, 0x0183
     484:	68 17       	cp	r22, r24
     486:	79 07       	cpc	r23, r25
     488:	09 f4       	brne	.+2      	; 0x48c <__stack+0x18d>
     48a:	3f c0       	rjmp	.+126    	; 0x50a <__stack+0x20b>
	{
		lastIteration2 = Timer1val2;				// Make ready for next iteration
     48c:	70 93 83 01 	sts	0x0183, r23
     490:	60 93 82 01 	sts	0x0182, r22
		//
		// Update all ADC readings
		//
		// I2C noise reduction, less or no I2C traffic during RX
		#if SSLO_POLL_DURING_RX ||	SLOW_POLL_DURING_RX	|| NO_I2C_DURING_RX
		if (Status1 & TX_FLAG)
     494:	80 91 7a 01 	lds	r24, 0x017A
     498:	80 ff       	sbrs	r24, 0
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__stack+0x1a5>
		#endif
		ad7991_poll(R.AD7991_I2C_addr);				// Polls the AD7991 every time (9 bytes)
     49c:	80 91 04 01 	lds	r24, 0x0104
     4a0:	0e 94 4e 0c 	call	0x189c	; 0x189c <ad7991_poll>
													// => constant traffic on I2C
		//
		// RD16HHF1 PA Bias management
		//
		PA_bias();									// Autobias and other bias management functions
     4a4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <PA_bias>
		//
		// SWR Protect
		//
		// I2C noise reduction, less or no I2C traffic during RX
		#if NO_I2C_DURING_RX ||	SLOW_POLL_DURING_RX	|| SSLO_POLL_DURING_RX
		if (Status1 & TX_FLAG)
     4a8:	80 91 7a 01 	lds	r24, 0x017A
     4ac:	80 ff       	sbrs	r24, 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__stack+0x1b5>
		#endif
		Test_SWR();									// Calculate SWR and control the PTT2 output
     4b0:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Test_SWR>

		//
		// Enact (write) frequency changes resulting from interrupt routine or
		// from the pushbutton memory management routine above
		//
		if (Status2 & ENC_NEWFREQ)					// VFO was turned or freq updated above
     4b4:	80 91 7b 01 	lds	r24, 0x017B
     4b8:	81 ff       	sbrs	r24, 1
     4ba:	27 c0       	rjmp	.+78     	; 0x50a <__stack+0x20b>
		{
			#if ENCODER_INT_STYLE					// Interrupt driven Shaft Encoder
			cli();									// Don't want a rogue interrupt to mess with us
			#endif
			R.Freq[R.SwitchFreq] = R.Freq[0];		// Keep track, move into short term memory
     4bc:	e0 91 45 01 	lds	r30, 0x0145
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	ee 0f       	add	r30, r30
     4c4:	ff 1f       	adc	r31, r31
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	e0 50       	subi	r30, 0x00	; 0
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	80 91 1d 01 	lds	r24, 0x011D
     4d2:	90 91 1e 01 	lds	r25, 0x011E
     4d6:	a0 91 1f 01 	lds	r26, 0x011F
     4da:	b0 91 20 01 	lds	r27, 0x0120
     4de:	85 8f       	std	Z+29, r24	; 0x1d
     4e0:	96 8f       	std	Z+30, r25	; 0x1e
     4e2:	a7 8f       	std	Z+31, r26	; 0x1f
     4e4:	b0 a3       	std	Z+32, r27	; 0x20
			SetFreq(R.Freq[0]);						// Write the new frequency to Si570
     4e6:	60 91 1d 01 	lds	r22, 0x011D
     4ea:	70 91 1e 01 	lds	r23, 0x011E
     4ee:	80 91 1f 01 	lds	r24, 0x011F
     4f2:	90 91 20 01 	lds	r25, 0x0120
     4f6:	79 d7       	rcall	.+3826   	; 0x13ea <SetFreq>
			Status2 &= ~ENC_NEWFREQ;				// and clear flag
     4f8:	80 91 7b 01 	lds	r24, 0x017B
     4fc:	8d 7f       	andi	r24, 0xFD	; 253
     4fe:	80 93 7b 01 	sts	0x017B, r24
			pushcount = 0;							// Clear the push counter for next time
     502:	10 92 7f 01 	sts	0x017F, r1
			#if ENCODER_INT_STYLE					// Interrupt driven Shaft Encoder
			sei();
			#endif

			#if LCD_PAR_DISPLAY2
			lcd_display_freq_and_filters();			// Display frequency and filters
     506:	0e 94 9e 0c 	call	0x193c	; 0x193c <lcd_display_freq_and_filters>
			#endif
		}
	}

	wdt_reset();									// Whoops... must remember to reset that running watchdog
     50a:	a8 95       	wdr
}
     50c:	08 95       	ret
     50e:	ff cf       	rjmp	.-2      	; 0x50e <__stack+0x20f>

00000510 <main>:
//						then - do everything, all over again
//-----------------------------------------------------------------------------------------
//
int main(void)
{
	MCUSR &= ~(1 << WDRF);							// Disable watchdog if enabled by bootloader/fuses
     510:	84 b7       	in	r24, 0x34	; 52
     512:	87 7f       	andi	r24, 0xF7	; 247
     514:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     516:	88 e1       	ldi	r24, 0x18	; 24
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	80 93 60 00 	sts	0x0060, r24
     520:	10 92 60 00 	sts	0x0060, r1
     524:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	80 e8       	ldi	r24, 0x80	; 128
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	80 93 61 00 	sts	0x0061, r24
     532:	90 93 61 00 	sts	0x0061, r25
     536:	0f be       	out	0x3f, r0	; 63

	clock_prescale_set(clock_div_1); 				// with 16MHz crystal this means CLK=16000000

	// 16-bit Timer1 Initialization
	TCCR1A = 0; //start the timer
     538:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1 << CS12); // prescale Timer1 by CLK/256
     53c:	84 e0       	ldi	r24, 0x04	; 4
     53e:	80 93 81 00 	sts	0x0081, r24
	// 16-bit = 2^16 = 65536 maximum ticks for Timer1
	// 65536 / 62500 = ~1.05 seconds
	// so Timer1 will overflow back to 0 about every 1 seconds
	// Timer1val = TCNT1; // get current Timer1 value

	IO_DDR_PTT_CWKEY = IO_LED1 | IO_LED2 | IO_PTT;	// Set pins for output
     542:	8c e0       	ldi	r24, 0x0C	; 12
     544:	84 b9       	out	0x04, r24	; 4
	IO_PORT_PTT_CWKEY = IO_CWKEY1 | IO_CWKEY2;		// Set pullups for CW key input pins
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	85 b9       	out	0x05, r24	; 5

	#if	FAN_CONTROL									// Turn PA Cooling FAN On/Off, based on temperature
	#if	PORTD_FAN
	IO_DDR_FC = IO_DDR_FC | IO_FC;  				// Set FAN_CONTROL Pin as output
	#else
	Status2 |= COOLING_FAN;							// Ensure proper init the first time
     54a:	80 91 7b 01 	lds	r24, 0x017B
     54e:	80 68       	ori	r24, 0x80	; 128
     550:	80 93 7b 01 	sts	0x017B, r24
	//
	// Enforce "Factory default settings" when firmware is run for the very first time after
	// a fresh firmware installation with a new "serial number" in the COLDSTART_REF #define
	// This may be necessary if there is garbage in the EEPROM, preventing startup
	// To activate, roll "COLDSTART_REF" Serial Number in the Mobo.h file
	if (eeprom_read_byte(&E.EEPROM_init_check) != R.EEPROM_init_check)
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 c0 12 	call	0x2580	; 0x2580 <__eerd_byte_usb162>
     55c:	90 91 00 01 	lds	r25, 0x0100
     560:	89 17       	cp	r24, r25
     562:	89 f0       	breq	.+34     	; 0x586 <main+0x76>
	{
		if (pcf8574_read(TMP101_I2C_ADDRESS) != 255)// Autosense if TMP101
     564:	8a e4       	ldi	r24, 0x4A	; 74
     566:	0e 94 08 0c 	call	0x1810	; 0x1810 <pcf8574_read>
     56a:	8f 3f       	cpi	r24, 0xFF	; 255
     56c:	19 f0       	breq	.+6      	; 0x574 <main+0x64>
		{
			R.TMP100_I2C_addr = TMP101_I2C_ADDRESS;	// Then modify TMP100 address
     56e:	8a e4       	ldi	r24, 0x4A	; 74
     570:	80 93 02 01 	sts	0x0102, r24
		}

		eeprom_write_block(&R, &E, sizeof(E));		// Initialize eeprom to "factory defaults".
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	4f e6       	ldi	r20, 0x6F	; 111
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	0e 94 c8 12 	call	0x2590	; 0x2590 <__eewr_block_usb162>
     584:	08 c0       	rjmp	.+16     	; 0x596 <main+0x86>
	}
	else
	{
		eeprom_read_block(&R, &E, sizeof(E));		// Load the persistent data from eeprom
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	4f e6       	ldi	r20, 0x6F	; 111
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	0e 94 b0 12 	call	0x2560	; 0x2560 <__eerd_block_usb162>
	// rather than a full page of 128 bytes... something like:
	// WriteFlashByte(&SerialNumberString + offset, R.SerialNumber);
	//#endif

	#if ENCODER_INT_STYLE || ENCODER_SCAN_STYLE		// Shaft Encoder VFO function
	R.Freq[0] = R.Freq[R.SwitchFreq];				// Fetch last frequency stored
     596:	e0 91 45 01 	lds	r30, 0x0145
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	e0 50       	subi	r30, 0x00	; 0
     5a6:	ff 4f       	sbci	r31, 0xFF	; 255
     5a8:	85 8d       	ldd	r24, Z+29	; 0x1d
     5aa:	96 8d       	ldd	r25, Z+30	; 0x1e
     5ac:	a7 8d       	ldd	r26, Z+31	; 0x1f
     5ae:	b0 a1       	ldd	r27, Z+32	; 0x20
     5b0:	80 93 1d 01 	sts	0x011D, r24
     5b4:	90 93 1e 01 	sts	0x011E, r25
     5b8:	a0 93 1f 01 	sts	0x011F, r26
     5bc:	b0 93 20 01 	sts	0x0120, r27
	#endif

	Status2 |= SI570_OFFL;							// Si570 is offline, not initialized
     5c0:	80 91 7b 01 	lds	r24, 0x017B
     5c4:	81 60       	ori	r24, 0x01	; 1
     5c6:	80 93 7b 01 	sts	0x017B, r24

	DeviceInit();									// Initialize the Si570 device.
     5ca:	c7 d7       	rcall	.+3982   	; 0x155a <DeviceInit>
	lcd_i2c_address_init(LCD_I2C_ADDRESS);	
	#endif
	
	// Parallel connected LCD display
	#if (LCD_PAR_DISPLAY || LCD_PAR_DISPLAY2)
   	lcd_init(LCD_DISP_ON);
     5cc:	8c e0       	ldi	r24, 0x0C	; 12
     5ce:	70 d3       	rcall	.+1760   	; 0xcb0 <lcd_init>
    #endif

	// Identical routines for I2C and parallel connected displays
	#if (LCD_PAR_DISPLAY || LCD_PAR_DISPLAY2 || LCD_I2C_DISPLAY)
	rprintfInit(lcd_data);							// Init AVRLIB rprintf()
     5d0:	80 e4       	ldi	r24, 0x40	; 64
     5d2:	96 e0       	ldi	r25, 0x06	; 6
     5d4:	8a d3       	rcall	.+1812   	; 0xcea <rprintfInit>
	#if BARGRAPH
	// load the first 8 custom characters
	lcd_bargraph_init();
     5d6:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_bargraph_init>
	// for the Mobo:
	// void usbFunctionWrite(USB_Notification_Header_t *, unsigned char *, unsigned char);
	// unsigned char usbFunctionSetup(USB_Notification_Header_t *);
	// void maintask(void);

	wdt_enable(WDTO_250MS);							// Start the Watchdog Timer, 250ms
     5da:	2c e0       	ldi	r18, 0x0C	; 12
     5dc:	88 e1       	ldi	r24, 0x18	; 24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	a8 95       	wdr
     5e6:	80 93 60 00 	sts	0x0060, r24
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	20 93 60 00 	sts	0x0060, r18

	#if ENCODER_INT_STYLE || ENCODER_SCAN_STYLE		// Shaft Encoder VFO function
													// Two flavours available, interrupt driven, or
													// regular scanning of the Encoder pins
	shaftEncoderInit();								// Init shaft encoder
     5f0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <shaftEncoderInit>
	#endif

	Initialize_USB();								// Start the works, we're in business
     5f4:	f4 dd       	rcall	.-1048   	; 0x1de <Initialize_USB>
}
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	08 95       	ret

000005fc <USB_Device_ProcessControlPacket>:
uint8_t USB_ConfigurationNumber;
bool    USB_RemoteWakeupEnabled;
bool    USB_CurrentlySelfPowered;

void USB_Device_ProcessControlPacket(void)
{
     5fc:	1f 93       	push	r17
     5fe:	df 93       	push	r29
     600:	cf 93       	push	r28
     602:	00 d0       	rcall	.+0      	; 0x604 <USB_Device_ProcessControlPacket+0x8>
     604:	00 d0       	rcall	.+0      	; 0x606 <USB_Device_ProcessControlPacket+0xa>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
     60a:	e6 e7       	ldi	r30, 0x76	; 118
     60c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     60e:	80 91 f1 00 	lds	r24, 0x00F1
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     612:	81 93       	st	Z+, r24
void USB_Device_ProcessControlPacket(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	ee 37       	cpi	r30, 0x7E	; 126
     618:	f8 07       	cpc	r31, r24
     61a:	c9 f7       	brne	.-14     	; 0x60e <USB_Device_ProcessControlPacket+0x12>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     61c:	80 91 76 02 	lds	r24, 0x0276
	
	switch (USB_ControlRequest.bRequest)
     620:	20 91 77 02 	lds	r18, 0x0277
     624:	25 30       	cpi	r18, 0x05	; 5
     626:	09 f4       	brne	.+2      	; 0x62a <USB_Device_ProcessControlPacket+0x2e>
     628:	96 c0       	rjmp	.+300    	; 0x756 <USB_Device_ProcessControlPacket+0x15a>
     62a:	26 30       	cpi	r18, 0x06	; 6
     62c:	48 f4       	brcc	.+18     	; 0x640 <USB_Device_ProcessControlPacket+0x44>
     62e:	21 30       	cpi	r18, 0x01	; 1
     630:	09 f4       	brne	.+2      	; 0x634 <USB_Device_ProcessControlPacket+0x38>
     632:	40 c0       	rjmp	.+128    	; 0x6b4 <USB_Device_ProcessControlPacket+0xb8>
     634:	21 30       	cpi	r18, 0x01	; 1
     636:	70 f0       	brcs	.+28     	; 0x654 <USB_Device_ProcessControlPacket+0x58>
     638:	23 30       	cpi	r18, 0x03	; 3
     63a:	09 f0       	breq	.+2      	; 0x63e <USB_Device_ProcessControlPacket+0x42>
     63c:	60 c1       	rjmp	.+704    	; 0x8fe <USB_Device_ProcessControlPacket+0x302>
     63e:	3a c0       	rjmp	.+116    	; 0x6b4 <USB_Device_ProcessControlPacket+0xb8>
     640:	28 30       	cpi	r18, 0x08	; 8
     642:	09 f4       	brne	.+2      	; 0x646 <USB_Device_ProcessControlPacket+0x4a>
     644:	0d c1       	rjmp	.+538    	; 0x860 <USB_Device_ProcessControlPacket+0x264>
     646:	29 30       	cpi	r18, 0x09	; 9
     648:	09 f4       	brne	.+2      	; 0x64c <USB_Device_ProcessControlPacket+0x50>
     64a:	2d c1       	rjmp	.+602    	; 0x8a6 <USB_Device_ProcessControlPacket+0x2aa>
     64c:	26 30       	cpi	r18, 0x06	; 6
     64e:	09 f0       	breq	.+2      	; 0x652 <USB_Device_ProcessControlPacket+0x56>
     650:	56 c1       	rjmp	.+684    	; 0x8fe <USB_Device_ProcessControlPacket+0x302>
     652:	9c c0       	rjmp	.+312    	; 0x78c <USB_Device_ProcessControlPacket+0x190>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     654:	80 38       	cpi	r24, 0x80	; 128
     656:	21 f0       	breq	.+8      	; 0x660 <USB_Device_ProcessControlPacket+0x64>
     658:	82 38       	cpi	r24, 0x82	; 130
     65a:	09 f0       	breq	.+2      	; 0x65e <USB_Device_ProcessControlPacket+0x62>
     65c:	50 c1       	rjmp	.+672    	; 0x8fe <USB_Device_ProcessControlPacket+0x302>
     65e:	08 c0       	rjmp	.+16     	; 0x670 <USB_Device_ProcessControlPacket+0x74>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     660:	80 91 71 02 	lds	r24, 0x0271
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			
			if (USB_RemoteWakeupEnabled)
     664:	90 91 72 02 	lds	r25, 0x0272
     668:	99 23       	and	r25, r25
     66a:	69 f0       	breq	.+26     	; 0x686 <USB_Device_ProcessControlPacket+0x8a>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     66c:	82 60       	ori	r24, 0x02	; 2
     66e:	0b c0       	rjmp	.+22     	; 0x686 <USB_Device_ProcessControlPacket+0x8a>
			
			break;
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex);
     670:	80 91 7a 02 	lds	r24, 0x027A
     674:	80 93 e9 00 	sts	0x00E9, r24

			CurrentStatus = Endpoint_IsStalled();
     678:	90 91 eb 00 	lds	r25, 0x00EB
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	95 ff       	sbrs	r25, 5
     680:	80 e0       	ldi	r24, 0x00	; 0

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);			  
     682:	10 92 e9 00 	sts	0x00E9, r1

			break;
#endif
	}

	Endpoint_ClearSETUP();
     686:	90 91 e8 00 	lds	r25, 0x00E8
     68a:	97 7f       	andi	r25, 0xF7	; 247
     68c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     690:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
     694:	10 92 f1 00 	sts	0x00F1, r1

	Endpoint_Write_Word_LE(CurrentStatus);

	Endpoint_ClearIN();
     698:	80 91 e8 00 	lds	r24, 0x00E8
     69c:	98 2f       	mov	r25, r24
     69e:	9e 7f       	andi	r25, 0xFE	; 254
     6a0:	90 93 e8 00 	sts	0x00E8, r25
     6a4:	8f 77       	andi	r24, 0x7F	; 127
     6a6:	80 93 e8 00 	sts	0x00E8, r24
	
	while (!(Endpoint_IsOUTReceived()));
     6aa:	80 91 e8 00 	lds	r24, 0x00E8
     6ae:	82 ff       	sbrs	r24, 2
     6b0:	fc cf       	rjmp	.-8      	; 0x6aa <USB_Device_ProcessControlPacket+0xae>
     6b2:	ef c0       	rjmp	.+478    	; 0x892 <USB_Device_ProcessControlPacket+0x296>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     6b4:	88 23       	and	r24, r24
     6b6:	19 f0       	breq	.+6      	; 0x6be <USB_Device_ProcessControlPacket+0xc2>
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	09 f0       	breq	.+2      	; 0x6be <USB_Device_ProcessControlPacket+0xc2>
     6bc:	20 c1       	rjmp	.+576    	; 0x8fe <USB_Device_ProcessControlPacket+0x302>
	Endpoint_ClearOUT();
}

static void USB_Device_ClearSetFeature(void)
{	
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	8f 71       	andi	r24, 0x1F	; 31
     6c2:	90 70       	andi	r25, 0x00	; 0
     6c4:	00 97       	sbiw	r24, 0x00	; 0
     6c6:	21 f0       	breq	.+8      	; 0x6d0 <USB_Device_ProcessControlPacket+0xd4>
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	91 05       	cpc	r25, r1
     6cc:	c1 f5       	brne	.+112    	; 0x73e <USB_Device_ProcessControlPacket+0x142>
     6ce:	0b c0       	rjmp	.+22     	; 0x6e6 <USB_Device_ProcessControlPacket+0xea>
	{
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
     6d0:	80 91 78 02 	lds	r24, 0x0278
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	09 f0       	breq	.+2      	; 0x6da <USB_Device_ProcessControlPacket+0xde>
     6d8:	13 c1       	rjmp	.+550    	; 0x900 <USB_Device_ProcessControlPacket+0x304>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     6da:	23 30       	cpi	r18, 0x03	; 3
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <USB_Device_ProcessControlPacket+0xe4>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	80 93 72 02 	sts	0x0272, r24
     6e4:	2c c0       	rjmp	.+88     	; 0x73e <USB_Device_ProcessControlPacket+0x142>
			  return;
			
			break;			
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
     6e6:	80 91 78 02 	lds	r24, 0x0278
     6ea:	88 23       	and	r24, r24
     6ec:	41 f5       	brne	.+80     	; 0x73e <USB_Device_ProcessControlPacket+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     6ee:	20 91 7a 02 	lds	r18, 0x027A
     6f2:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <USB_Device_ProcessControlPacket+0xfc>
     6f6:	04 c1       	rjmp	.+520    	; 0x900 <USB_Device_ProcessControlPacket+0x304>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
     6f8:	20 93 e9 00 	sts	0x00E9, r18

				if (Endpoint_IsEnabled())
     6fc:	80 91 eb 00 	lds	r24, 0x00EB
     700:	80 ff       	sbrs	r24, 0
     702:	1d c0       	rjmp	.+58     	; 0x73e <USB_Device_ProcessControlPacket+0x142>
				{				
					if (USB_ControlRequest.bRequest == REQ_ClearFeature)
     704:	80 91 77 02 	lds	r24, 0x0277
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	a1 f4       	brne	.+40     	; 0x734 <USB_Device_ProcessControlPacket+0x138>
					{
						Endpoint_ClearStall();
     70c:	80 91 eb 00 	lds	r24, 0x00EB
     710:	80 61       	ori	r24, 0x10	; 16
     712:	80 93 eb 00 	sts	0x00EB, r24
						Endpoint_ResetFIFO(EndpointIndex);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	02 c0       	rjmp	.+4      	; 0x720 <USB_Device_ProcessControlPacket+0x124>
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	2a 95       	dec	r18
     722:	e2 f7       	brpl	.-8      	; 0x71c <USB_Device_ProcessControlPacket+0x120>
     724:	80 93 ea 00 	sts	0x00EA, r24
     728:	10 92 ea 00 	sts	0x00EA, r1
						Endpoint_ResetDataToggle();
     72c:	80 91 eb 00 	lds	r24, 0x00EB
     730:	88 60       	ori	r24, 0x08	; 8
     732:	03 c0       	rjmp	.+6      	; 0x73a <USB_Device_ProcessControlPacket+0x13e>
					}
					else
					{
						Endpoint_StallTransaction();
     734:	80 91 eb 00 	lds	r24, 0x00EB
     738:	80 62       	ori	r24, 0x20	; 32
     73a:	80 93 eb 00 	sts	0x00EB, r24
			
			break;
#endif
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     73e:	10 92 e9 00 	sts	0x00E9, r1

	Endpoint_ClearSETUP();
     742:	80 91 e8 00 	lds	r24, 0x00E8
     746:	87 7f       	andi	r24, 0xF7	; 247
     748:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearIN();
     74c:	80 91 e8 00 	lds	r24, 0x00E8
     750:	98 2f       	mov	r25, r24
     752:	9e 7f       	andi	r25, 0xFE	; 254
     754:	a2 c0       	rjmp	.+324    	; 0x89a <USB_Device_ProcessControlPacket+0x29e>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     756:	88 23       	and	r24, r24
     758:	09 f0       	breq	.+2      	; 0x75c <USB_Device_ProcessControlPacket+0x160>
     75a:	d1 c0       	rjmp	.+418    	; 0x8fe <USB_Device_ProcessControlPacket+0x302>
	}
}

static void USB_Device_SetAddress(void)
{
	Endpoint_ClearSETUP();
     75c:	80 91 e8 00 	lds	r24, 0x00E8
     760:	87 7f       	andi	r24, 0xF7	; 247
     762:	80 93 e8 00 	sts	0x00E8, r24
	
	Endpoint_ClearIN();
     766:	80 91 e8 00 	lds	r24, 0x00E8
     76a:	98 2f       	mov	r25, r24
     76c:	9e 7f       	andi	r25, 0xFE	; 254
     76e:	90 93 e8 00 	sts	0x00E8, r25
     772:	8f 77       	andi	r24, 0x7F	; 127
     774:	80 93 e8 00 	sts	0x00E8, r24
	
	while (!(Endpoint_IsINReady()));
     778:	80 91 e8 00 	lds	r24, 0x00E8
     77c:	80 ff       	sbrs	r24, 0
     77e:	fc cf       	rjmp	.-8      	; 0x778 <USB_Device_ProcessControlPacket+0x17c>

	UDADDR = ((1 << ADDEN) | ((uint8_t)USB_ControlRequest.wValue & 0x7F));
     780:	80 91 78 02 	lds	r24, 0x0278
     784:	80 68       	ori	r24, 0x80	; 128
     786:	80 93 e3 00 	sts	0x00E3, r24
     78a:	ba c0       	rjmp	.+372    	; 0x900 <USB_Device_ProcessControlPacket+0x304>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     78c:	80 58       	subi	r24, 0x80	; 128
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	08 f0       	brcs	.+2      	; 0x794 <USB_Device_ProcessControlPacket+0x198>
     792:	b5 c0       	rjmp	.+362    	; 0x8fe <USB_Device_ProcessControlPacket+0x302>
static void USB_Device_GetDescriptor(void)
{
	void*    DescriptorPointer;
	uint16_t DescriptorSize;
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,
     794:	80 91 78 02 	lds	r24, 0x0278
     798:	90 91 79 02 	lds	r25, 0x0279
     79c:	60 91 7a 02 	lds	r22, 0x027A
     7a0:	ae 01       	movw	r20, r28
     7a2:	4f 5f       	subi	r20, 0xFF	; 255
     7a4:	5f 4f       	sbci	r21, 0xFF	; 255
     7a6:	1f dd       	rcall	.-1474   	; 0x1e6 <CALLBACK_USB_GetDescriptor>
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	09 f4       	brne	.+2      	; 0x7ae <USB_Device_ProcessControlPacket+0x1b2>
     7ac:	a9 c0       	rjmp	.+338    	; 0x900 <USB_Device_ProcessControlPacket+0x304>
	                                                 USB_ControlRequest.wIndex, &DescriptorPointer)) == NO_DESCRIPTOR)
	{
		return;
	}
	
	Endpoint_ClearSETUP();
     7ae:	20 91 e8 00 	lds	r18, 0x00E8
     7b2:	27 7f       	andi	r18, 0xF7	; 247
     7b4:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#else
	bool SendZLP;
	
	if (USB_ControlRequest.wLength > DescriptorSize)
     7b8:	20 91 7c 02 	lds	r18, 0x027C
     7bc:	30 91 7d 02 	lds	r19, 0x027D
     7c0:	82 17       	cp	r24, r18
     7c2:	93 07       	cpc	r25, r19
     7c4:	20 f4       	brcc	.+8      	; 0x7ce <USB_Device_ProcessControlPacket+0x1d2>
	  USB_ControlRequest.wLength = DescriptorSize;
     7c6:	90 93 7d 02 	sts	0x027D, r25
     7ca:	80 93 7c 02 	sts	0x027C, r24
bool    USB_CurrentlySelfPowered;

void USB_Device_ProcessControlPacket(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	2d c0       	rjmp	.+90     	; 0x82c <USB_Device_ProcessControlPacket+0x230>
	if (USB_ControlRequest.wLength > DescriptorSize)
	  USB_ControlRequest.wLength = DescriptorSize;
	
	while (USB_ControlRequest.wLength)
	{
		while (!(Endpoint_IsINReady()))
     7d2:	80 91 e8 00 	lds	r24, 0x00E8
     7d6:	80 fd       	sbrc	r24, 0
     7d8:	10 c0       	rjmp	.+32     	; 0x7fa <USB_Device_ProcessControlPacket+0x1fe>
     7da:	a1 c0       	rjmp	.+322    	; 0x91e <USB_Device_ProcessControlPacket+0x322>
		while (USB_ControlRequest.wLength && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
		{
			#if defined (USE_EEPROM_DESCRIPTORS)
			Endpoint_Write_Byte(eeprom_read_byte(DescriptorPointer++));			
			#else
			Endpoint_Write_Byte(pgm_read_byte(DescriptorPointer++));
     7dc:	e9 81       	ldd	r30, Y+1	; 0x01
     7de:	fa 81       	ldd	r31, Y+2	; 0x02
     7e0:	9f 01       	movw	r18, r30
     7e2:	2f 5f       	subi	r18, 0xFF	; 255
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
     7e6:	3a 83       	std	Y+2, r19	; 0x02
     7e8:	29 83       	std	Y+1, r18	; 0x01
     7ea:	e4 91       	lpm	r30, Z+
			 *  \param Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     7ec:	e0 93 f1 00 	sts	0x00F1, r30
			#endif
			
			USB_ControlRequest.wLength--;
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	90 93 7d 02 	sts	0x027D, r25
     7f6:	80 93 7c 02 	sts	0x027C, r24
				Endpoint_ClearOUT();
				return;
			}		
		}
		
		while (USB_ControlRequest.wLength && (Endpoint_BytesInEndpoint() < USB_ControlEndpointSize))
     7fa:	80 91 7c 02 	lds	r24, 0x027C
     7fe:	90 91 7d 02 	lds	r25, 0x027D
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	21 f0       	breq	.+8      	; 0x80e <USB_Device_ProcessControlPacket+0x212>
     806:	20 91 f2 00 	lds	r18, 0x00F2
     80a:	28 30       	cpi	r18, 0x08	; 8
     80c:	38 f3       	brcs	.-50     	; 0x7dc <USB_Device_ProcessControlPacket+0x1e0>
			#endif
			
			USB_ControlRequest.wLength--;
		}
		
		SendZLP = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
     80e:	80 91 f2 00 	lds	r24, 0x00F2
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	88 30       	cpi	r24, 0x08	; 8
     816:	09 f0       	breq	.+2      	; 0x81a <USB_Device_ProcessControlPacket+0x21e>
     818:	20 e0       	ldi	r18, 0x00	; 0
		Endpoint_ClearIN();
     81a:	80 91 e8 00 	lds	r24, 0x00E8
     81e:	98 2f       	mov	r25, r24
     820:	9e 7f       	andi	r25, 0xFE	; 254
     822:	90 93 e8 00 	sts	0x00E8, r25
     826:	8f 77       	andi	r24, 0x7F	; 127
     828:	80 93 e8 00 	sts	0x00E8, r24
	bool SendZLP;
	
	if (USB_ControlRequest.wLength > DescriptorSize)
	  USB_ControlRequest.wLength = DescriptorSize;
	
	while (USB_ControlRequest.wLength)
     82c:	80 91 7c 02 	lds	r24, 0x027C
     830:	90 91 7d 02 	lds	r25, 0x027D
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	69 f6       	brne	.-102    	; 0x7d2 <USB_Device_ProcessControlPacket+0x1d6>
		
		SendZLP = (Endpoint_BytesInEndpoint() == USB_ControlEndpointSize);
		Endpoint_ClearIN();
	}
	
	if (SendZLP)
     838:	22 23       	and	r18, r18
     83a:	69 f0       	breq	.+26     	; 0x856 <USB_Device_ProcessControlPacket+0x25a>
	{
		while (!(Endpoint_IsINReady()));
     83c:	80 91 e8 00 	lds	r24, 0x00E8
     840:	80 ff       	sbrs	r24, 0
     842:	fc cf       	rjmp	.-8      	; 0x83c <USB_Device_ProcessControlPacket+0x240>
		Endpoint_ClearIN();
     844:	80 91 e8 00 	lds	r24, 0x00E8
     848:	98 2f       	mov	r25, r24
     84a:	9e 7f       	andi	r25, 0xFE	; 254
     84c:	90 93 e8 00 	sts	0x00E8, r25
     850:	8f 77       	andi	r24, 0x7F	; 127
     852:	80 93 e8 00 	sts	0x00E8, r24
	}

	while (!(Endpoint_IsOUTReceived()));
     856:	80 91 e8 00 	lds	r24, 0x00E8
     85a:	82 ff       	sbrs	r24, 2
     85c:	fc cf       	rjmp	.-8      	; 0x856 <USB_Device_ProcessControlPacket+0x25a>
     85e:	19 c0       	rjmp	.+50     	; 0x892 <USB_Device_ProcessControlPacket+0x296>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     860:	80 38       	cpi	r24, 0x80	; 128
     862:	09 f0       	breq	.+2      	; 0x866 <USB_Device_ProcessControlPacket+0x26a>
     864:	4c c0       	rjmp	.+152    	; 0x8fe <USB_Device_ProcessControlPacket+0x302>
	EVENT_USB_ConfigurationChanged();
}

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
     866:	80 91 e8 00 	lds	r24, 0x00E8
     86a:	87 7f       	andi	r24, 0xF7	; 247
     86c:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(USB_ConfigurationNumber);
     870:	80 91 73 02 	lds	r24, 0x0273
     874:	80 93 f1 00 	sts	0x00F1, r24
	
	Endpoint_ClearIN();
     878:	80 91 e8 00 	lds	r24, 0x00E8
     87c:	98 2f       	mov	r25, r24
     87e:	9e 7f       	andi	r25, 0xFE	; 254
     880:	90 93 e8 00 	sts	0x00E8, r25
     884:	8f 77       	andi	r24, 0x7F	; 127
     886:	80 93 e8 00 	sts	0x00E8, r24

	while (!(Endpoint_IsOUTReceived()));
     88a:	80 91 e8 00 	lds	r24, 0x00E8
     88e:	82 ff       	sbrs	r24, 2
     890:	fc cf       	rjmp	.-8      	; 0x88a <USB_Device_ProcessControlPacket+0x28e>
	Endpoint_ClearOUT();
     892:	80 91 e8 00 	lds	r24, 0x00E8
     896:	98 2f       	mov	r25, r24
     898:	9b 7f       	andi	r25, 0xFB	; 251
     89a:	90 93 e8 00 	sts	0x00E8, r25
     89e:	8f 77       	andi	r24, 0x7F	; 127
     8a0:	80 93 e8 00 	sts	0x00E8, r24
     8a4:	2d c0       	rjmp	.+90     	; 0x900 <USB_Device_ProcessControlPacket+0x304>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     8a6:	88 23       	and	r24, r24
     8a8:	51 f5       	brne	.+84     	; 0x8fe <USB_Device_ProcessControlPacket+0x302>
	return;
}

static void USB_Device_SetConfiguration(void)
{
	bool AlreadyConfigured = (USB_ConfigurationNumber != 0);
     8aa:	10 91 73 02 	lds	r17, 0x0273
#if defined(USE_SINGLE_DEVICE_CONFIGURATION)
	if ((uint8_t)USB_ControlRequest.wValue > 1)
#else
	USB_Descriptor_Device_t* DevDescriptorPtr;

	if ((CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr) == NO_DESCRIPTOR) ||
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	ae 01       	movw	r20, r28
     8b6:	4d 5f       	subi	r20, 0xFD	; 253
     8b8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ba:	95 dc       	rcall	.-1750   	; 0x1e6 <CALLBACK_USB_GetDescriptor>
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	01 f1       	breq	.+64     	; 0x900 <USB_Device_ProcessControlPacket+0x304>
	#if defined(USE_RAM_DESCRIPTORS)
	    ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations))
	#elif defined (USE_EEPROM_DESCRIPTORS)
	    ((uint8_t)USB_ControlRequest.wValue > eeprom_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
	#else
	    ((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
     8c0:	eb 81       	ldd	r30, Y+3	; 0x03
     8c2:	fc 81       	ldd	r31, Y+4	; 0x04
     8c4:	71 96       	adiw	r30, 0x11	; 17
     8c6:	e4 91       	lpm	r30, Z+
#if defined(USE_SINGLE_DEVICE_CONFIGURATION)
	if ((uint8_t)USB_ControlRequest.wValue > 1)
#else
	USB_Descriptor_Device_t* DevDescriptorPtr;

	if ((CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr) == NO_DESCRIPTOR) ||
     8c8:	80 91 78 02 	lds	r24, 0x0278
     8cc:	e8 17       	cp	r30, r24
     8ce:	c0 f0       	brcs	.+48     	; 0x900 <USB_Device_ProcessControlPacket+0x304>
#endif
	{
		return;
	}
	
	Endpoint_ClearSETUP();
     8d0:	90 91 e8 00 	lds	r25, 0x00E8
     8d4:	97 7f       	andi	r25, 0xF7	; 247
     8d6:	90 93 e8 00 	sts	0x00E8, r25

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     8da:	80 93 73 02 	sts	0x0273, r24

	Endpoint_ClearIN();
     8de:	90 91 e8 00 	lds	r25, 0x00E8
     8e2:	29 2f       	mov	r18, r25
     8e4:	2e 7f       	andi	r18, 0xFE	; 254
     8e6:	20 93 e8 00 	sts	0x00E8, r18
     8ea:	9f 77       	andi	r25, 0x7F	; 127
     8ec:	90 93 e8 00 	sts	0x00E8, r25

	if (!(AlreadyConfigured) && USB_ConfigurationNumber)
     8f0:	11 23       	and	r17, r17
     8f2:	19 f4       	brne	.+6      	; 0x8fa <USB_Device_ProcessControlPacket+0x2fe>
     8f4:	88 23       	and	r24, r24
     8f6:	09 f0       	breq	.+2      	; 0x8fa <USB_Device_ProcessControlPacket+0x2fe>
	  EVENT_USB_DeviceEnumerationComplete();
     8f8:	a0 d0       	rcall	.+320    	; 0xa3a <USB_Event_Stub>

	EVENT_USB_ConfigurationChanged();
     8fa:	9f d0       	rcall	.+318    	; 0xa3a <USB_Event_Stub>
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <USB_Device_ProcessControlPacket+0x304>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_UnhandledControlPacket();
     8fe:	9d d0       	rcall	.+314    	; 0xa3a <USB_Event_Stub>
	  
	if (Endpoint_IsSETUPReceived())
     900:	80 91 e8 00 	lds	r24, 0x00E8
     904:	83 ff       	sbrs	r24, 3
     906:	10 c0       	rjmp	.+32     	; 0x928 <USB_Device_ProcessControlPacket+0x32c>
	{
		Endpoint_StallTransaction();
     908:	80 91 eb 00 	lds	r24, 0x00EB
     90c:	80 62       	ori	r24, 0x20	; 32
     90e:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ClearSETUP();		
     912:	80 91 e8 00 	lds	r24, 0x00E8
     916:	87 7f       	andi	r24, 0xF7	; 247
     918:	80 93 e8 00 	sts	0x00E8, r24
     91c:	05 c0       	rjmp	.+10     	; 0x928 <USB_Device_ProcessControlPacket+0x32c>
	
	while (USB_ControlRequest.wLength)
	{
		while (!(Endpoint_IsINReady()))
		{
			if (Endpoint_IsOUTReceived())
     91e:	80 91 e8 00 	lds	r24, 0x00E8
     922:	82 ff       	sbrs	r24, 2
     924:	56 cf       	rjmp	.-340    	; 0x7d2 <USB_Device_ProcessControlPacket+0x1d6>
     926:	b5 cf       	rjmp	.-150    	; 0x892 <USB_Device_ProcessControlPacket+0x296>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	1f 91       	pop	r17
     936:	08 95       	ret

00000938 <Endpoint_ConfigureEndpoint_Prv>:

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number, const uint8_t UECFG0XData, const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
     938:	80 93 e9 00 	sts	0x00E9, r24
	Endpoint_EnableEndpoint();
     93c:	eb ee       	ldi	r30, 0xEB	; 235
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	81 60       	ori	r24, 0x01	; 1
     944:	80 83       	st	Z, r24

	UECFG1X = 0;
     946:	ed ee       	ldi	r30, 0xED	; 237
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
     94c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     950:	40 83       	st	Z, r20

	return Endpoint_IsConfigured();
     952:	80 91 ee 00 	lds	r24, 0x00EE
}
     956:	88 1f       	adc	r24, r24
     958:	88 27       	eor	r24, r24
     95a:	88 1f       	adc	r24, r24
     95c:	08 95       	ret

0000095e <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
     95e:	10 92 f4 00 	sts	0x00F4, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     962:	80 e0       	ldi	r24, 0x00	; 0
	{
		Endpoint_SelectEndpoint(EPNum);	
     964:	80 93 e9 00 	sts	0x00E9, r24
		UEIENX = 0;
     968:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX = 0;
     96c:	10 92 e8 00 	sts	0x00E8, r1
		Endpoint_DeallocateMemory();
     970:	90 91 ed 00 	lds	r25, 0x00ED
     974:	9d 7f       	andi	r25, 0xFD	; 253
     976:	90 93 ed 00 	sts	0x00ED, r25
		Endpoint_DisableEndpoint();
     97a:	90 91 eb 00 	lds	r25, 0x00EB
     97e:	9e 7f       	andi	r25, 0xFE	; 254
     980:	90 93 eb 00 	sts	0x00EB, r25

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	85 30       	cpi	r24, 0x05	; 5
     988:	69 f7       	brne	.-38     	; 0x964 <Endpoint_ClearEndpoints+0x6>
		UEIENX = 0;
		UEINTX = 0;
		Endpoint_DeallocateMemory();
		Endpoint_DisableEndpoint();
	}
}
     98a:	08 95       	ret

0000098c <USB_ShutDown>:
	sei();
}

void USB_ShutDown(void)
{
	if (USB_IsConnected)
     98c:	80 91 75 02 	lds	r24, 0x0275
     990:	88 23       	and	r24, r24
     992:	09 f0       	breq	.+2      	; 0x996 <USB_ShutDown+0xa>
	  EVENT_USB_Disconnect();
     994:	52 d0       	rcall	.+164    	; 0xa3a <USB_Event_Stub>

	USB_Detach();
     996:	80 91 e0 00 	lds	r24, 0x00E0
     99a:	81 60       	ori	r24, 0x01	; 1
     99c:	80 93 e0 00 	sts	0x00E0, r24

	USB_INT_DisableAllInterrupts();
     9a0:	4d d0       	rcall	.+154    	; 0xa3c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9a2:	4f d0       	rcall	.+158    	; 0xa42 <USB_INT_ClearAllInterrupts>

	USB_IsConnected   = false;
     9a4:	10 92 75 02 	sts	0x0275, r1
	USB_IsInitialized = false;
     9a8:	10 92 74 02 	sts	0x0274, r1
	#if defined(USB_CAN_BE_HOST)
	USB_HostState = HOST_STATE_Unattached;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	USB_ConfigurationNumber = 0;
     9ac:	10 92 73 02 	sts	0x0273, r1

	#if defined(CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_NONE;
	#endif

	USB_Interface_Disable();
     9b0:	80 91 d8 00 	lds	r24, 0x00D8
     9b4:	8f 77       	andi	r24, 0x7F	; 127
     9b6:	80 93 d8 00 	sts	0x00D8, r24
	USB_PLL_Off();
     9ba:	19 bc       	out	0x29, r1	; 41
	#endif

	#if defined(USB_CAN_BE_BOTH)
	UHWCON &= ~(1 << UIDE);
	#endif
}
     9bc:	08 95       	ret

000009be <USB_ResetInterface>:

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
     9be:	3e d0       	rcall	.+124    	; 0xa3c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9c0:	40 d0       	rcall	.+128    	; 0xa42 <USB_INT_ClearAllInterrupts>

	USB_IsConnected = false;
     9c2:	10 92 75 02 	sts	0x0275, r1
	#if defined(USB_CAN_BE_HOST)
	USB_HostState = HOST_STATE_Unattached;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	USB_ConfigurationNumber  = 0;
     9c6:	10 92 73 02 	sts	0x0273, r1
	USB_IsSuspended          = false;
     9ca:	10 92 7e 02 	sts	0x027E, r1
	USB_RemoteWakeupEnabled  = false;
     9ce:	10 92 72 02 	sts	0x0272, r1
	USB_CurrentlySelfPowered = false;
     9d2:	10 92 71 02 	sts	0x0271, r1
	{
		#if defined(USB_MODIFIED_FULL_CONTROLLER)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
     9d6:	84 e0       	ldi	r24, 0x04	; 4
     9d8:	89 bd       	out	0x29, r24	; 41
     9da:	89 b5       	in	r24, 0x29	; 41
     9dc:	82 60       	ori	r24, 0x02	; 2
     9de:	89 bd       	out	0x29, r24	; 41
		while (!(USB_PLL_IsReady()));
     9e0:	09 b4       	in	r0, 0x29	; 41
     9e2:	00 fe       	sbrs	r0, 0
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <USB_ResetInterface+0x22>
	}
	
	USB_Interface_Reset();
     9e6:	80 91 d8 00 	lds	r24, 0x00D8
     9ea:	98 2f       	mov	r25, r24
     9ec:	9f 77       	andi	r25, 0x7F	; 127
     9ee:	90 93 d8 00 	sts	0x00D8, r25
     9f2:	80 68       	ori	r24, 0x80	; 128
     9f4:	80 93 d8 00 	sts	0x00D8, r24
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
     9f8:	80 91 63 00 	lds	r24, 0x0063
     9fc:	8e 7f       	andi	r24, 0xFE	; 254
     9fe:	80 93 63 00 	sts	0x0063, r24
	
	USB_CLK_Unfreeze();
     a02:	80 91 d8 00 	lds	r24, 0x00D8
     a06:	8f 7d       	andi	r24, 0xDF	; 223
     a08:	80 93 d8 00 	sts	0x00D8, r24
			#endif
		}
	}
	#endif

	USB_Attach();
     a0c:	80 91 e0 00 	lds	r24, 0x00E0
     a10:	8e 7f       	andi	r24, 0xFE	; 254
     a12:	80 93 e0 00 	sts	0x00E0, r24
	
	#if defined(USB_DEVICE_ONLY)	
	USB_INT_Enable(USB_INT_SUSPEND);
     a16:	80 91 e2 00 	lds	r24, 0x00E2
     a1a:	81 60       	ori	r24, 0x01	; 1
     a1c:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
     a20:	80 91 e2 00 	lds	r24, 0x00E2
     a24:	88 60       	ori	r24, 0x08	; 8
     a26:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
     a2a:	08 95       	ret

00000a2c <USB_Init>:
               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
	USB_ShutDown();
     a2c:	af df       	rcall	.-162    	; 0x98c <USB_ShutDown>
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
     a2e:	c7 df       	rcall	.-114    	; 0x9be <USB_ResetInterface>

	#if defined(USB_FULL_CONTROLLER) || defined(USB_MODIFIED_FULL_CONTROLLER)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 74 02 	sts	0x0274, r24

	sei();
     a36:	78 94       	sei
}
     a38:	08 95       	ret

00000a3a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     a3a:	08 95       	ret

00000a3c <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a3c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     a40:	08 95       	ret

00000a42 <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     a42:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     a46:	08 95       	ret

00000a48 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
			USB_INT_Clear(USB_INT_VBUS);
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
     a6a:	80 91 e1 00 	lds	r24, 0x00E1
     a6e:	80 ff       	sbrs	r24, 0
     a70:	24 c0       	rjmp	.+72     	; 0xaba <__vector_11+0x72>
     a72:	80 91 e2 00 	lds	r24, 0x00E2
     a76:	80 ff       	sbrs	r24, 0
     a78:	20 c0       	rjmp	.+64     	; 0xaba <__vector_11+0x72>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
     a7a:	80 91 e1 00 	lds	r24, 0x00E1
     a7e:	8e 7f       	andi	r24, 0xFE	; 254
     a80:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
     a84:	80 91 e2 00 	lds	r24, 0x00E2
     a88:	8e 7f       	andi	r24, 0xFE	; 254
     a8a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     a8e:	80 91 e2 00 	lds	r24, 0x00E2
     a92:	80 61       	ori	r24, 0x10	; 16
     a94:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_CLK_Freeze();
     a98:	80 91 d8 00 	lds	r24, 0x00D8
     a9c:	80 62       	ori	r24, 0x20	; 32
     a9e:	80 93 d8 00 	sts	0x00D8, r24
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();
     aa2:	19 bc       	out	0x29, r1	; 41

		USB_IsSuspended = true;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 7e 02 	sts	0x027E, r24

		EVENT_USB_Suspend();
     aaa:	c7 df       	rcall	.-114    	; 0xa3a <USB_Event_Stub>

		#if defined(USB_LIMITED_CONTROLLER) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		if (USB_IsConnected)
     aac:	80 91 75 02 	lds	r24, 0x0275
     ab0:	88 23       	and	r24, r24
     ab2:	19 f0       	breq	.+6      	; 0xaba <__vector_11+0x72>
		{
			USB_IsConnected = false;
     ab4:	10 92 75 02 	sts	0x0275, r1
			EVENT_USB_Disconnect();
     ab8:	c0 df       	rcall	.-128    	; 0xa3a <USB_Event_Stub>
		}
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
     aba:	80 91 e1 00 	lds	r24, 0x00E1
     abe:	84 ff       	sbrs	r24, 4
     ac0:	2b c0       	rjmp	.+86     	; 0xb18 <__vector_11+0xd0>
     ac2:	80 91 e2 00 	lds	r24, 0x00E2
     ac6:	84 ff       	sbrs	r24, 4
     ac8:	27 c0       	rjmp	.+78     	; 0xb18 <__vector_11+0xd0>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	89 bd       	out	0x29, r24	; 41
     ace:	89 b5       	in	r24, 0x29	; 41
     ad0:	82 60       	ori	r24, 0x02	; 2
     ad2:	89 bd       	out	0x29, r24	; 41
			while (!(USB_PLL_IsReady()));
     ad4:	09 b4       	in	r0, 0x29	; 41
     ad6:	00 fe       	sbrs	r0, 0
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <__vector_11+0x8c>
		}

		USB_CLK_Unfreeze();
     ada:	80 91 d8 00 	lds	r24, 0x00D8
     ade:	8f 7d       	andi	r24, 0xDF	; 223
     ae0:	80 93 d8 00 	sts	0x00D8, r24

		USB_INT_Clear(USB_INT_WAKEUP);
     ae4:	80 91 e1 00 	lds	r24, 0x00E1
     ae8:	8f 7e       	andi	r24, 0xEF	; 239
     aea:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
     aee:	80 91 e2 00 	lds	r24, 0x00E2
     af2:	8f 7e       	andi	r24, 0xEF	; 239
     af4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
     af8:	80 91 e2 00 	lds	r24, 0x00E2
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_LIMITED_CONTROLLER) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		if (!(USB_IsConnected))
     b02:	80 91 75 02 	lds	r24, 0x0275
     b06:	88 23       	and	r24, r24
     b08:	21 f4       	brne	.+8      	; 0xb12 <__vector_11+0xca>
		{
			USB_IsConnected = true;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	80 93 75 02 	sts	0x0275, r24
			EVENT_USB_Connect();
     b10:	94 df       	rcall	.-216    	; 0xa3a <USB_Event_Stub>
		}
		#endif

		USB_IsSuspended = false;
     b12:	10 92 7e 02 	sts	0x027E, r1

		EVENT_USB_WakeUp();
     b16:	91 df       	rcall	.-222    	; 0xa3a <USB_Event_Stub>
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b18:	80 91 e1 00 	lds	r24, 0x00E1
     b1c:	83 ff       	sbrs	r24, 3
     b1e:	20 c0       	rjmp	.+64     	; 0xb60 <__vector_11+0x118>
     b20:	80 91 e2 00 	lds	r24, 0x00E2
     b24:	83 ff       	sbrs	r24, 3
     b26:	1c c0       	rjmp	.+56     	; 0xb60 <__vector_11+0x118>
	{
		USB_INT_Clear(USB_INT_EORSTI);
     b28:	80 91 e1 00 	lds	r24, 0x00E1
     b2c:	87 7f       	andi	r24, 0xF7	; 247
     b2e:	80 93 e1 00 	sts	0x00E1, r24

		USB_ConfigurationNumber = 0;
     b32:	10 92 73 02 	sts	0x0273, r1

		USB_INT_Clear(USB_INT_SUSPEND);
     b36:	80 91 e1 00 	lds	r24, 0x00E1
     b3a:	8e 7f       	andi	r24, 0xFE	; 254
     b3c:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
     b40:	80 91 e2 00 	lds	r24, 0x00E2
     b44:	8e 7f       	andi	r24, 0xFE	; 254
     b46:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     b4a:	80 91 e2 00 	lds	r24, 0x00E2
     b4e:	80 61       	ori	r24, 0x10	; 16
     b50:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
     b54:	04 df       	rcall	.-504    	; 0x95e <Endpoint_ClearEndpoints>

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	42 e0       	ldi	r20, 0x02	; 2
     b5c:	ed de       	rcall	.-550    	; 0x938 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_ENDPOINT_SETUP);
		#endif

		EVENT_USB_Reset();
     b5e:	6d df       	rcall	.-294    	; 0xa3a <USB_Event_Stub>
		EVENT_USB_UIDChange();
		
		USB_ResetInterface();
	}
	#endif
}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <USB_USBTask>:
#if defined(USB_CAN_BE_HOST)
volatile uint8_t   USB_HostState;
#endif

TASK(USB_USBTask)
{
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_IsConnected)
     b86:	80 91 75 02 	lds	r24, 0x0275
     b8a:	88 23       	and	r24, r24
     b8c:	79 f0       	breq	.+30     	; 0xbac <USB_USBTask+0x2a>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
     b8e:	10 91 e9 00 	lds	r17, 0x00E9
     b92:	17 70       	andi	r17, 0x07	; 7
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     b94:	10 92 e9 00 	sts	0x00E9, r1

		if (Endpoint_IsSETUPReceived())
     b98:	80 91 e8 00 	lds	r24, 0x00E8
     b9c:	83 ff       	sbrs	r24, 3
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <USB_USBTask+0x26>
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     ba0:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ba2:	f8 94       	cli
			{
				USB_Device_ProcessControlPacket();
     ba4:	2b dd       	rcall	.-1450   	; 0x5fc <USB_Device_ProcessControlPacket>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ba6:	0f bf       	out	0x3f, r16	; 63
			}
		}
		
		Endpoint_SelectEndpoint(PrevEndpoint);
     ba8:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	08 95       	ret

00000bb2 <_delayFourCycles>:
/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	11 f4       	brne	.+4      	; 0xbba <_delayFourCycles+0x8>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <_delayFourCycles+0x6>
     bb8:	08 95       	ret
    else
        __asm__ __volatile__ (
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <_delayFourCycles+0x8>
     bbe:	08 95       	ret

00000bc0 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     bc0:	45 9a       	sbi	0x08, 5	; 8
    lcd_e_delay();
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <toggle_e+0x4>
    lcd_e_low();
     bc4:	45 98       	cbi	0x08, 5	; 8
}
     bc6:	08 95       	ret

00000bc8 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     bc8:	1f 93       	push	r17
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     bca:	66 23       	and	r22, r22
     bcc:	11 f0       	breq	.+4      	; 0xbd2 <lcd_write+0xa>
       lcd_rs_high();
     bce:	42 9a       	sbi	0x08, 2	; 8
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     bd2:	42 98       	cbi	0x08, 2	; 8
    }
    lcd_rw_low();
     bd4:	44 98       	cbi	0x08, 4	; 8
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     bd6:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     bd8:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     bda:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     bdc:	27 9a       	sbi	0x04, 7	; 4
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     bde:	2f 98       	cbi	0x05, 7	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     be0:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     be2:	2d 98       	cbi	0x05, 5	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     be4:	2c 98       	cbi	0x05, 4	; 5
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     be6:	87 fd       	sbrc	r24, 7
     be8:	2f 9a       	sbi	0x05, 7	; 5
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     bea:	18 2f       	mov	r17, r24
     bec:	86 fd       	sbrc	r24, 6
     bee:	2e 9a       	sbi	0x05, 6	; 5
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     bf0:	15 fd       	sbrc	r17, 5
     bf2:	2d 9a       	sbi	0x05, 5	; 5
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     bf4:	14 fd       	sbrc	r17, 4
     bf6:	2c 9a       	sbi	0x05, 4	; 5
        lcd_e_toggle();
     bf8:	e3 df       	rcall	.-58     	; 0xbc0 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     bfa:	2f 98       	cbi	0x05, 7	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     bfc:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     bfe:	2d 98       	cbi	0x05, 5	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     c00:	2c 98       	cbi	0x05, 4	; 5
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     c02:	13 fd       	sbrc	r17, 3
     c04:	2f 9a       	sbi	0x05, 7	; 5
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     c06:	12 fd       	sbrc	r17, 2
     c08:	2e 9a       	sbi	0x05, 6	; 5
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     c0a:	11 fd       	sbrc	r17, 1
     c0c:	2d 9a       	sbi	0x05, 5	; 5
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     c0e:	10 fd       	sbrc	r17, 0
     c10:	2c 9a       	sbi	0x05, 4	; 5
        lcd_e_toggle();        
     c12:	d6 df       	rcall	.-84     	; 0xbc0 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     c14:	2c 9a       	sbi	0x05, 4	; 5
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     c16:	2d 9a       	sbi	0x05, 5	; 5
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     c18:	2e 9a       	sbi	0x05, 6	; 5
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     c1a:	2f 9a       	sbi	0x05, 7	; 5
    }
}
     c1c:	1f 91       	pop	r17
     c1e:	08 95       	ret

00000c20 <lcd_read.clone.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     c20:	42 98       	cbi	0x08, 2	; 8
    lcd_rw_high();                           /* RW=1  read mode      */
     c22:	44 9a       	sbi	0x08, 4	; 8
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     c24:	24 98       	cbi	0x04, 4	; 4
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     c26:	25 98       	cbi	0x04, 5	; 4
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     c28:	26 98       	cbi	0x04, 6	; 4
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     c2a:	27 98       	cbi	0x04, 7	; 4
                
        /* read high nibble first */
        lcd_e_high();
     c2c:	45 9a       	sbi	0x08, 5	; 8
        lcd_e_delay();        
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <lcd_read.clone.0+0x10>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     c30:	1c 99       	sbic	0x03, 4	; 3
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <lcd_read.clone.0+0x18>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <lcd_read.clone.0+0x1a>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     c38:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     c3a:	1d 99       	sbic	0x03, 5	; 3
     c3c:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     c3e:	1e 99       	sbic	0x03, 6	; 3
     c40:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     c42:	1f 99       	sbic	0x03, 7	; 3
     c44:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     c46:	45 98       	cbi	0x08, 5	; 8

        lcd_e_delay();                       /* Enable 500ns low       */
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <lcd_read.clone.0+0x2a>
    
        /* read low nibble */    
        lcd_e_high();
     c4a:	45 9a       	sbi	0x08, 5	; 8
        lcd_e_delay();
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <lcd_read.clone.0+0x2e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     c4e:	1c 99       	sbic	0x03, 4	; 3
     c50:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     c52:	1d 99       	sbic	0x03, 5	; 3
     c54:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     c56:	1e 99       	sbic	0x03, 6	; 3
     c58:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     c5a:	1f 99       	sbic	0x03, 7	; 3
     c5c:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     c5e:	45 98       	cbi	0x08, 5	; 8
    }
    return data;
}
     c60:	08 95       	ret

00000c62 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     c62:	de df       	rcall	.-68     	; 0xc20 <lcd_read.clone.0>
     c64:	87 fd       	sbrc	r24, 7
     c66:	fd cf       	rjmp	.-6      	; 0xc62 <lcd_waitbusy>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
     c68:	88 e0       	ldi	r24, 0x08	; 8
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	a2 df       	rcall	.-188    	; 0xbb2 <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    
}/* lcd_waitbusy */
     c6e:	d8 cf       	rjmp	.-80     	; 0xc20 <lcd_read.clone.0>

00000c70 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     c70:	1f 93       	push	r17
     c72:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     c74:	f6 df       	rcall	.-20     	; 0xc62 <lcd_waitbusy>
    lcd_write(cmd,0);
     c76:	81 2f       	mov	r24, r17
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	a6 df       	rcall	.-180    	; 0xbc8 <lcd_write>
}
     c7c:	1f 91       	pop	r17
     c7e:	08 95       	ret

00000c80 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     c80:	1f 93       	push	r17
     c82:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     c84:	ee df       	rcall	.-36     	; 0xc62 <lcd_waitbusy>
    lcd_write(data,1);
     c86:	81 2f       	mov	r24, r17
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	9e df       	rcall	.-196    	; 0xbc8 <lcd_write>
}
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     c90:	66 23       	and	r22, r22
     c92:	11 f4       	brne	.+4      	; 0xc98 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     c94:	80 58       	subi	r24, 0x80	; 128
     c96:	09 c0       	rjmp	.+18     	; 0xcaa <lcd_gotoxy+0x1a>
    else if ( y==1)
     c98:	61 30       	cpi	r22, 0x01	; 1
     c9a:	11 f4       	brne	.+4      	; 0xca0 <lcd_gotoxy+0x10>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     c9c:	80 54       	subi	r24, 0x40	; 64
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <lcd_gotoxy+0x1a>
    else if ( y==2)
     ca0:	62 30       	cpi	r22, 0x02	; 2
     ca2:	11 f4       	brne	.+4      	; 0xca8 <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     ca4:	8c 56       	subi	r24, 0x6C	; 108
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <lcd_gotoxy+0x1a>
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     ca8:	8c 52       	subi	r24, 0x2C	; 44
     caa:	e2 cf       	rjmp	.-60     	; 0xc70 <lcd_command>

00000cac <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     cac:	81 e0       	ldi	r24, 0x01	; 1
}
     cae:	e0 cf       	rjmp	.-64     	; 0xc70 <lcd_command>

00000cb0 <lcd_init>:
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     cb0:	3a 9a       	sbi	0x07, 2	; 7
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     cb2:	3c 9a       	sbi	0x07, 4	; 7
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     cb4:	3d 9a       	sbi	0x07, 5	; 7
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     cb6:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     cb8:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     cba:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     cbc:	27 9a       	sbi	0x04, 7	; 4
    }
    delay(16000);        /* wait 16ms or more after power-on       */
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	9a ef       	ldi	r25, 0xFA	; 250
     cc2:	77 df       	rcall	.-274    	; 0xbb2 <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     cc4:	2d 9a       	sbi	0x05, 5	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     cc6:	2c 9a       	sbi	0x05, 4	; 5
    lcd_e_toggle();
     cc8:	7b df       	rcall	.-266    	; 0xbc0 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	9e e4       	ldi	r25, 0x4E	; 78
     cce:	71 df       	rcall	.-286    	; 0xbb2 <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
     cd0:	77 df       	rcall	.-274    	; 0xbc0 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	6d df       	rcall	.-294    	; 0xbb2 <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     cd8:	73 df       	rcall	.-282    	; 0xbc0 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	69 df       	rcall	.-302    	; 0xbb2 <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     ce0:	2c 98       	cbi	0x05, 4	; 5
    lcd_e_toggle();
     ce2:	6e df       	rcall	.-292    	; 0xbc0 <toggle_e>
    delay(64);           /* some displays need this additional delay */
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	91 e0       	ldi	r25, 0x01	; 1
	//lcd_command(LCD_DISP_OFF);              /* display off                  */
    //lcd_clrscr();                           /* display clear                */ 
    //lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    //lcd_command(dispAttr);                  /* display/cursor control       */

}/* lcd_init */
     ce8:	64 cf       	rjmp	.-312    	; 0xbb2 <_delayFourCycles>

00000cea <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
     cea:	90 93 07 02 	sts	0x0207, r25
     cee:	80 93 06 02 	sts	0x0206, r24
}
     cf2:	08 95       	ret

00000cf4 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
     cf4:	1f 93       	push	r17
     cf6:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
     cf8:	8a 30       	cpi	r24, 0x0A	; 10
     cfa:	31 f4       	brne	.+12     	; 0xd08 <rprintfChar+0x14>
		rputchar('\r');
     cfc:	e0 91 06 02 	lds	r30, 0x0206
     d00:	f0 91 07 02 	lds	r31, 0x0207
     d04:	8d e0       	ldi	r24, 0x0D	; 13
     d06:	09 95       	icall
	// send character
	rputchar(c);
     d08:	e0 91 06 02 	lds	r30, 0x0206
     d0c:	f0 91 07 02 	lds	r31, 0x0207
     d10:	81 2f       	mov	r24, r17
     d12:	09 95       	icall
}
     d14:	1f 91       	pop	r17
     d16:	08 95       	ret

00000d18 <atoiRamRom>:
	else
		return FALSE;
}

int atoiRamRom(unsigned char stringInRom, char *str)
{
     d18:	a8 2f       	mov	r26, r24
	int num = 0;;
     d1a:	e6 2f       	mov	r30, r22
     d1c:	f7 2f       	mov	r31, r23
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0

	while(Isdigit(READMEMBYTE(stringInRom,str)))
     d22:	0a c0       	rjmp	.+20     	; 0xd38 <atoiRamRom+0x20>
	{
		num *= 10;
		num += ((READMEMBYTE(stringInRom,str++)) - 0x30);
     d24:	44 91       	lpm	r20, Z+
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <atoiRamRom+0x12>
     d28:	40 81       	ld	r20, Z
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	40 53       	subi	r20, 0x30	; 48
     d2e:	50 40       	sbci	r21, 0x00	; 0
     d30:	9c 01       	movw	r18, r24
     d32:	24 0f       	add	r18, r20
     d34:	35 1f       	adc	r19, r21
     d36:	31 96       	adiw	r30, 0x01	; 1

int atoiRamRom(unsigned char stringInRom, char *str)
{
	int num = 0;;

	while(Isdigit(READMEMBYTE(stringInRom,str)))
     d38:	aa 23       	and	r26, r26
     d3a:	11 f0       	breq	.+4      	; 0xd40 <atoiRamRom+0x28>
     d3c:	84 91       	lpm	r24, Z+
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <atoiRamRom+0x2a>
     d40:	80 81       	ld	r24, Z

#ifdef RPRINTF_COMPLEX

unsigned char Isdigit(char c)
{
	if((c >= 0x30) && (c <= 0x39))
     d42:	80 53       	subi	r24, 0x30	; 48
     d44:	8a 30       	cpi	r24, 0x0A	; 10
     d46:	40 f4       	brcc	.+16     	; 0xd58 <atoiRamRom+0x40>
{
	int num = 0;;

	while(Isdigit(READMEMBYTE(stringInRom,str)))
	{
		num *= 10;
     d48:	c9 01       	movw	r24, r18
     d4a:	6a e0       	ldi	r22, 0x0A	; 10
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	0e 94 34 12 	call	0x2468	; 0x2468 <__mulhi3>
		num += ((READMEMBYTE(stringInRom,str++)) - 0x30);
     d52:	aa 23       	and	r26, r26
     d54:	39 f7       	brne	.-50     	; 0xd24 <atoiRamRom+0xc>
     d56:	e8 cf       	rjmp	.-48     	; 0xd28 <atoiRamRom+0x10>
	}
	return num;
}
     d58:	c9 01       	movw	r24, r18
     d5a:	08 95       	ret

00000d5c <rprintf2RamRom>:
// %c - character
// %s - strings
// and the width,precision,padding modifiers
// **this printf does not support floating point numbers
int rprintf2RamRom(unsigned char stringInRom, const char *sfmt, ...)
{
     d5c:	2f 92       	push	r2
     d5e:	3f 92       	push	r3
     d60:	4f 92       	push	r4
     d62:	5f 92       	push	r5
     d64:	6f 92       	push	r6
     d66:	7f 92       	push	r7
     d68:	8f 92       	push	r8
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <rprintf2RamRom+0x26>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	7f 88       	ldd	r7, Y+23	; 0x17
	register unsigned char pad = ' ';
	int flush_left = 0, f_width = 0, prec = INF, hash = 0, do_long = 0;
	int sign = 0;

	va_list ap;
	va_start(ap, sfmt);
     d88:	6a e1       	ldi	r22, 0x1A	; 26
     d8a:	e6 2e       	mov	r14, r22
     d8c:	f1 2c       	mov	r15, r1
     d8e:	ec 0e       	add	r14, r28
     d90:	fd 1e       	adc	r15, r29

	f = (unsigned char *) sfmt;
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	89 8d       	ldd	r24, Y+25	; 0x19
     d96:	09 2f       	mov	r16, r25
     d98:	18 2f       	mov	r17, r24
								*bp++ = i - 10 + 'a';
						} while ((u /= 16) > 0);
						if (hash)
						{
							*bp++ = 'x';
							*bp++ = '0';
     d9a:	50 e3       	ldi	r21, 0x30	; 48
     d9c:	65 2e       	mov	r6, r21
     d9e:	67 01       	movw	r12, r14
	va_list ap;
	va_start(ap, sfmt);

	f = (unsigned char *) sfmt;

	for (; READMEMBYTE(stringInRom,f); f++)
     da0:	5e c2       	rjmp	.+1212   	; 0x125e <rprintf2RamRom+0x502>
	{
		if (READMEMBYTE(stringInRom,f) != '%')
     da2:	d8 01       	movw	r26, r16
     da4:	8c 91       	ld	r24, X
     da6:	85 32       	cpi	r24, 0x25	; 37
     da8:	09 f0       	breq	.+2      	; 0xdac <rprintf2RamRom+0x50>
     daa:	56 c2       	rjmp	.+1196   	; 0x1258 <rprintf2RamRom+0x4fc>
			// then just output the char
			rprintfChar(READMEMBYTE(stringInRom,f));
		}
		else 
		{
			f++;						// if we have a "%" then skip it
     dac:	0f 5f       	subi	r16, 0xFF	; 255
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
			if (READMEMBYTE(stringInRom,f) == '-')
     db0:	77 20       	and	r7, r7
     db2:	19 f0       	breq	.+6      	; 0xdba <rprintf2RamRom+0x5e>
     db4:	f8 01       	movw	r30, r16
     db6:	84 91       	lpm	r24, Z+
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <rprintf2RamRom+0x62>
     dba:	d8 01       	movw	r26, r16
     dbc:	8c 91       	ld	r24, X
     dbe:	8d 32       	cpi	r24, 0x2D	; 45
     dc0:	31 f4       	brne	.+12     	; 0xdce <rprintf2RamRom+0x72>
			{
				flush_left = 1;	// minus: flush left
				f++;
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
		else 
		{
			f++;						// if we have a "%" then skip it
			if (READMEMBYTE(stringInRom,f) == '-')
			{
				flush_left = 1;	// minus: flush left
     dc6:	41 e0       	ldi	r20, 0x01	; 1
     dc8:	24 2e       	mov	r2, r20
     dca:	31 2c       	mov	r3, r1
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <rprintf2RamRom+0x76>
			rprintfChar(READMEMBYTE(stringInRom,f));
		}
		else 
		{
			f++;						// if we have a "%" then skip it
			if (READMEMBYTE(stringInRom,f) == '-')
     dce:	22 24       	eor	r2, r2
     dd0:	33 24       	eor	r3, r3
			{
				flush_left = 1;	// minus: flush left
				f++;
			}
            if (READMEMBYTE(stringInRom,f) == '0'
     dd2:	77 20       	and	r7, r7
     dd4:	29 f0       	breq	.+10     	; 0xde0 <rprintf2RamRom+0x84>
     dd6:	f8 01       	movw	r30, r16
     dd8:	84 91       	lpm	r24, Z+
     dda:	80 33       	cpi	r24, 0x30	; 48
     ddc:	31 f4       	brne	.+12     	; 0xdea <rprintf2RamRom+0x8e>
     dde:	0c c0       	rjmp	.+24     	; 0xdf8 <rprintf2RamRom+0x9c>
     de0:	d8 01       	movw	r26, r16
     de2:	8c 91       	ld	r24, X
     de4:	80 33       	cpi	r24, 0x30	; 48
     de6:	31 f4       	brne	.+12     	; 0xdf4 <rprintf2RamRom+0x98>
     de8:	07 c0       	rjmp	.+14     	; 0xdf8 <rprintf2RamRom+0x9c>
				 || READMEMBYTE(stringInRom,f) == '.')
     dea:	8e 32       	cpi	r24, 0x2E	; 46
     dec:	29 f0       	breq	.+10     	; 0xdf8 <rprintf2RamRom+0x9c>
     dee:	30 e2       	ldi	r19, 0x20	; 32
     df0:	43 2e       	mov	r4, r19
     df2:	08 c0       	rjmp	.+16     	; 0xe04 <rprintf2RamRom+0xa8>
     df4:	8e 32       	cpi	r24, 0x2E	; 46
     df6:	59 f4       	brne	.+22     	; 0xe0e <rprintf2RamRom+0xb2>
				{
					// padding with 0 rather than blank
					pad = '0';
					f++;
     df8:	0f 5f       	subi	r16, 0xFF	; 255
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
            }
            if (READMEMBYTE(stringInRom,f) == '*')
     dfc:	77 20       	and	r7, r7
     dfe:	51 f0       	breq	.+20     	; 0xe14 <rprintf2RamRom+0xb8>
			}
            if (READMEMBYTE(stringInRom,f) == '0'
				 || READMEMBYTE(stringInRom,f) == '.')
				{
					// padding with 0 rather than blank
					pad = '0';
     e00:	20 e3       	ldi	r18, 0x30	; 48
     e02:	42 2e       	mov	r4, r18
					f++;
            }
            if (READMEMBYTE(stringInRom,f) == '*')
     e04:	f8 01       	movw	r30, r16
     e06:	84 91       	lpm	r24, Z+
     e08:	8a 32       	cpi	r24, 0x2A	; 42
     e0a:	b9 f4       	brne	.+46     	; 0xe3a <rprintf2RamRom+0xde>
     e0c:	09 c0       	rjmp	.+18     	; 0xe20 <rprintf2RamRom+0xc4>
			{
				flush_left = 1;	// minus: flush left
				f++;
			}
            if (READMEMBYTE(stringInRom,f) == '0'
				 || READMEMBYTE(stringInRom,f) == '.')
     e0e:	90 e2       	ldi	r25, 0x20	; 32
     e10:	49 2e       	mov	r4, r25
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <rprintf2RamRom+0xbc>
				{
					// padding with 0 rather than blank
					pad = '0';
     e14:	80 e3       	ldi	r24, 0x30	; 48
     e16:	48 2e       	mov	r4, r24
					f++;
            }
            if (READMEMBYTE(stringInRom,f) == '*')
     e18:	d8 01       	movw	r26, r16
     e1a:	8c 91       	ld	r24, X
     e1c:	8a 32       	cpi	r24, 0x2A	; 42
     e1e:	79 f4       	brne	.+30     	; 0xe3e <rprintf2RamRom+0xe2>
				{	// field width
					f_width = va_arg(ap, int);
     e20:	f6 01       	movw	r30, r12
     e22:	01 90       	ld	r0, Z+
     e24:	f0 81       	ld	r31, Z
     e26:	e0 2d       	mov	r30, r0
     e28:	fa 83       	std	Y+2, r31	; 0x02
     e2a:	e9 83       	std	Y+1, r30	; 0x01
					f++;
     e2c:	0f 5f       	subi	r16, 0xFF	; 255
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
					pad = '0';
					f++;
            }
            if (READMEMBYTE(stringInRom,f) == '*')
				{	// field width
					f_width = va_arg(ap, int);
     e30:	22 e0       	ldi	r18, 0x02	; 2
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	c2 0e       	add	r12, r18
     e36:	d3 1e       	adc	r13, r19
     e38:	1b c0       	rjmp	.+54     	; 0xe70 <rprintf2RamRom+0x114>
					f++;
            }
            else if (Isdigit(READMEMBYTE(stringInRom,f)))
     e3a:	77 20       	and	r7, r7
     e3c:	11 f4       	brne	.+4      	; 0xe42 <rprintf2RamRom+0xe6>
     e3e:	d8 01       	movw	r26, r16
     e40:	8c 91       	ld	r24, X

#ifdef RPRINTF_COMPLEX

unsigned char Isdigit(char c)
{
	if((c >= 0x30) && (c <= 0x39))
     e42:	80 53       	subi	r24, 0x30	; 48
     e44:	8a 30       	cpi	r24, 0x0A	; 10
     e46:	80 f4       	brcc	.+32     	; 0xe68 <rprintf2RamRom+0x10c>
					f_width = va_arg(ap, int);
					f++;
            }
            else if (Isdigit(READMEMBYTE(stringInRom,f)))
				{
					f_width = atoiRamRom(stringInRom, (char *) f);
     e48:	87 2d       	mov	r24, r7
     e4a:	b8 01       	movw	r22, r16
     e4c:	65 df       	rcall	.-310    	; 0xd18 <atoiRamRom>
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	f8 01       	movw	r30, r16
					while (Isdigit(READMEMBYTE(stringInRom,f)))
     e54:	77 20       	and	r7, r7
     e56:	11 f0       	breq	.+4      	; 0xe5c <rprintf2RamRom+0x100>
     e58:	84 91       	lpm	r24, Z+
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <rprintf2RamRom+0x102>
     e5c:	80 81       	ld	r24, Z

#ifdef RPRINTF_COMPLEX

unsigned char Isdigit(char c)
{
	if((c >= 0x30) && (c <= 0x39))
     e5e:	80 53       	subi	r24, 0x30	; 48
     e60:	8a 30       	cpi	r24, 0x0A	; 10
     e62:	28 f4       	brcc	.+10     	; 0xe6e <rprintf2RamRom+0x112>
            }
            else if (Isdigit(READMEMBYTE(stringInRom,f)))
				{
					f_width = atoiRamRom(stringInRom, (char *) f);
					while (Isdigit(READMEMBYTE(stringInRom,f)))
						f++;        // skip the digits
     e64:	31 96       	adiw	r30, 0x01	; 1
     e66:	f6 cf       	rjmp	.-20     	; 0xe54 <rprintf2RamRom+0xf8>

#ifdef RPRINTF_COMPLEX

unsigned char Isdigit(char c)
{
	if((c >= 0x30) && (c <= 0x39))
     e68:	1a 82       	std	Y+2, r1	; 0x02
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <rprintf2RamRom+0x114>
     e6e:	8f 01       	movw	r16, r30
				{
					f_width = atoiRamRom(stringInRom, (char *) f);
					while (Isdigit(READMEMBYTE(stringInRom,f)))
						f++;        // skip the digits
            }
            if (READMEMBYTE(stringInRom,f) == '.')
     e70:	77 20       	and	r7, r7
     e72:	19 f0       	breq	.+6      	; 0xe7a <rprintf2RamRom+0x11e>
     e74:	f8 01       	movw	r30, r16
     e76:	84 91       	lpm	r24, Z+
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <rprintf2RamRom+0x122>
     e7a:	d8 01       	movw	r26, r16
     e7c:	8c 91       	ld	r24, X
     e7e:	8e 32       	cpi	r24, 0x2E	; 46
     e80:	59 f5       	brne	.+86     	; 0xed8 <rprintf2RamRom+0x17c>
				{	// precision
					f++;
     e82:	0f 5f       	subi	r16, 0xFF	; 255
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
					if (READMEMBYTE(stringInRom,f) == '*')
     e86:	77 20       	and	r7, r7
     e88:	29 f0       	breq	.+10     	; 0xe94 <rprintf2RamRom+0x138>
     e8a:	f8 01       	movw	r30, r16
     e8c:	84 91       	lpm	r24, Z+
     e8e:	8a 32       	cpi	r24, 0x2A	; 42
     e90:	89 f4       	brne	.+34     	; 0xeb4 <rprintf2RamRom+0x158>
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <rprintf2RamRom+0x140>
     e94:	d8 01       	movw	r26, r16
     e96:	8c 91       	ld	r24, X
     e98:	8a 32       	cpi	r24, 0x2A	; 42
     e9a:	51 f4       	brne	.+20     	; 0xeb0 <rprintf2RamRom+0x154>
					{
						prec = va_arg(ap, int);
     e9c:	f6 01       	movw	r30, r12
     e9e:	80 80       	ld	r8, Z
     ea0:	91 80       	ldd	r9, Z+1	; 0x01
						f++;
     ea2:	0f 5f       	subi	r16, 0xFF	; 255
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
            if (READMEMBYTE(stringInRom,f) == '.')
				{	// precision
					f++;
					if (READMEMBYTE(stringInRom,f) == '*')
					{
						prec = va_arg(ap, int);
     ea6:	22 e0       	ldi	r18, 0x02	; 2
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	c2 0e       	add	r12, r18
     eac:	d3 1e       	adc	r13, r19
     eae:	1a c0       	rjmp	.+52     	; 0xee4 <rprintf2RamRom+0x188>
						f++;
					}
					else if (Isdigit(READMEMBYTE(stringInRom,f)))
     eb0:	d8 01       	movw	r26, r16
     eb2:	8c 91       	ld	r24, X

#ifdef RPRINTF_COMPLEX

unsigned char Isdigit(char c)
{
	if((c >= 0x30) && (c <= 0x39))
     eb4:	80 53       	subi	r24, 0x30	; 48
     eb6:	8a 30       	cpi	r24, 0x0A	; 10
     eb8:	78 f4       	brcc	.+30     	; 0xed8 <rprintf2RamRom+0x17c>
						prec = va_arg(ap, int);
						f++;
					}
					else if (Isdigit(READMEMBYTE(stringInRom,f)))
					{
						prec = atoiRamRom(stringInRom, (char *) f);
     eba:	87 2d       	mov	r24, r7
     ebc:	b8 01       	movw	r22, r16
     ebe:	2c df       	rcall	.-424    	; 0xd18 <atoiRamRom>
     ec0:	4c 01       	movw	r8, r24
     ec2:	f8 01       	movw	r30, r16
						while (Isdigit(READMEMBYTE(stringInRom,f)))
     ec4:	77 20       	and	r7, r7
     ec6:	11 f0       	breq	.+4      	; 0xecc <rprintf2RamRom+0x170>
     ec8:	84 91       	lpm	r24, Z+
     eca:	01 c0       	rjmp	.+2      	; 0xece <rprintf2RamRom+0x172>
     ecc:	80 81       	ld	r24, Z

#ifdef RPRINTF_COMPLEX

unsigned char Isdigit(char c)
{
	if((c >= 0x30) && (c <= 0x39))
     ece:	80 53       	subi	r24, 0x30	; 48
     ed0:	8a 30       	cpi	r24, 0x0A	; 10
     ed2:	38 f4       	brcc	.+14     	; 0xee2 <rprintf2RamRom+0x186>
					}
					else if (Isdigit(READMEMBYTE(stringInRom,f)))
					{
						prec = atoiRamRom(stringInRom, (char *) f);
						while (Isdigit(READMEMBYTE(stringInRom,f)))
							f++;    // skip the digits
     ed4:	31 96       	adiw	r30, 0x01	; 1
     ed6:	f6 cf       	rjmp	.-20     	; 0xec4 <rprintf2RamRom+0x168>

#ifdef RPRINTF_COMPLEX

unsigned char Isdigit(char c)
{
	if((c >= 0x30) && (c <= 0x39))
     ed8:	be ef       	ldi	r27, 0xFE	; 254
     eda:	8b 2e       	mov	r8, r27
     edc:	bf e7       	ldi	r27, 0x7F	; 127
     ede:	9b 2e       	mov	r9, r27
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <rprintf2RamRom+0x188>
     ee2:	8f 01       	movw	r16, r30
						prec = atoiRamRom(stringInRom, (char *) f);
						while (Isdigit(READMEMBYTE(stringInRom,f)))
							f++;    // skip the digits
					}
				}
            if (READMEMBYTE(stringInRom,f) == '#')
     ee4:	77 20       	and	r7, r7
     ee6:	19 f0       	breq	.+6      	; 0xeee <rprintf2RamRom+0x192>
     ee8:	f8 01       	movw	r30, r16
     eea:	84 91       	lpm	r24, Z+
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <rprintf2RamRom+0x196>
     eee:	d8 01       	movw	r26, r16
     ef0:	8c 91       	ld	r24, X
     ef2:	83 32       	cpi	r24, 0x23	; 35
     ef4:	29 f4       	brne	.+10     	; 0xf00 <rprintf2RamRom+0x1a4>
				{	// alternate form
					hash = 1;
					f++;
     ef6:	0f 5f       	subi	r16, 0xFF	; 255
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
							f++;    // skip the digits
					}
				}
            if (READMEMBYTE(stringInRom,f) == '#')
				{	// alternate form
					hash = 1;
     efa:	a1 e0       	ldi	r26, 0x01	; 1
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <rprintf2RamRom+0x1a8>
						prec = atoiRamRom(stringInRom, (char *) f);
						while (Isdigit(READMEMBYTE(stringInRom,f)))
							f++;    // skip the digits
					}
				}
            if (READMEMBYTE(stringInRom,f) == '#')
     f00:	a0 e0       	ldi	r26, 0x00	; 0
     f02:	b0 e0       	ldi	r27, 0x00	; 0
				{	// alternate form
					hash = 1;
					f++;
            }
            if (READMEMBYTE(stringInRom,f) == 'l')
     f04:	77 20       	and	r7, r7
     f06:	19 f0       	breq	.+6      	; 0xf0e <rprintf2RamRom+0x1b2>
     f08:	f8 01       	movw	r30, r16
     f0a:	84 91       	lpm	r24, Z+
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <rprintf2RamRom+0x1b6>
     f0e:	f8 01       	movw	r30, r16
     f10:	80 81       	ld	r24, Z
     f12:	8c 36       	cpi	r24, 0x6C	; 108
     f14:	29 f4       	brne	.+10     	; 0xf20 <rprintf2RamRom+0x1c4>
				{	// long format
					do_long = 1;
					f++;
     f16:	0f 5f       	subi	r16, 0xFF	; 255
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
					hash = 1;
					f++;
            }
            if (READMEMBYTE(stringInRom,f) == 'l')
				{	// long format
					do_long = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <rprintf2RamRom+0x1c8>
            if (READMEMBYTE(stringInRom,f) == '#')
				{	// alternate form
					hash = 1;
					f++;
            }
            if (READMEMBYTE(stringInRom,f) == 'l')
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
				{	// long format
					do_long = 1;
					f++;
            }

				fmt = READMEMBYTE(stringInRom,f);
     f24:	77 20       	and	r7, r7
     f26:	19 f0       	breq	.+6      	; 0xf2e <rprintf2RamRom+0x1d2>
     f28:	f8 01       	movw	r30, r16
     f2a:	24 91       	lpm	r18, Z+
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <rprintf2RamRom+0x1d6>
     f2e:	f8 01       	movw	r30, r16
     f30:	20 81       	ld	r18, Z
     f32:	30 e0       	ldi	r19, 0x00	; 0
				bp = buf;
				switch (fmt) {		// do the formatting
     f34:	2f 36       	cpi	r18, 0x6F	; 111
     f36:	31 05       	cpc	r19, r1
     f38:	09 f4       	brne	.+2      	; 0xf3c <rprintf2RamRom+0x1e0>
     f3a:	90 c0       	rjmp	.+288    	; 0x105c <rprintf2RamRom+0x300>
     f3c:	20 37       	cpi	r18, 0x70	; 112
     f3e:	31 05       	cpc	r19, r1
     f40:	64 f4       	brge	.+24     	; 0xf5a <rprintf2RamRom+0x1fe>
     f42:	23 36       	cpi	r18, 0x63	; 99
     f44:	31 05       	cpc	r19, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <rprintf2RamRom+0x1ee>
     f48:	37 c1       	rjmp	.+622    	; 0x11b8 <rprintf2RamRom+0x45c>
     f4a:	24 36       	cpi	r18, 0x64	; 100
     f4c:	31 05       	cpc	r19, r1
     f4e:	91 f0       	breq	.+36     	; 0xf74 <rprintf2RamRom+0x218>
     f50:	25 32       	cpi	r18, 0x25	; 37
     f52:	31 05       	cpc	r19, r1
     f54:	09 f0       	breq	.+2      	; 0xf58 <rprintf2RamRom+0x1fc>
     f56:	81 c1       	rjmp	.+770    	; 0x125a <rprintf2RamRom+0x4fe>
     f58:	7e c1       	rjmp	.+764    	; 0x1256 <rprintf2RamRom+0x4fa>
     f5a:	25 37       	cpi	r18, 0x75	; 117
     f5c:	31 05       	cpc	r19, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <rprintf2RamRom+0x206>
     f60:	7d c0       	rjmp	.+250    	; 0x105c <rprintf2RamRom+0x300>
     f62:	28 37       	cpi	r18, 0x78	; 120
     f64:	31 05       	cpc	r19, r1
     f66:	09 f4       	brne	.+2      	; 0xf6a <rprintf2RamRom+0x20e>
     f68:	79 c0       	rjmp	.+242    	; 0x105c <rprintf2RamRom+0x300>
     f6a:	23 37       	cpi	r18, 0x73	; 115
     f6c:	31 05       	cpc	r19, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <rprintf2RamRom+0x216>
     f70:	74 c1       	rjmp	.+744    	; 0x125a <rprintf2RamRom+0x4fe>
     f72:	2c c1       	rjmp	.+600    	; 0x11cc <rprintf2RamRom+0x470>
				case 'd':			// 'd' signed decimal
					if (do_long)
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	49 f0       	breq	.+18     	; 0xf8a <rprintf2RamRom+0x22e>
						l = va_arg(ap, long);
     f78:	d6 01       	movw	r26, r12
     f7a:	6d 91       	ld	r22, X+
     f7c:	7d 91       	ld	r23, X+
     f7e:	8d 91       	ld	r24, X+
     f80:	9c 91       	ld	r25, X
     f82:	13 97       	sbiw	r26, 0x03	; 3
     f84:	e4 e0       	ldi	r30, 0x04	; 4
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <rprintf2RamRom+0x242>
					else
						l = (long) (va_arg(ap, int));
     f8a:	d6 01       	movw	r26, r12
     f8c:	6d 91       	ld	r22, X+
     f8e:	7c 91       	ld	r23, X
     f90:	11 97       	sbiw	r26, 0x01	; 1
     f92:	88 27       	eor	r24, r24
     f94:	77 fd       	sbrc	r23, 7
     f96:	80 95       	com	r24
     f98:	98 2f       	mov	r25, r24
     f9a:	e2 e0       	ldi	r30, 0x02	; 2
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	ce 0e       	add	r12, r30
     fa0:	df 1e       	adc	r13, r31
					if (l < 0)
     fa2:	97 ff       	sbrs	r25, 7
     fa4:	0b c0       	rjmp	.+22     	; 0xfbc <rprintf2RamRom+0x260>
					{
						sign = 1;
						l = -l;
     fa6:	90 95       	com	r25
     fa8:	80 95       	com	r24
     faa:	70 95       	com	r23
     fac:	61 95       	neg	r22
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	8f 4f       	sbci	r24, 0xFF	; 255
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
						l = va_arg(ap, long);
					else
						l = (long) (va_arg(ap, int));
					if (l < 0)
					{
						sign = 1;
     fb4:	a1 e0       	ldi	r26, 0x01	; 1
     fb6:	8a 2e       	mov	r8, r26
     fb8:	91 2c       	mov	r9, r1
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <rprintf2RamRom+0x264>
				case 'd':			// 'd' signed decimal
					if (do_long)
						l = va_arg(ap, long);
					else
						l = (long) (va_arg(ap, int));
					if (l < 0)
     fbc:	88 24       	eor	r8, r8
     fbe:	99 24       	eor	r9, r9
					{
						sign = 1;
						l = -l;
     fc0:	f6 e8       	ldi	r31, 0x86	; 134
     fc2:	af 2e       	mov	r10, r31
     fc4:	f1 e0       	ldi	r31, 0x01	; 1
     fc6:	bf 2e       	mov	r11, r31
					}
					do	{
						*bp++ = l % 10 + '0';
     fc8:	2a e0       	ldi	r18, 0x0A	; 10
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	0e 94 95 12 	call	0x252a	; 0x252a <__divmodsi4>
     fd4:	60 5d       	subi	r22, 0xD0	; 208
     fd6:	f5 01       	movw	r30, r10
     fd8:	61 93       	st	Z+, r22
     fda:	5f 01       	movw	r10, r30
					} while ((l /= 10) > 0);
     fdc:	b9 01       	movw	r22, r18
     fde:	ca 01       	movw	r24, r20
     fe0:	16 16       	cp	r1, r22
     fe2:	17 06       	cpc	r1, r23
     fe4:	18 06       	cpc	r1, r24
     fe6:	19 06       	cpc	r1, r25
     fe8:	7c f3       	brlt	.-34     	; 0xfc8 <rprintf2RamRom+0x26c>
     fea:	7f 01       	movw	r14, r30
					if (sign)
     fec:	81 14       	cp	r8, r1
     fee:	91 04       	cpc	r9, r1
     ff0:	21 f0       	breq	.+8      	; 0xffa <rprintf2RamRom+0x29e>
						*bp++ = '-';
     ff2:	df 01       	movw	r26, r30
     ff4:	ed e2       	ldi	r30, 0x2D	; 45
     ff6:	ed 93       	st	X+, r30
     ff8:	7d 01       	movw	r14, r26
					f_width = f_width - (bp - buf);
     ffa:	a9 80       	ldd	r10, Y+1	; 0x01
     ffc:	ba 80       	ldd	r11, Y+2	; 0x02
     ffe:	26 e8       	ldi	r18, 0x86	; 134
    1000:	31 e0       	ldi	r19, 0x01	; 1
    1002:	a2 0e       	add	r10, r18
    1004:	b3 1e       	adc	r11, r19
    1006:	ae 18       	sub	r10, r14
    1008:	bf 08       	sbc	r11, r15
					if (!flush_left)
    100a:	21 14       	cp	r2, r1
    100c:	31 04       	cpc	r3, r1
    100e:	81 f4       	brne	.+32     	; 0x1030 <rprintf2RamRom+0x2d4>
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <rprintf2RamRom+0x2ba>
						while (f_width-- > 0)
							rprintfChar(pad);
    1012:	84 2d       	mov	r24, r4
    1014:	6f de       	rcall	.-802    	; 0xcf4 <rprintfChar>
					} while ((l /= 10) > 0);
					if (sign)
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
    1016:	08 94       	sec
    1018:	a1 08       	sbc	r10, r1
    101a:	b1 08       	sbc	r11, r1
// %x - hex
// %c - character
// %s - strings
// and the width,precision,padding modifiers
// **this printf does not support floating point numbers
int rprintf2RamRom(unsigned char stringInRom, const char *sfmt, ...)
    101c:	95 01       	movw	r18, r10
    101e:	2f 5f       	subi	r18, 0xFF	; 255
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
					} while ((l /= 10) > 0);
					if (sign)
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
    1022:	12 16       	cp	r1, r18
    1024:	13 06       	cpc	r1, r19
    1026:	ac f3       	brlt	.-22     	; 0x1012 <rprintf2RamRom+0x2b6>
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <rprintf2RamRom+0x2d4>
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
    102a:	d7 01       	movw	r26, r14
    102c:	8c 91       	ld	r24, X
    102e:	62 de       	rcall	.-828    	; 0xcf4 <rprintfChar>
    1030:	08 94       	sec
    1032:	e1 08       	sbc	r14, r1
    1034:	f1 08       	sbc	r15, r1
						*bp++ = '-';
					f_width = f_width - (bp - buf);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
    1036:	b6 e8       	ldi	r27, 0x86	; 134
    1038:	eb 16       	cp	r14, r27
    103a:	b1 e0       	ldi	r27, 0x01	; 1
    103c:	fb 06       	cpc	r15, r27
    103e:	a8 f7       	brcc	.-22     	; 0x102a <rprintf2RamRom+0x2ce>
						rprintfChar(*bp);
					if (flush_left)
    1040:	21 14       	cp	r2, r1
    1042:	31 04       	cpc	r3, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <rprintf2RamRom+0x2ec>
    1046:	09 c1       	rjmp	.+530    	; 0x125a <rprintf2RamRom+0x4fe>
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <rprintf2RamRom+0x2f8>
						while (f_width-- > 0)
							rprintfChar(' ');
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	53 de       	rcall	.-858    	; 0xcf4 <rprintfChar>
    104e:	08 94       	sec
    1050:	a1 08       	sbc	r10, r1
    1052:	b1 08       	sbc	r11, r1
						while (f_width-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar(*bp);
					if (flush_left)
						while (f_width-- > 0)
    1054:	1a 14       	cp	r1, r10
    1056:	1b 04       	cpc	r1, r11
    1058:	c4 f3       	brlt	.-16     	; 0x104a <rprintf2RamRom+0x2ee>
    105a:	ff c0       	rjmp	.+510    	; 0x125a <rprintf2RamRom+0x4fe>
							rprintfChar(' ');
					break;
            case 'o':			// 'o' octal number
            case 'x':			// 'x' hex number
            case 'u':			// 'u' unsigned decimal
					if (do_long)
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	41 f0       	breq	.+16     	; 0x1070 <rprintf2RamRom+0x314>
						u = va_arg(ap, unsigned long);
    1060:	f6 01       	movw	r30, r12
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	44 e0       	ldi	r20, 0x04	; 4
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	07 c0       	rjmp	.+14     	; 0x107e <rprintf2RamRom+0x322>
					else
						u = (unsigned long) (va_arg(ap, unsigned));
    1070:	f6 01       	movw	r30, r12
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	42 e0       	ldi	r20, 0x02	; 2
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	c4 0e       	add	r12, r20
    1080:	d5 1e       	adc	r13, r21
					if (fmt == 'u')
    1082:	25 37       	cpi	r18, 0x75	; 117
    1084:	31 05       	cpc	r19, r1
    1086:	b9 f4       	brne	.+46     	; 0x10b6 <rprintf2RamRom+0x35a>
    1088:	e6 e8       	ldi	r30, 0x86	; 134
    108a:	ae 2e       	mov	r10, r30
    108c:	e1 e0       	ldi	r30, 0x01	; 1
    108e:	be 2e       	mov	r11, r30
					{	// unsigned decimal
						do {
							*bp++ = u % 10 + '0';
    1090:	2a e0       	ldi	r18, 0x0A	; 10
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	0e 94 73 12 	call	0x24e6	; 0x24e6 <__udivmodsi4>
    109c:	60 5d       	subi	r22, 0xD0	; 208
    109e:	d5 01       	movw	r26, r10
    10a0:	6d 93       	st	X+, r22
    10a2:	5d 01       	movw	r10, r26
    10a4:	7d 01       	movw	r14, r26
						} while ((u /= 10) > 0);
    10a6:	b9 01       	movw	r22, r18
    10a8:	ca 01       	movw	r24, r20
    10aa:	61 15       	cp	r22, r1
    10ac:	71 05       	cpc	r23, r1
    10ae:	81 05       	cpc	r24, r1
    10b0:	91 05       	cpc	r25, r1
    10b2:	71 f7       	brne	.-36     	; 0x1090 <rprintf2RamRom+0x334>
    10b4:	50 c0       	rjmp	.+160    	; 0x1156 <rprintf2RamRom+0x3fa>
					}
					else if (fmt == 'o')
    10b6:	2f 36       	cpi	r18, 0x6F	; 111
    10b8:	31 05       	cpc	r19, r1
    10ba:	d1 f4       	brne	.+52     	; 0x10f0 <rprintf2RamRom+0x394>
    10bc:	26 e8       	ldi	r18, 0x86	; 134
    10be:	31 e0       	ldi	r19, 0x01	; 1
					{  // octal
						do {
							*bp++ = u % 8 + '0';
    10c0:	46 2f       	mov	r20, r22
    10c2:	47 70       	andi	r20, 0x07	; 7
    10c4:	40 5d       	subi	r20, 0xD0	; 208
    10c6:	f9 01       	movw	r30, r18
    10c8:	41 93       	st	Z+, r20
    10ca:	9f 01       	movw	r18, r30
						} while ((u /= 8) > 0);
    10cc:	53 e0       	ldi	r21, 0x03	; 3
    10ce:	96 95       	lsr	r25
    10d0:	87 95       	ror	r24
    10d2:	77 95       	ror	r23
    10d4:	67 95       	ror	r22
    10d6:	5a 95       	dec	r21
    10d8:	d1 f7       	brne	.-12     	; 0x10ce <rprintf2RamRom+0x372>
    10da:	61 15       	cp	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	81 05       	cpc	r24, r1
    10e0:	91 05       	cpc	r25, r1
    10e2:	71 f7       	brne	.-36     	; 0x10c0 <rprintf2RamRom+0x364>
    10e4:	7f 01       	movw	r14, r30
						if (hash)
    10e6:	10 97       	sbiw	r26, 0x00	; 0
    10e8:	b1 f1       	breq	.+108    	; 0x1156 <rprintf2RamRom+0x3fa>
							*bp++ = '0';
    10ea:	61 92       	st	Z+, r6
    10ec:	7f 01       	movw	r14, r30
    10ee:	33 c0       	rjmp	.+102    	; 0x1156 <rprintf2RamRom+0x3fa>
					}
					else if (fmt == 'x')
    10f0:	28 37       	cpi	r18, 0x78	; 120
    10f2:	31 05       	cpc	r19, r1
    10f4:	61 f5       	brne	.+88     	; 0x114e <rprintf2RamRom+0x3f2>
    10f6:	27 e8       	ldi	r18, 0x87	; 135
    10f8:	31 e0       	ldi	r19, 0x01	; 1
    10fa:	f9 01       	movw	r30, r18
    10fc:	31 97       	sbiw	r30, 0x01	; 1
					{	// hex
						do {
							i = u % 16;
    10fe:	ab 01       	movw	r20, r22
    1100:	4f 70       	andi	r20, 0x0F	; 15
    1102:	50 70       	andi	r21, 0x00	; 0
							if (i < 10)
    1104:	4a 30       	cpi	r20, 0x0A	; 10
    1106:	51 05       	cpc	r21, r1
    1108:	14 f4       	brge	.+4      	; 0x110e <rprintf2RamRom+0x3b2>
								*bp++ = i + '0';
    110a:	40 5d       	subi	r20, 0xD0	; 208
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <rprintf2RamRom+0x3b4>
							else
								*bp++ = i - 10 + 'a';
    110e:	49 5a       	subi	r20, 0xA9	; 169
    1110:	40 83       	st	Z, r20
    1112:	79 01       	movw	r14, r18
						} while ((u /= 16) > 0);
    1114:	44 e0       	ldi	r20, 0x04	; 4
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	4a 95       	dec	r20
    1120:	d1 f7       	brne	.-12     	; 0x1116 <rprintf2RamRom+0x3ba>
    1122:	2f 5f       	subi	r18, 0xFF	; 255
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	31 96       	adiw	r30, 0x01	; 1
    1128:	61 15       	cp	r22, r1
    112a:	71 05       	cpc	r23, r1
    112c:	81 05       	cpc	r24, r1
    112e:	91 05       	cpc	r25, r1
    1130:	31 f7       	brne	.-52     	; 0x10fe <rprintf2RamRom+0x3a2>
						if (hash)
    1132:	10 97       	sbiw	r26, 0x00	; 0
    1134:	81 f0       	breq	.+32     	; 0x1156 <rprintf2RamRom+0x3fa>
						{
							*bp++ = 'x';
    1136:	f7 01       	movw	r30, r14
    1138:	28 e7       	ldi	r18, 0x78	; 120
    113a:	21 93       	st	Z+, r18
							*bp++ = '0';
    113c:	d7 01       	movw	r26, r14
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	6c 92       	st	X, r6
    1142:	11 97       	sbiw	r26, 0x01	; 1
    1144:	7f 01       	movw	r14, r30
    1146:	08 94       	sec
    1148:	e1 1c       	adc	r14, r1
    114a:	f1 1c       	adc	r15, r1
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <rprintf2RamRom+0x3fa>
					do_long = 1;
					f++;
            }

				fmt = READMEMBYTE(stringInRom,f);
				bp = buf;
    114e:	26 e8       	ldi	r18, 0x86	; 134
    1150:	e2 2e       	mov	r14, r18
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	f2 2e       	mov	r15, r18
						{
							*bp++ = 'x';
							*bp++ = '0';
						}
					}
					i = f_width - (bp - buf);
    1156:	a9 80       	ldd	r10, Y+1	; 0x01
    1158:	ba 80       	ldd	r11, Y+2	; 0x02
    115a:	e6 e8       	ldi	r30, 0x86	; 134
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	ae 0e       	add	r10, r30
    1160:	bf 1e       	adc	r11, r31
    1162:	ae 18       	sub	r10, r14
    1164:	bf 08       	sbc	r11, r15
					if (!flush_left)
    1166:	21 14       	cp	r2, r1
    1168:	31 04       	cpc	r3, r1
    116a:	81 f4       	brne	.+32     	; 0x118c <rprintf2RamRom+0x430>
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <rprintf2RamRom+0x416>
						while (i-- > 0)
							rprintfChar(pad);
    116e:	84 2d       	mov	r24, r4
    1170:	c1 dd       	rcall	.-1150   	; 0xcf4 <rprintfChar>
							*bp++ = '0';
						}
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
    1172:	08 94       	sec
    1174:	a1 08       	sbc	r10, r1
    1176:	b1 08       	sbc	r11, r1
// %x - hex
// %c - character
// %s - strings
// and the width,precision,padding modifiers
// **this printf does not support floating point numbers
int rprintf2RamRom(unsigned char stringInRom, const char *sfmt, ...)
    1178:	95 01       	movw	r18, r10
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
							*bp++ = '0';
						}
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
    117e:	12 16       	cp	r1, r18
    1180:	13 06       	cpc	r1, r19
    1182:	ac f3       	brlt	.-22     	; 0x116e <rprintf2RamRom+0x412>
    1184:	03 c0       	rjmp	.+6      	; 0x118c <rprintf2RamRom+0x430>
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
    1186:	d7 01       	movw	r26, r14
    1188:	8c 91       	ld	r24, X
    118a:	b4 dd       	rcall	.-1176   	; 0xcf4 <rprintfChar>
    118c:	08 94       	sec
    118e:	e1 08       	sbc	r14, r1
    1190:	f1 08       	sbc	r15, r1
					}
					i = f_width - (bp - buf);
					if (!flush_left)
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
    1192:	b6 e8       	ldi	r27, 0x86	; 134
    1194:	eb 16       	cp	r14, r27
    1196:	b1 e0       	ldi	r27, 0x01	; 1
    1198:	fb 06       	cpc	r15, r27
    119a:	a8 f7       	brcc	.-22     	; 0x1186 <rprintf2RamRom+0x42a>
						rprintfChar((int) (*bp));
					if (flush_left)
    119c:	21 14       	cp	r2, r1
    119e:	31 04       	cpc	r3, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <rprintf2RamRom+0x448>
    11a2:	5b c0       	rjmp	.+182    	; 0x125a <rprintf2RamRom+0x4fe>
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <rprintf2RamRom+0x454>
						while (i-- > 0)
							rprintfChar(' ');
    11a6:	80 e2       	ldi	r24, 0x20	; 32
    11a8:	a5 dd       	rcall	.-1206   	; 0xcf4 <rprintfChar>
    11aa:	08 94       	sec
    11ac:	a1 08       	sbc	r10, r1
    11ae:	b1 08       	sbc	r11, r1
						while (i-- > 0)
							rprintfChar(pad);
					for (bp--; bp >= buf; bp--)
						rprintfChar((int) (*bp));
					if (flush_left)
						while (i-- > 0)
    11b0:	1a 14       	cp	r1, r10
    11b2:	1b 04       	cpc	r1, r11
    11b4:	c4 f3       	brlt	.-16     	; 0x11a6 <rprintf2RamRom+0x44a>
    11b6:	51 c0       	rjmp	.+162    	; 0x125a <rprintf2RamRom+0x4fe>
							rprintfChar(' ');
					break;
            case 'c':			// 'c' character
					i = va_arg(ap, int);
    11b8:	92 e0       	ldi	r25, 0x02	; 2
    11ba:	e9 2e       	mov	r14, r25
    11bc:	f1 2c       	mov	r15, r1
    11be:	ec 0c       	add	r14, r12
    11c0:	fd 1c       	adc	r15, r13
					rprintfChar((int) (i));
    11c2:	f6 01       	movw	r30, r12
    11c4:	80 81       	ld	r24, Z
    11c6:	96 dd       	rcall	.-1236   	; 0xcf4 <rprintfChar>
					if (flush_left)
						while (i-- > 0)
							rprintfChar(' ');
					break;
            case 'c':			// 'c' character
					i = va_arg(ap, int);
    11c8:	67 01       	movw	r12, r14
					rprintfChar((int) (i));
					break;
    11ca:	47 c0       	rjmp	.+142    	; 0x125a <rprintf2RamRom+0x4fe>
            case 's':			// 's' string
					bp = va_arg(ap, unsigned char *);
    11cc:	f6 01       	movw	r30, r12
    11ce:	22 e0       	ldi	r18, 0x02	; 2
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	c2 0e       	add	r12, r18
    11d4:	d3 1e       	adc	r13, r19
    11d6:	e0 80       	ld	r14, Z
    11d8:	f1 80       	ldd	r15, Z+1	; 0x01
					if (!bp)
    11da:	e1 14       	cp	r14, r1
    11dc:	f1 04       	cpc	r15, r1
    11de:	21 f4       	brne	.+8      	; 0x11e8 <rprintf2RamRom+0x48c>
						bp = (unsigned char *) "(nil)";
    11e0:	80 e7       	ldi	r24, 0x70	; 112
    11e2:	e8 2e       	mov	r14, r24
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	f8 2e       	mov	r15, r24
					f_width = f_width - strlen((char *) bp);
    11e8:	f7 01       	movw	r30, r14
    11ea:	01 90       	ld	r0, Z+
    11ec:	00 20       	and	r0, r0
    11ee:	e9 f7       	brne	.-6      	; 0x11ea <rprintf2RamRom+0x48e>
    11f0:	31 97       	sbiw	r30, 0x01	; 1
    11f2:	ee 19       	sub	r30, r14
    11f4:	ff 09       	sbc	r31, r15
    11f6:	a9 80       	ldd	r10, Y+1	; 0x01
    11f8:	ba 80       	ldd	r11, Y+2	; 0x02
    11fa:	ae 1a       	sub	r10, r30
    11fc:	bf 0a       	sbc	r11, r31
					if (!flush_left)
    11fe:	21 14       	cp	r2, r1
    1200:	31 04       	cpc	r3, r1
    1202:	61 f4       	brne	.+24     	; 0x121c <rprintf2RamRom+0x4c0>
    1204:	02 c0       	rjmp	.+4      	; 0x120a <rprintf2RamRom+0x4ae>
						while (f_width-- > 0)
							rprintfChar(pad);
    1206:	84 2d       	mov	r24, r4
    1208:	75 dd       	rcall	.-1302   	; 0xcf4 <rprintfChar>
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - strlen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
    120a:	08 94       	sec
    120c:	a1 08       	sbc	r10, r1
    120e:	b1 08       	sbc	r11, r1
// %x - hex
// %c - character
// %s - strings
// and the width,precision,padding modifiers
// **this printf does not support floating point numbers
int rprintf2RamRom(unsigned char stringInRom, const char *sfmt, ...)
    1210:	95 01       	movw	r18, r10
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
					bp = va_arg(ap, unsigned char *);
					if (!bp)
						bp = (unsigned char *) "(nil)";
					f_width = f_width - strlen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
    1216:	12 16       	cp	r1, r18
    1218:	13 06       	cpc	r1, r19
    121a:	ac f3       	brlt	.-22     	; 0x1206 <rprintf2RamRom+0x4aa>
    121c:	27 01       	movw	r4, r14
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++)
    121e:	ee 24       	eor	r14, r14
    1220:	ff 24       	eor	r15, r15
    1222:	04 c0       	rjmp	.+8      	; 0x122c <rprintf2RamRom+0x4d0>
					{
						rprintfChar(*bp);
    1224:	67 dd       	rcall	.-1330   	; 0xcf4 <rprintfChar>
						bp = (unsigned char *) "(nil)";
					f_width = f_width - strlen((char *) bp);
					if (!flush_left)
						while (f_width-- > 0)
							rprintfChar(pad);
					for (i = 0; *bp && i < prec; i++)
    1226:	08 94       	sec
    1228:	e1 1c       	adc	r14, r1
    122a:	f1 1c       	adc	r15, r1
    122c:	d2 01       	movw	r26, r4
    122e:	8d 91       	ld	r24, X+
    1230:	2d 01       	movw	r4, r26
    1232:	88 23       	and	r24, r24
    1234:	19 f0       	breq	.+6      	; 0x123c <rprintf2RamRom+0x4e0>
    1236:	e8 14       	cp	r14, r8
    1238:	f9 04       	cpc	r15, r9
    123a:	a4 f3       	brlt	.-24     	; 0x1224 <rprintf2RamRom+0x4c8>
					{
						rprintfChar(*bp);
						bp++;
					}
					if (flush_left)
    123c:	21 14       	cp	r2, r1
    123e:	31 04       	cpc	r3, r1
    1240:	61 f0       	breq	.+24     	; 0x125a <rprintf2RamRom+0x4fe>
    1242:	05 c0       	rjmp	.+10     	; 0x124e <rprintf2RamRom+0x4f2>
						while (f_width-- > 0)
							rprintfChar(' ');
    1244:	80 e2       	ldi	r24, 0x20	; 32
    1246:	56 dd       	rcall	.-1364   	; 0xcf4 <rprintfChar>
    1248:	08 94       	sec
    124a:	a1 08       	sbc	r10, r1
    124c:	b1 08       	sbc	r11, r1
					{
						rprintfChar(*bp);
						bp++;
					}
					if (flush_left)
						while (f_width-- > 0)
    124e:	1a 14       	cp	r1, r10
    1250:	1b 04       	cpc	r1, r11
    1252:	c4 f3       	brlt	.-16     	; 0x1244 <rprintf2RamRom+0x4e8>
    1254:	02 c0       	rjmp	.+4      	; 0x125a <rprintf2RamRom+0x4fe>
							rprintfChar(' ');
					break;
            case '%':			// '%' character
					rprintfChar('%');
    1256:	85 e2       	ldi	r24, 0x25	; 37
    1258:	4d dd       	rcall	.-1382   	; 0xcf4 <rprintfChar>
	va_list ap;
	va_start(ap, sfmt);

	f = (unsigned char *) sfmt;

	for (; READMEMBYTE(stringInRom,f); f++)
    125a:	0f 5f       	subi	r16, 0xFF	; 255
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	77 20       	and	r7, r7
    1260:	31 f0       	breq	.+12     	; 0x126e <rprintf2RamRom+0x512>
    1262:	f8 01       	movw	r30, r16
    1264:	84 91       	lpm	r24, Z+
    1266:	88 23       	and	r24, r24
    1268:	09 f0       	breq	.+2      	; 0x126c <rprintf2RamRom+0x510>
    126a:	9d cd       	rjmp	.-1222   	; 0xda6 <rprintf2RamRom+0x4a>
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <rprintf2RamRom+0x51c>
    126e:	d8 01       	movw	r26, r16
    1270:	8c 91       	ld	r24, X
    1272:	88 23       	and	r24, r24
    1274:	09 f0       	breq	.+2      	; 0x1278 <rprintf2RamRom+0x51c>
    1276:	95 cd       	rjmp	.-1238   	; 0xda2 <rprintf2RamRom+0x46>
		}
	}

	va_end(ap);
	return 0;
}
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	9f 90       	pop	r9
    1296:	8f 90       	pop	r8
    1298:	7f 90       	pop	r7
    129a:	6f 90       	pop	r6
    129c:	5f 90       	pop	r5
    129e:	4f 90       	pop	r4
    12a0:	3f 90       	pop	r3
    12a2:	2f 90       	pop	r2
    12a4:	08 95       	ret

000012a6 <Si570CalcRFREQ>:
// Cost: 140us
// frequency [MHz] * 2^21
static 
uint8_t
Si570CalcRFREQ(uint32_t freq)
{
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
	uint8_t		RFREQ_b4;
	uint32_t	RR;						// Division remainder
	uint8_t		sN1;

	// Convert divider ratio to SI570 register value
	sN1 = Si570_N1 - 1;
    12ac:	04 2d       	mov	r16, r4
    12ae:	01 50       	subi	r16, 0x01	; 1
	Si570_Data.N1      = sN1 >> 2;
    12b0:	20 2f       	mov	r18, r16
    12b2:	26 95       	lsr	r18
    12b4:	26 95       	lsr	r18
	Si570_Data.HS_DIV  = Si570_HS_DIV - 4;
    12b6:	35 2d       	mov	r19, r5
    12b8:	34 50       	subi	r19, 0x04	; 4
    12ba:	32 95       	swap	r19
    12bc:	33 0f       	add	r19, r19
    12be:	30 7e       	andi	r19, 0xE0	; 224
    12c0:	2f 71       	andi	r18, 0x1F	; 31
    12c2:	23 2b       	or	r18, r19
    12c4:	20 93 7f 02 	sts	0x027F, r18
	// Multiplier_32  :                  b3      b2      b1      b0
	// Product_48     :  r0      b4      b3      b2      b1      b0
	//                  <--- high ----><---------- low ------------->

	cnt = 32+1;                      // Init loop counter
	asm (
    12c8:	a1 e2       	ldi	r26, 0x21	; 33
    12ca:	00 24       	eor	r0, r0
    12cc:	aa 1b       	sub	r26, r26

000012ce <L_A_28>:
    12ce:	10 f4       	brcc	.+4      	; 0x12d4 <L_B_28>
    12d0:	a2 0d       	add	r26, r2
    12d2:	03 1c       	adc	r0, r3

000012d4 <L_B_28>:
    12d4:	07 94       	ror	r0
    12d6:	a7 95       	ror	r26
    12d8:	97 95       	ror	r25
    12da:	87 95       	ror	r24
    12dc:	77 95       	ror	r23
    12de:	67 95       	ror	r22
    12e0:	aa 95       	dec	r26
    12e2:	a9 f7       	brne	.-22     	; 0x12ce <L_A_28>
    12e4:	16 2f       	mov	r17, r22
    12e6:	f7 2f       	mov	r31, r23
    12e8:	e8 2f       	mov	r30, r24
    12ea:	b9 2f       	mov	r27, r25
	// Check if DCO is lower than the Si570 max specied.
	// The low 3 bit's are not used, so the error is 8MHz
	// DCO = Freq * sN (calculated above)
	// RFREQ is [19.21]bits
	sint16_t DCO;
	DCO.b0 = RFREQ.w1.b1;
    12ec:	29 2f       	mov	r18, r25
	DCO.b1 = RFREQ_b4;
    12ee:	3a 2f       	mov	r19, r26
	if (DCO.w > ((DCO_MAX+4)/8))
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	26 3c       	cpi	r18, 0xC6	; 198
    12f4:	38 07       	cpc	r19, r24
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <L_B_28+0x26>
    12f8:	3e c0       	rjmp	.+124    	; 0x1376 <L_X_54+0x22>
	//---------------------------------------------------------------------------

	RR = 0;							// Clear Remainder_40
	cnt = 40+1+28+3;				// Init Loop_Counter
									// (28 = 12.28 bits, 3 = * 8)
	asm (
    12fa:	20 91 17 01 	lds	r18, 0x0117
    12fe:	30 91 18 01 	lds	r19, 0x0118
    1302:	40 91 19 01 	lds	r20, 0x0119
    1306:	50 91 1a 01 	lds	r21, 0x011A
    130a:	bd 01       	movw	r22, r26
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	dc 01       	movw	r26, r24
    1312:	0f 2e       	mov	r0, r31
    1314:	f8 e4       	ldi	r31, 0x48	; 72
    1316:	ff 2e       	mov	r15, r31
    1318:	f0 2d       	mov	r31, r0
    131a:	88 94       	clc

0000131c <L_A_54>:
    131c:	11 1f       	adc	r17, r17
    131e:	ff 1f       	adc	r31, r31
    1320:	ee 1f       	adc	r30, r30
    1322:	77 1f       	adc	r23, r23
    1324:	66 1f       	adc	r22, r22
    1326:	88 1f       	adc	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	aa 1f       	adc	r26, r26
    132c:	bb 1f       	adc	r27, r27
    132e:	82 1b       	sub	r24, r18
    1330:	93 0b       	sbc	r25, r19
    1332:	a4 0b       	sbc	r26, r20
    1334:	b5 0b       	sbc	r27, r21
    1336:	30 f4       	brcc	.+12     	; 0x1344 <L_B_54>
    1338:	82 0f       	add	r24, r18
    133a:	93 1f       	adc	r25, r19
    133c:	a4 1f       	adc	r26, r20
    133e:	b5 1f       	adc	r27, r21
    1340:	88 94       	clc
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <L_C_54>

00001344 <L_B_54>:
    1344:	08 94       	sec

00001346 <L_C_54>:
    1346:	fa 94       	dec	r15
    1348:	49 f7       	brne	.-46     	; 0x131c <L_A_54>
    134a:	11 1d       	adc	r17, r1
    134c:	f1 1d       	adc	r31, r1
    134e:	e1 1d       	adc	r30, r1
    1350:	71 1d       	adc	r23, r1
    1352:	61 1d       	adc	r22, r1

00001354 <L_X_54>:
    1354:	10 93 84 02 	sts	0x0284, r17
    1358:	f0 93 83 02 	sts	0x0283, r31
    135c:	e0 93 82 02 	sts	0x0282, r30
    1360:	70 93 81 02 	sts	0x0281, r23
	// Si570_Data.RFREQ_b4 will be sent to register_8 in the Si570
	// register_8 :  76543210
	//               ||^^^^^^------< RFREQ[37:32]
	//               ^^------------< N1[1:0]
	Si570_Data.RFREQ_b4  = RFREQ_b4;
	Si570_Data.RFREQ_b4 |= (sN1 & 0x03) << 6;
    1364:	02 95       	swap	r16
    1366:	00 0f       	add	r16, r16
    1368:	00 0f       	add	r16, r16
    136a:	00 7c       	andi	r16, 0xC0	; 192
    136c:	06 2b       	or	r16, r22
    136e:	00 93 80 02 	sts	0x0280, r16

	return 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <L_X_54+0x24>
	// RFREQ is [19.21]bits
	sint16_t DCO;
	DCO.b0 = RFREQ.w1.b1;
	DCO.b1 = RFREQ_b4;
	if (DCO.w > ((DCO_MAX+4)/8))
		return 0;
    1376:	80 e0       	ldi	r24, 0x00	; 0
	//               ^^------------< N1[1:0]
	Si570_Data.RFREQ_b4  = RFREQ_b4;
	Si570_Data.RFREQ_b4 |= (sN1 & 0x03) << 6;

	return 1;
}
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	08 95       	ret

00001380 <Si570CmdStart>:
	}
}

static uint8_t
Si570CmdStart(uint8_t cmd)
{
    1380:	1f 93       	push	r17
    1382:	18 2f       	mov	r17, r24
	I2CSendStart();
    1384:	2a d1       	rcall	.+596    	; 0x15da <I2CSendStart>
	I2CSendByte((R.Si570_I2C_addr<<1)|0);// send device address 
    1386:	80 91 01 01 	lds	r24, 0x0101
    138a:	88 0f       	add	r24, r24
    138c:	3c d1       	rcall	.+632    	; 0x1606 <I2CSendByte>
	if (I2CErrors == 0)
    138e:	80 91 40 02 	lds	r24, 0x0240
    1392:	88 23       	and	r24, r24
    1394:	21 f4       	brne	.+8      	; 0x139e <Si570CmdStart+0x1e>
	{
		I2CSendByte(cmd);				// send Byte Command
    1396:	81 2f       	mov	r24, r17
    1398:	36 d1       	rcall	.+620    	; 0x1606 <I2CSendByte>
		return True;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <Si570CmdStart+0x20>
	}
	return False;
    139e:	80 e0       	ldi	r24, 0x00	; 0
}
    13a0:	1f 91       	pop	r17
    13a2:	08 95       	ret

000013a4 <Si570Write>:
}

// write all registers in one block.
static void
Si570Write(void)
{
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
	//i2c_queue();						// Wait for I2C port to become free

	if (Si570CmdStart(7))				// send Byte address 7
    13a8:	87 e0       	ldi	r24, 0x07	; 7
    13aa:	ea df       	rcall	.-44     	; 0x1380 <Si570CmdStart>
    13ac:	88 23       	and	r24, r24
    13ae:	41 f0       	breq	.+16     	; 0x13c0 <Si570Write+0x1c>
    13b0:	cf e7       	ldi	r28, 0x7F	; 127
    13b2:	d2 e0       	ldi	r29, 0x02	; 2
	{
		uint8_t i;
		for (i=0;i<6;i++)				// all 6 registers
			I2CSendByte(Si570_Data.bData[i]);// send data 
    13b4:	89 91       	ld	r24, Y+
    13b6:	27 d1       	rcall	.+590    	; 0x1606 <I2CSendByte>
	//i2c_queue();						// Wait for I2C port to become free

	if (Si570CmdStart(7))				// send Byte address 7
	{
		uint8_t i;
		for (i=0;i<6;i++)				// all 6 registers
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	c5 38       	cpi	r28, 0x85	; 133
    13bc:	d8 07       	cpc	r29, r24
    13be:	d1 f7       	brne	.-12     	; 0x13b4 <Si570Write+0x10>
			I2CSendByte(Si570_Data.bData[i]);// send data 
	}
	I2CSendStop();
    13c0:	13 d1       	rcall	.+550    	; 0x15e8 <I2CSendStop>

	//i2c_release();						// Release I2C port
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <Si570CmdReg>:
	return False;
}

void
Si570CmdReg(uint8_t reg, uint8_t data)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	0f 92       	push	r0
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	//i2c_queue();						// Wait for I2C port to become free

	if (Si570CmdStart(reg))
    13d2:	69 83       	std	Y+1, r22	; 0x01
    13d4:	d5 df       	rcall	.-86     	; 0x1380 <Si570CmdStart>
    13d6:	69 81       	ldd	r22, Y+1	; 0x01
    13d8:	88 23       	and	r24, r24
    13da:	11 f0       	breq	.+4      	; 0x13e0 <Si570CmdReg+0x18>
	{
		I2CSendByte(data);
    13dc:	86 2f       	mov	r24, r22
    13de:	13 d1       	rcall	.+550    	; 0x1606 <I2CSendByte>
	}
	I2CSendStop();
    13e0:	03 d1       	rcall	.+518    	; 0x15e8 <I2CSendStop>

	//i2c_release();						// Release I2C port
}
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <SetFreq>:
	return (delta_F <= delta_F_MAX) ? True : False;
}


void SetFreq(uint32_t freq)		// frequency [MHz] * 2^21
{
    13ea:	af 92       	push	r10
    13ec:	bf 92       	push	r11
    13ee:	cf 92       	push	r12
    13f0:	df 92       	push	r13
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	7b 01       	movw	r14, r22
    1400:	8c 01       	movw	r16, r24
	#if !FRQ_CGH_DURING_TX		// Do not allow Si570 frequency change and corresponding filter change during TX
	if (Status1 & TX_FLAG) 		// Oops, we are transmitting... return without changing frequency
		return;
	#endif

	R.Freq[0] = freq;			// Some Command calls to this func do not update R.Freq[0]
    1402:	60 93 1d 01 	sts	0x011D, r22
    1406:	70 93 1e 01 	sts	0x011E, r23
    140a:	80 93 1f 01 	sts	0x011F, r24
    140e:	90 93 20 01 	sts	0x0120, r25

	#if !FLTR_CGH_DURING_TX		// Do not allow Filter changes when frequency is changed during TX
	if (!(Status1 & TX_FLAG))	// Only change filters when not transmitting
    1412:	80 91 7a 01 	lds	r24, 0x017A
    1416:	80 fd       	sbrc	r24, 0
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <SetFreq+0x36>
	#endif
	#if CALC_BAND_MUL_ADD		// Band dependent Frequency Subtract and Multiply
	band = SetFilter(freq);		// Select Band Pass Filter, according to the frequency selected
	#else
	SetFilter(freq);			// Select Band Pass Filter, according to the frequency selected
    141a:	c8 01       	movw	r24, r16
    141c:	b7 01       	movw	r22, r14
    141e:	fa d4       	rcall	.+2548   	; 0x1e14 <SetFilter>
								// Modify Si570 frequency according to Mul/Sub values
	freq = CalcFreqMulAdd(freq, R.BandSub[band], R.BandMul[band]);
	#endif
	
	// Smoothtune change frequency
	if ((R.SmoothTunePPM != 0) && Si570_Small_Change(freq) && !(Status2 & SI570_OFFL))
    1420:	60 91 1b 01 	lds	r22, 0x011B
    1424:	70 91 1c 01 	lds	r23, 0x011C
    1428:	61 15       	cp	r22, r1
    142a:	71 05       	cpc	r23, r1
    142c:	e1 f1       	breq	.+120    	; 0x14a6 <SetFreq+0xbc>
{
	uint32_t delta_F, delta_F_MAX;
	sint32_t previous_Frequency;

	// Get previous_Frequency   -> [11.21]
	previous_Frequency.dw = FreqSmoothTune;
    142e:	80 91 08 02 	lds	r24, 0x0208
    1432:	90 91 09 02 	lds	r25, 0x0209
    1436:	a0 91 0a 02 	lds	r26, 0x020A
    143a:	b0 91 0b 02 	lds	r27, 0x020B
    143e:	ad 01       	movw	r20, r26

	// Delta_F (MHz) = |current_Frequency - previous_Frequency|  -> [11.21]
	delta_F = current_Frequency - previous_Frequency.dw;
    1440:	57 01       	movw	r10, r14
    1442:	68 01       	movw	r12, r16
    1444:	a8 1a       	sub	r10, r24
    1446:	b9 0a       	sbc	r11, r25
    1448:	ca 0a       	sbc	r12, r26
    144a:	db 0a       	sbc	r13, r27
    144c:	d6 01       	movw	r26, r12
    144e:	c5 01       	movw	r24, r10

	if (delta_F >= _2(31)) delta_F = 0 - delta_F;
    1450:	d7 fe       	sbrs	r13, 7
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <SetFreq+0x78>
    1454:	b0 95       	com	r27
    1456:	a0 95       	com	r26
    1458:	90 95       	com	r25
    145a:	81 95       	neg	r24
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	af 4f       	sbci	r26, 0xFF	; 255
    1460:	bf 4f       	sbci	r27, 0xFF	; 255
	// replaced by:
	// Delta_F (Hz) = (Delta_F (MHz) * (1_000_000 >> 16)
	//              = Delta_F (MHz) * 15  (instead of 15.258xxxx)
	// Error        = (15 - 15.258) / 15.258 = 0.0169 < 1.7%

	delta_F = delta_F * 15;          // [27.5] = [11.21] * [16.0]
    1462:	5c 01       	movw	r10, r24
    1464:	6d 01       	movw	r12, r26
    1466:	24 e0       	ldi	r18, 0x04	; 4
    1468:	aa 0c       	add	r10, r10
    146a:	bb 1c       	adc	r11, r11
    146c:	cc 1c       	adc	r12, r12
    146e:	dd 1c       	adc	r13, r13
    1470:	2a 95       	dec	r18
    1472:	d1 f7       	brne	.-12     	; 0x1468 <SetFreq+0x7e>
    1474:	a8 1a       	sub	r10, r24
    1476:	b9 0a       	sbc	r11, r25
    1478:	ca 0a       	sbc	r12, r26
    147a:	db 0a       	sbc	r13, r27

	// Compute delta_F_MAX (Hz)= previous_Frequency(MHz) * 3500 ppm
	delta_F_MAX = (uint32_t)previous_Frequency.w1.w * R.SmoothTunePPM;
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9a 01       	movw	r18, r20
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	0e 94 46 12 	call	0x248c	; 0x248c <__mulsi3>
								// Modify Si570 frequency according to Mul/Sub values
	freq = CalcFreqMulAdd(freq, R.BandSub[band], R.BandMul[band]);
	#endif
	
	// Smoothtune change frequency
	if ((R.SmoothTunePPM != 0) && Si570_Small_Change(freq) && !(Status2 & SI570_OFFL))
    148a:	6a 15       	cp	r22, r10
    148c:	7b 05       	cpc	r23, r11
    148e:	8c 05       	cpc	r24, r12
    1490:	9d 05       	cpc	r25, r13
    1492:	48 f0       	brcs	.+18     	; 0x14a6 <SetFreq+0xbc>
    1494:	80 91 7b 01 	lds	r24, 0x017B
    1498:	80 fd       	sbrc	r24, 0
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <SetFreq+0xbc>
	{
		Si570CalcRFREQ(freq);
    149c:	c8 01       	movw	r24, r16
    149e:	b7 01       	movw	r22, r14
    14a0:	02 df       	rcall	.-508    	; 0x12a6 <Si570CalcRFREQ>
		Si570Write();
    14a2:	80 df       	rcall	.-256    	; 0x13a4 <Si570Write>
    14a4:	4f c0       	rjmp	.+158    	; 0x1544 <SetFreq+0x15a>

	// Find the total division needed.
	// It is always one to low (not in the case reminder is zero, reminder not used here).
	// 16.0 bits = 13.3 bits / ( 11.5 bits >> 2)
	N0  = DCO_MIN * _2(3);
	N0 /= Freq.w1.w >> 2;
    14a6:	b8 01       	movw	r22, r16
    14a8:	76 95       	lsr	r23
    14aa:	67 95       	ror	r22
    14ac:	76 95       	lsr	r23
    14ae:	67 95       	ror	r22
    14b0:	80 e9       	ldi	r24, 0x90	; 144
    14b2:	97 e9       	ldi	r25, 0x97	; 151
    14b4:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    14b8:	5b 01       	movw	r10, r22
    14ba:	2b e0       	ldi	r18, 0x0B	; 11
    14bc:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t	xN1;
	uint16_t	xN;

	// Registers to save the found dividers
	uint8_t		sHS_DIV=0;
	uint8_t		sN1=0;
    14be:	cc 24       	eor	r12, r12
	uint8_t		xHS_DIV;
	uint16_t	xN1;
	uint16_t	xN;

	// Registers to save the found dividers
	uint8_t		sHS_DIV=0;
    14c0:	dd 24       	eor	r13, r13
	// It is always one to low (not in the case reminder is zero, reminder not used here).
	// 16.0 bits = 13.3 bits / ( 11.5 bits >> 2)
	N0  = DCO_MIN * _2(3);
	N0 /= Freq.w1.w >> 2;

	sN = 11*128;
    14c2:	c0 e8       	ldi	r28, 0x80	; 128
    14c4:	d5 e0       	ldi	r29, 0x05	; 5

	// Find the total division needed.
	// It is always one to low (not in the case reminder is zero, reminder not used here).
	// 16.0 bits = 13.3 bits / ( 11.5 bits >> 2)
	N0  = DCO_MIN * _2(3);
	N0 /= Freq.w1.w >> 2;
    14c6:	42 2f       	mov	r20, r18

	sN = 11*128;
	for(xHS_DIV = 11; xHS_DIV > 3; --xHS_DIV)
	{
		// Skip the unavailable divider's
		if (xHS_DIV == 8 || xHS_DIV == 10)
    14c8:	28 30       	cpi	r18, 0x08	; 8
    14ca:	c1 f0       	breq	.+48     	; 0x14fc <SetFreq+0x112>
    14cc:	2a 30       	cpi	r18, 0x0A	; 10
    14ce:	b1 f0       	breq	.+44     	; 0x14fc <SetFreq+0x112>
			continue;

		// Calculate the needed low speed divider
		xN1 = N0 / xHS_DIV + 1;
    14d0:	c5 01       	movw	r24, r10
    14d2:	b9 01       	movw	r22, r18
    14d4:	f4 d7       	rcall	.+4072   	; 0x24be <__udivmodhi4>
    14d6:	fb 01       	movw	r30, r22
    14d8:	31 96       	adiw	r30, 0x01	; 1
//		xN1 = (N0 + xHS_DIV/2) / xHS_DIV;

		if (xN1 > 128)
    14da:	e1 38       	cpi	r30, 0x81	; 129
    14dc:	f1 05       	cpc	r31, r1
    14de:	70 f4       	brcc	.+28     	; 0x14fc <SetFreq+0x112>
			continue;

		// Skip the unavailable divider's
		if (xN1 != 1 && (xN1 & 1) == 1)
    14e0:	e1 30       	cpi	r30, 0x01	; 1
    14e2:	f1 05       	cpc	r31, r1
    14e4:	11 f0       	breq	.+4      	; 0x14ea <SetFreq+0x100>
    14e6:	e0 fd       	sbrc	r30, 0
			xN1 += 1;
    14e8:	31 96       	adiw	r30, 0x01	; 1

		xN = xHS_DIV * xN1;
    14ea:	cf 01       	movw	r24, r30
    14ec:	b9 01       	movw	r22, r18
    14ee:	bc d7       	rcall	.+3960   	; 0x2468 <__mulhi3>
		if (sN > xN)
    14f0:	8c 17       	cp	r24, r28
    14f2:	9d 07       	cpc	r25, r29
    14f4:	18 f4       	brcc	.+6      	; 0x14fc <SetFreq+0x112>
		{
			sN		= xN;
			sN1		= xN1;
    14f6:	ce 2e       	mov	r12, r30
    14f8:	ec 01       	movw	r28, r24
    14fa:	d4 2e       	mov	r13, r20
    14fc:	21 50       	subi	r18, 0x01	; 1
    14fe:	30 40       	sbci	r19, 0x00	; 0
	// 16.0 bits = 13.3 bits / ( 11.5 bits >> 2)
	N0  = DCO_MIN * _2(3);
	N0 /= Freq.w1.w >> 2;

	sN = 11*128;
	for(xHS_DIV = 11; xHS_DIV > 3; --xHS_DIV)
    1500:	23 30       	cpi	r18, 0x03	; 3
    1502:	31 05       	cpc	r19, r1
    1504:	01 f7       	brne	.-64     	; 0x14c6 <SetFreq+0xdc>
			sN1		= xN1;
			sHS_DIV	= xHS_DIV;
		}
	}

	if (sHS_DIV == 0)
    1506:	dd 20       	and	r13, r13
    1508:	e9 f0       	breq	.+58     	; 0x1544 <SetFreq+0x15a>
		return False;

	Si570_N      = sN;
    150a:	1e 01       	movw	r2, r28
	Si570_N1     = sN1;
	Si570_HS_DIV = sHS_DIV;
    150c:	26 01       	movw	r4, r12
		Si570Write();
	}
	// Large step, not smoothtune
	else
	{
		if (!Si570CalcDivider(freq) || !Si570CalcRFREQ(freq))
    150e:	c8 01       	movw	r24, r16
    1510:	b7 01       	movw	r22, r14
    1512:	c9 de       	rcall	.-622    	; 0x12a6 <Si570CalcRFREQ>
    1514:	88 23       	and	r24, r24
    1516:	b1 f0       	breq	.+44     	; 0x1544 <SetFreq+0x15a>
			return;

		//Status2 &= ~SI570_OFFL;
		FreqSmoothTune = freq;
    1518:	e0 92 08 02 	sts	0x0208, r14
    151c:	f0 92 09 02 	sts	0x0209, r15
    1520:	00 93 0a 02 	sts	0x020A, r16
    1524:	10 93 0b 02 	sts	0x020B, r17
}

static void
Si570FreezeNCO(void)
{
	Si570CmdReg(137, 0x10);
    1528:	89 e8       	ldi	r24, 0x89	; 137
    152a:	60 e1       	ldi	r22, 0x10	; 16
    152c:	4d df       	rcall	.-358    	; 0x13c8 <Si570CmdReg>
}

static void Si570Load(void)
{
	Si570FreezeNCO();
	if (I2CErrors == 0)
    152e:	80 91 40 02 	lds	r24, 0x0240
    1532:	88 23       	and	r24, r24
    1534:	39 f4       	brne	.+14     	; 0x1544 <SetFreq+0x15a>
	{
		Si570Write();
    1536:	36 df       	rcall	.-404    	; 0x13a4 <Si570Write>
}

static void
Si570UnFreezeNCO(void)
{
	Si570CmdReg(137, 0x00);
    1538:	89 e8       	ldi	r24, 0x89	; 137
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	45 df       	rcall	.-374    	; 0x13c8 <Si570CmdReg>
}

static void
Si570NewFreq(void)
{
	Si570CmdReg(135, 0x40);
    153e:	87 e8       	ldi	r24, 0x87	; 135
    1540:	60 e4       	ldi	r22, 0x40	; 64
    1542:	42 df       	rcall	.-380    	; 0x13c8 <Si570CmdReg>

		//Status2 &= ~SI570_OFFL;
		FreqSmoothTune = freq;
		Si570Load();
	}
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	08 95       	ret

0000155a <DeviceInit>:

void
DeviceInit(void)
{
    155a:	80 91 7b 01 	lds	r24, 0x017B
	// Check if Si570 is online and intialize if nessesary
	// SCL Low is now power on the SI570 chip in the Softrock V9
	if ((I2C_PIN & _BV(BIT_SCL)) != 0)
    155e:	37 9b       	sbis	0x06, 7	; 6
    1560:	19 c0       	rjmp	.+50     	; 0x1594 <DeviceInit+0x3a>
	{
		if (Status2 & SI570_OFFL)
    1562:	80 ff       	sbrs	r24, 0
    1564:	1a c0       	rjmp	.+52     	; 0x159a <DeviceInit+0x40>
		{
			FreqSmoothTune = 0;				// Next SetFreq call no smoodtune
    1566:	10 92 08 02 	sts	0x0208, r1
    156a:	10 92 09 02 	sts	0x0209, r1
    156e:	10 92 0a 02 	sts	0x020A, r1
    1572:	10 92 0b 02 	sts	0x020B, r1

			SetFreq(R.Freq[0]);
    1576:	60 91 1d 01 	lds	r22, 0x011D
    157a:	70 91 1e 01 	lds	r23, 0x011E
    157e:	80 91 1f 01 	lds	r24, 0x011F
    1582:	90 91 20 01 	lds	r25, 0x0120
    1586:	31 df       	rcall	.-414    	; 0x13ea <SetFreq>

			Status2 &= ~SI570_OFFL;
    1588:	80 91 7b 01 	lds	r24, 0x017B
    158c:	8e 7f       	andi	r24, 0xFE	; 254
    158e:	80 93 7b 01 	sts	0x017B, r24
    1592:	08 95       	ret
			//SI570_OffLine = 0;
		}
	}
	else 
	{
		Status2 |= SI570_OFFL;
    1594:	81 60       	ori	r24, 0x01	; 1
    1596:	80 93 7b 01 	sts	0x017B, r24
    159a:	08 95       	ret

0000159c <I2CDelay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    159c:	86 e0       	ldi	r24, 0x06	; 6
    159e:	8a 95       	dec	r24
    15a0:	f1 f7       	brne	.-4      	; 0x159e <I2CDelay+0x2>
    15a2:	00 c0       	rjmp	.+0      	; 0x15a4 <I2CDelay+0x8>

static void 
I2CDelay(void)
{
	_delay_us(I2C_DELAY_uS);
}
    15a4:	08 95       	ret

000015a6 <I2CStretch>:
//PE0FKO: The original code has no stop condition (hang on SCL low)
//static 
void 
//I2CStretch()							// Wait until clock hi
I2CStretch(void)							// Wait until clock hi
{										// Terminate the loop @ max 2.1ms
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
	uint16_t i = 50;					// 2.1mS
    15aa:	c2 e3       	ldi	r28, 0x32	; 50
    15ac:	d0 e0       	ldi	r29, 0x00	; 0
	do {
		I2CDelay();						// Delay some time
    15ae:	f6 df       	rcall	.-20     	; 0x159c <I2CDelay>
		if (i-- == 0)
    15b0:	21 97       	sbiw	r28, 0x01	; 1
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	cf 3f       	cpi	r28, 0xFF	; 255
    15b6:	d8 07       	cpc	r29, r24
    15b8:	21 f4       	brne	.+8      	; 0x15c2 <I2CStretch+0x1c>
		{
			I2CErrors = True;			// Error timeout
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 93 40 02 	sts	0x0240, r24
			break;
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <I2CStretch+0x20>
		}
	}
	while(!(I2C_PIN & SCL));			// Clock line still low
    15c2:	37 9b       	sbis	0x06, 7	; 6
    15c4:	f4 cf       	rjmp	.-24     	; 0x15ae <I2CStretch+0x8>
}
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret

000015cc <I2CGetBit>:

static uint8_t
I2CGetBit(void)
{
	uint8_t b;
	I2C_SDA_HI;							// Data high = input (opencollector)
    15cc:	3e 98       	cbi	0x07, 6	; 7
	I2C_SCL_HI;		I2CStretch();		// SDA Hi Z and wait
    15ce:	3f 98       	cbi	0x07, 7	; 7
    15d0:	ea df       	rcall	.-44     	; 0x15a6 <I2CStretch>
	b = (I2C_PIN & SDA);				// get bit
    15d2:	86 b1       	in	r24, 0x06	; 6
	I2C_SCL_LO;							// clock low
    15d4:	3f 9a       	sbi	0x07, 7	; 7
	return b;
}
    15d6:	80 74       	andi	r24, 0x40	; 64
    15d8:	08 95       	ret

000015da <I2CSendStart>:
 *	SCL: ..  \__.. 
 */
void 
I2CSendStart(void)
{
	I2CErrors = False;					// reset error flag
    15da:	10 92 40 02 	sts	0x0240, r1
	I2C_SCL_HI;
    15de:	3f 98       	cbi	0x07, 7	; 7
	I2C_SDA_LO;  	I2CDelay(); 		// Start SDA to low
    15e0:	3e 9a       	sbi	0x07, 6	; 7
    15e2:	dc df       	rcall	.-72     	; 0x159c <I2CDelay>
	I2C_SCL_LO;  	I2CDelay();			// and the clock low
    15e4:	3f 9a       	sbi	0x07, 7	; 7
}
    15e6:	da cf       	rjmp	.-76     	; 0x159c <I2CDelay>

000015e8 <I2CSendStop>:
 *	SCL: ../     .. 
 */
void 
I2CSendStop(void)
{
	I2C_SDA_LO;
    15e8:	3e 9a       	sbi	0x07, 6	; 7
	I2C_SCL_HI;		I2CDelay();
    15ea:	3f 98       	cbi	0x07, 7	; 7
    15ec:	d7 df       	rcall	.-82     	; 0x159c <I2CDelay>
	I2C_SDA_HI;		I2CDelay();
    15ee:	3e 98       	cbi	0x07, 6	; 7
}
    15f0:	d5 cf       	rjmp	.-86     	; 0x159c <I2CDelay>

000015f2 <I2CSend0>:

void 
I2CSend0(void)
{
	I2C_SDA_LO;							// Data low = 0
    15f2:	3e 9a       	sbi	0x07, 6	; 7
	I2C_SCL_HI;		I2CStretch();
    15f4:	3f 98       	cbi	0x07, 7	; 7
    15f6:	d7 df       	rcall	.-82     	; 0x15a6 <I2CStretch>
	I2C_SCL_LO;		I2CDelay();
    15f8:	3f 9a       	sbi	0x07, 7	; 7
}
    15fa:	d0 cf       	rjmp	.-96     	; 0x159c <I2CDelay>

000015fc <I2CSend1>:

void 
I2CSend1(void)
{
	I2C_SDA_HI;							// Data high = 1
    15fc:	3e 98       	cbi	0x07, 6	; 7
	I2C_SCL_HI;		I2CStretch();
    15fe:	3f 98       	cbi	0x07, 7	; 7
    1600:	d2 df       	rcall	.-92     	; 0x15a6 <I2CStretch>
	I2C_SCL_LO;		I2CDelay();
    1602:	3f 9a       	sbi	0x07, 7	; 7
}
    1604:	cb cf       	rjmp	.-106    	; 0x159c <I2CDelay>

00001606 <I2CSendByte>:
	return b;
}

void
I2CSendByte(uint8_t b)
{
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	f8 2e       	mov	r15, r24
    160e:	08 e0       	ldi	r16, 0x08	; 8
	uint8_t i,p;
	p = 0x80;
    1610:	10 e8       	ldi	r17, 0x80	; 128
    for (i=0; i<8; i++)
	{
		if ((p & b) == 0) I2CSend0(); else I2CSend1();
    1612:	81 2f       	mov	r24, r17
    1614:	8f 21       	and	r24, r15
    1616:	11 f4       	brne	.+4      	; 0x161c <I2CSendByte+0x16>
    1618:	ec df       	rcall	.-40     	; 0x15f2 <I2CSend0>
    161a:	01 c0       	rjmp	.+2      	; 0x161e <I2CSendByte+0x18>
    161c:	ef df       	rcall	.-34     	; 0x15fc <I2CSend1>
    161e:	01 50       	subi	r16, 0x01	; 1
void
I2CSendByte(uint8_t b)
{
	uint8_t i,p;
	p = 0x80;
    for (i=0; i<8; i++)
    1620:	11 f0       	breq	.+4      	; 0x1626 <I2CSendByte+0x20>
	{
		if ((p & b) == 0) I2CSend0(); else I2CSend1();
    	p = p >> 1;
    1622:	16 95       	lsr	r17
    1624:	f6 cf       	rjmp	.-20     	; 0x1612 <I2CSendByte+0xc>
	};
    I2CErrors |= I2CGetBit();	 		//Acknowledge
    1626:	10 91 40 02 	lds	r17, 0x0240
    162a:	d0 df       	rcall	.-96     	; 0x15cc <I2CGetBit>
    162c:	81 2b       	or	r24, r17
    162e:	80 93 40 02 	sts	0x0240, r24
  	return; 
}
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	08 95       	ret

0000163a <I2CReceiveByte>:

uint8_t
I2CReceiveByte(void)
{
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	08 e0       	ldi	r16, 0x08	; 8
	uint8_t i;
	uint8_t b = 0;
    1640:	10 e0       	ldi	r17, 0x00	; 0
    for (i=0; i<8; i++)
	{
		b = b << 1;
    1642:	11 0f       	add	r17, r17
		if (I2CGetBit()) b |= 1;
    1644:	c3 df       	rcall	.-122    	; 0x15cc <I2CGetBit>
    1646:	81 11       	cpse	r24, r1
    1648:	11 60       	ori	r17, 0x01	; 1
    164a:	01 50       	subi	r16, 0x01	; 1
uint8_t
I2CReceiveByte(void)
{
	uint8_t i;
	uint8_t b = 0;
    for (i=0; i<8; i++)
    164c:	d1 f7       	brne	.-12     	; 0x1642 <I2CReceiveByte+0x8>
	{
		b = b << 1;
		if (I2CGetBit()) b |= 1;
  	};
  	return b;
}
    164e:	81 2f       	mov	r24, r17
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	08 95       	ret

00001656 <shaftEncoderInit>:
void shaftEncoderInit(void)
{
	//
	// Set inputs with pullup
	//
	ENC_A_DDR &= ~ENC_A_PIN;					// Enable pin for input
    1656:	56 98       	cbi	0x0a, 6	; 10
	ENC_A_PORT |= ENC_A_PIN;					// Activate internal pullup resistor
    1658:	5e 9a       	sbi	0x0b, 6	; 11
    ENC_B_DDR &= ~ENC_B_PIN;
    165a:	55 98       	cbi	0x0a, 5	; 10
	ENC_B_PORT |= ENC_B_PIN;
    165c:	5d 9a       	sbi	0x0b, 5	; 11
}
    165e:	08 95       	ret

00001660 <encoder_scan>:

//
// Scan the Shaft Encoder
//
void encoder_scan(void)
{
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
	#if ENCODER_RESOLUTION
	uint16_t enc_fast_sense = ENC_FAST_SENSE;
	uint16_t enc_fast_trig = ENC_FAST_TRIG;
	#if !ENCODER_CMD_INCR
	uint16_t encoder_resolution;
	encoder_resolution = 8388/R.Resolvable_States;
    1670:	c0 91 69 01 	lds	r28, 0x0169
    1674:	d0 91 6a 01 	lds	r29, 0x016A
//
void encoder_scan(void)
{
	static uint8_t old_pha, old_phb;			// Variables conaining the previous encoder states

	uint8_t pha = 0, phb= 0;					// Variables containing the current encoder states
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	4e 9b       	sbis	0x09, 6	; 9
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	4d 9b       	sbis	0x09, 5	; 9
    1682:	80 e0       	ldi	r24, 0x00	; 0
	#endif

	if (ENC_A_PORTIN & ENC_A_PIN) pha++;		// Read Phase A
	if (ENC_B_PORTIN & ENC_B_PIN) phb++;		// Read Phase B

	if ((pha != old_pha) && (phb != old_phb));	// Both states have changed, invalid
    1684:	30 91 11 02 	lds	r19, 0x0211
    1688:	20 91 10 02 	lds	r18, 0x0210
    168c:	93 17       	cp	r25, r19
    168e:	39 f0       	breq	.+14     	; 0x169e <encoder_scan+0x3e>
    1690:	82 17       	cp	r24, r18
    1692:	a1 f4       	brne	.+40     	; 0x16bc <encoder_scan+0x5c>
	
	else if (pha != old_pha)					// State of Phase A has changed
	{
		old_pha = pha;							// Store for next iteration
    1694:	90 93 11 02 	sts	0x0211, r25

		if(old_pha != old_phb)					// Decide direction and
    1698:	98 17       	cp	r25, r24
    169a:	49 f4       	brne	.+18     	; 0x16ae <encoder_scan+0x4e>
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <encoder_scan+0x4a>
		else
			increment--;						// or decrement
		Status2 |= (ENC_NEWFREQ | ENC_CHANGE);	// Frequency was modified
	}
	
	else if (phb != old_phb)					// State of Phase B has changed
    169e:	82 17       	cp	r24, r18
    16a0:	69 f0       	breq	.+26     	; 0x16bc <encoder_scan+0x5c>
	{
		old_phb = phb;							// Store for next iteration
    16a2:	80 93 10 02 	sts	0x0210, r24

		if(old_pha != old_phb)					// Decide direction and
    16a6:	98 17       	cp	r25, r24
    16a8:	11 f0       	breq	.+4      	; 0x16ae <encoder_scan+0x4e>
			increment --;						// decrement
    16aa:	1f ef       	ldi	r17, 0xFF	; 255
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <encoder_scan+0x50>
		else
			increment ++;						// or increment
    16ae:	11 e0       	ldi	r17, 0x01	; 1
		Status2 |= (ENC_NEWFREQ | ENC_CHANGE);	// Frequency was modified
    16b0:	80 91 7b 01 	lds	r24, 0x017B
    16b4:	8a 60       	ori	r24, 0x0A	; 10
    16b6:	80 93 7b 01 	sts	0x017B, r24
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <encoder_scan+0x5e>
{
	static uint8_t old_pha, old_phb;			// Variables conaining the previous encoder states

	uint8_t pha = 0, phb= 0;					// Variables containing the current encoder states

	int8_t	increment = 0;						// This interim variable used to add up changes
    16bc:	10 e0       	ldi	r17, 0x00	; 0

	#if ENCODER_FAST_ENABLE						// Feature for variable speed Rotary Encoder
	//
	// Variable speed function
	//
	if (Status2 & ENC_CHANGE)					// If encoder activity
    16be:	80 91 7b 01 	lds	r24, 0x017B
    16c2:	83 ff       	sbrs	r24, 3
    16c4:	76 c0       	rjmp	.+236    	; 0x17b2 <encoder_scan+0x152>
	{
		Status2 &= ~ENC_CHANGE;					// Clear activity flag
    16c6:	87 7f       	andi	r24, 0xF7	; 247
    16c8:	80 93 7b 01 	sts	0x017B, r24

		// Measure the time since last encoder activity in units of appr 1/65536 seconds
		enc_time=TCNT1;
    16cc:	e0 90 84 00 	lds	r14, 0x0084
    16d0:	f0 90 85 00 	lds	r15, 0x0085
		if (enc_last > enc_time); 				// Timer overrun, it is code efficient to do nothing
    16d4:	c0 90 0e 02 	lds	r12, 0x020E
    16d8:	d0 90 0f 02 	lds	r13, 0x020F
    16dc:	ec 14       	cp	r14, r12
    16de:	fd 04       	cpc	r15, r13
    16e0:	b0 f0       	brcs	.+44     	; 0x170e <encoder_scan+0xae>
	uint16_t enc_fast_sense = ENC_FAST_SENSE;
	uint16_t enc_fast_trig = ENC_FAST_TRIG;
	#if !ENCODER_CMD_INCR
	uint16_t encoder_resolution;
	encoder_resolution = 8388/R.Resolvable_States;
	enc_fast_sense = 96000/R.Resolvable_States;
    16e2:	9e 01       	movw	r18, r28
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	77 e7       	ldi	r23, 0x77	; 119
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	1c d7       	rcall	.+3640   	; 0x252a <__divmodsi4>

		// Measure the time since last encoder activity in units of appr 1/65536 seconds
		enc_time=TCNT1;
		if (enc_last > enc_time); 				// Timer overrun, it is code efficient to do nothing
		#if ENCODER_RESOLUTION
		else if (enc_fast_sense >= (enc_time-enc_last)) fast_counter++;// Fast movement detected
    16f2:	c7 01       	movw	r24, r14
    16f4:	8c 19       	sub	r24, r12
    16f6:	9d 09       	sbc	r25, r13
    16f8:	28 17       	cp	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	30 f0       	brcs	.+12     	; 0x170a <encoder_scan+0xaa>
    16fe:	80 91 0d 02 	lds	r24, 0x020D
    1702:	8f 5f       	subi	r24, 0xFF	; 255
    1704:	80 93 0d 02 	sts	0x020D, r24
    1708:	02 c0       	rjmp	.+4      	; 0x170e <encoder_scan+0xae>
		#else
		else if (ENC_FAST_SENSE >= (enc_time-enc_last)) fast_counter++;// Fast movement detected
		#endif
		else fast_counter = 0;					// Slow movement, reset counter
    170a:	10 92 0d 02 	sts	0x020D, r1
		enc_last = enc_time;					// Store for next time measurement
    170e:	f0 92 0f 02 	sts	0x020F, r15
    1712:	e0 92 0e 02 	sts	0x020E, r14

		// We have the required number of fast movements, enable FAST mode
		#if ENCODER_RESOLUTION
		if (fast_counter > enc_fast_trig) Status2 |= ENC_FAST;
    1716:	20 91 0d 02 	lds	r18, 0x020D
    171a:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t enc_fast_trig = ENC_FAST_TRIG;
	#if !ENCODER_CMD_INCR
	uint16_t encoder_resolution;
	encoder_resolution = 8388/R.Resolvable_States;
	enc_fast_sense = 96000/R.Resolvable_States;
	enc_fast_trig = R.Resolvable_States/5;
    171c:	ce 01       	movw	r24, r28
    171e:	65 e0       	ldi	r22, 0x05	; 5
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	cd d6       	rcall	.+3482   	; 0x24be <__udivmodhi4>
		else fast_counter = 0;					// Slow movement, reset counter
		enc_last = enc_time;					// Store for next time measurement

		// We have the required number of fast movements, enable FAST mode
		#if ENCODER_RESOLUTION
		if (fast_counter > enc_fast_trig) Status2 |= ENC_FAST;
    1724:	62 17       	cp	r22, r18
    1726:	73 07       	cpc	r23, r19
    1728:	28 f4       	brcc	.+10     	; 0x1734 <encoder_scan+0xd4>
    172a:	80 91 7b 01 	lds	r24, 0x017B
    172e:	80 61       	ori	r24, 0x10	; 16
    1730:	80 93 7b 01 	sts	0x017B, r24
		#else
		if (fast_counter > ENC_FAST_TRIG) Status2 |= ENC_FAST;
		#endif
		#if ENCODER_DIR_SENSE					// Direction change sense.  Used with variable speed feature.
		// If direction has changed, force a drop out of FAST mode
		if (direction != increment)
    1734:	90 91 0c 02 	lds	r25, 0x020C
    1738:	80 91 7b 01 	lds	r24, 0x017B
    173c:	91 17       	cp	r25, r17
    173e:	31 f0       	breq	.+12     	; 0x174c <encoder_scan+0xec>
		{
			if (Status2 & ENC_DIR)	Status2 &= ~ENC_DIR;// Previous change was just a one shot event, clear flag
    1740:	85 ff       	sbrs	r24, 5
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <encoder_scan+0xe8>
    1744:	8f 7d       	andi	r24, 0xDF	; 223
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <encoder_scan+0xf2>
			else Status2 |= ENC_DIR;					// This is the first event in a new direction, set flag
    1748:	80 62       	ori	r24, 0x20	; 32
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <encoder_scan+0xf2>
		}
		else if (Status2 & ENC_DIR)				// Second shot with different direction, 
    174c:	85 ff       	sbrs	r24, 5
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <encoder_scan+0xf6>
		{										// now we take action and drop out of fast mode

			Status2 = Status2 & ~ENC_FAST & ~ENC_DIR;
    1750:	8f 7c       	andi	r24, 0xCF	; 207
    1752:	80 93 7b 01 	sts	0x017B, r24
		}
		
		direction = increment;					// Save encoder direction for next time
    1756:	10 93 0c 02 	sts	0x020C, r17
		#endif

		// When fast mode, multiply the increments by the set MULTIPLY factor
		if (Status2 & ENC_FAST)	increment = increment * ENC_FAST_MULTIPLY;
    175a:	80 91 7b 01 	lds	r24, 0x017B
    175e:	84 ff       	sbrs	r24, 4
    1760:	04 c0       	rjmp	.+8      	; 0x176a <encoder_scan+0x10a>
    1762:	81 2f       	mov	r24, r17
    1764:	64 e6       	ldi	r22, 0x64	; 100
    1766:	77 d6       	rcall	.+3310   	; 0x2456 <__mulqi3>
    1768:	18 2f       	mov	r17, r24

		#elif ENCODER_RESOLUTION
		#if	ENCODER_DIR_REVERSE
		R.Freq[0] -= (int32_t) increment*encoder_resolution;// Add or subtract VFO frequency
		#else
		R.Freq[0] += (int32_t) increment*encoder_resolution;// Add or subtract VFO frequency
    176a:	e1 2e       	mov	r14, r17
    176c:	ff 24       	eor	r15, r15
    176e:	e7 fc       	sbrc	r14, 7
    1770:	f0 94       	com	r15
    1772:	0f 2d       	mov	r16, r15
    1774:	1f 2d       	mov	r17, r15
	#if ENCODER_RESOLUTION
	uint16_t enc_fast_sense = ENC_FAST_SENSE;
	uint16_t enc_fast_trig = ENC_FAST_TRIG;
	#if !ENCODER_CMD_INCR
	uint16_t encoder_resolution;
	encoder_resolution = 8388/R.Resolvable_States;
    1776:	84 ec       	ldi	r24, 0xC4	; 196
    1778:	90 e2       	ldi	r25, 0x20	; 32
    177a:	be 01       	movw	r22, r28
    177c:	a0 d6       	rcall	.+3392   	; 0x24be <__udivmodhi4>

		#elif ENCODER_RESOLUTION
		#if	ENCODER_DIR_REVERSE
		R.Freq[0] -= (int32_t) increment*encoder_resolution;// Add or subtract VFO frequency
		#else
		R.Freq[0] += (int32_t) increment*encoder_resolution;// Add or subtract VFO frequency
    177e:	9b 01       	movw	r18, r22
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	c8 01       	movw	r24, r16
    1786:	b7 01       	movw	r22, r14
    1788:	81 d6       	rcall	.+3330   	; 0x248c <__mulsi3>
    178a:	20 91 1d 01 	lds	r18, 0x011D
    178e:	30 91 1e 01 	lds	r19, 0x011E
    1792:	40 91 1f 01 	lds	r20, 0x011F
    1796:	50 91 20 01 	lds	r21, 0x0120
    179a:	62 0f       	add	r22, r18
    179c:	73 1f       	adc	r23, r19
    179e:	84 1f       	adc	r24, r20
    17a0:	95 1f       	adc	r25, r21
    17a2:	60 93 1d 01 	sts	0x011D, r22
    17a6:	70 93 1e 01 	sts	0x011E, r23
    17aa:	80 93 1f 01 	sts	0x011F, r24
    17ae:	90 93 20 01 	sts	0x0120, r25
	R.Freq[0] += increment*ENC_INCREMENTS;		// Add or subtract VFO frequency
	#endif
	#endif
	#endif

}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	08 95       	ret

000017c4 <pcf8574_byte>:
// 						PCF8574 write out all 8 bits at once
//-----------------------------------------------------------------------------------------
//
// This function writes all 8 bits at once, nothing stored 
void pcf8574_byte(uint8_t i2c_address, uint8_t data)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <pcf8574_byte+0x6>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
	//i2c_queue();						// Wait for I2C port to become free

	I2CSendStart();						// Start the I2C comms
    17ce:	6a 83       	std	Y+2, r22	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	03 df       	rcall	.-506    	; 0x15da <I2CSendStart>
	I2CSendByte(i2c_address<<1);		// Send address of device
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	88 0f       	add	r24, r24
    17d8:	16 df       	rcall	.-468    	; 0x1606 <I2CSendByte>
	I2CSendByte(data);					// Send a byte
    17da:	6a 81       	ldd	r22, Y+2	; 0x02
    17dc:	86 2f       	mov	r24, r22
    17de:	13 df       	rcall	.-474    	; 0x1606 <I2CSendByte>
	I2CSendStop();						// Stop the I2C comms
    17e0:	03 df       	rcall	.-506    	; 0x15e8 <I2CSendStop>

	//i2c_release();						// Release I2C port
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <MoboPCF_clear>:
}

void MoboPCF_clear(uint8_t byte)
{
	// pcf_data_out contains the current output data on the builtin PCF8574 on the Mobo
	pcf_data_out = pcf_data_out & ~byte;			// Clear bits
    17ec:	68 2f       	mov	r22, r24
    17ee:	60 95       	com	r22
    17f0:	80 91 6f 01 	lds	r24, 0x016F
    17f4:	68 23       	and	r22, r24
    17f6:	60 93 6f 01 	sts	0x016F, r22
	pcf8574_byte(R.PCF_I2C_Mobo_addr, pcf_data_out);// Write out to Mobo PCF8574
    17fa:	80 91 05 01 	lds	r24, 0x0105
}
    17fe:	e2 cf       	rjmp	.-60     	; 0x17c4 <pcf8574_byte>

00001800 <MoboPCF_set>:
//-----------------------------------------------------------------------------------------
//
void MoboPCF_set(uint8_t byte)
{
	// pcf_data_out contains the current output data on the builtin PCF8574 on the Mobo
	pcf_data_out = pcf_data_out | byte;				// Set bits
    1800:	60 91 6f 01 	lds	r22, 0x016F
    1804:	68 2b       	or	r22, r24
    1806:	60 93 6f 01 	sts	0x016F, r22
	pcf8574_byte(R.PCF_I2C_Mobo_addr, pcf_data_out);// Write out to Mobo PCF8574
    180a:	80 91 05 01 	lds	r24, 0x0105
}
    180e:	da cf       	rjmp	.-76     	; 0x17c4 <pcf8574_byte>

00001810 <pcf8574_read>:
// 							PCF8574 Read 8 bits
//-----------------------------------------------------------------------------------------
//
// This function reads all 8 input bits from the PCF8574
uint8_t pcf8574_read(uint8_t i2c_address)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	uint8_t data_received;

	//i2c_queue();						// Wait for I2C port to become free

	I2CSendStart();						// Start the I2C comms
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	de de       	rcall	.-580    	; 0x15da <I2CSendStart>
	I2CSendByte((i2c_address<<1)|0x01);	// Send "receive" address of device
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	88 0f       	add	r24, r24
    1822:	81 60       	ori	r24, 0x01	; 1
    1824:	f0 de       	rcall	.-544    	; 0x1606 <I2CSendByte>
	data_received = I2CReceiveByte();	// Receve a byte
    1826:	09 df       	rcall	.-494    	; 0x163a <I2CReceiveByte>
	I2CSend1();							// Last byte
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	e8 de       	rcall	.-560    	; 0x15fc <I2CSend1>
	I2CSendStop();						// Stop the I2C comms
    182c:	dd de       	rcall	.-582    	; 0x15e8 <I2CSendStop>

	//i2c_release();						// Release I2C port

	return data_received;
}
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <tmp100>:
//
// Returned temperature reading can be converted to degrees C, by using the formula:
// temp = 128.0 / 32768 * tmp100().i;
//
void tmp100(uint8_t i2c_address)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
	//i2c_queue();						// Wait for I2C port to become free

	I2CSendStart();						// Start the I2C comms
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	ca de       	rcall	.-620    	; 0x15da <I2CSendStart>
	I2CSendByte((i2c_address<<1)|0x01);	// Send "receive" address of device
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	88 0f       	add	r24, r24
    184a:	81 60       	ori	r24, 0x01	; 1
    184c:	dc de       	rcall	.-584    	; 0x1606 <I2CSendByte>

	tmp100_data.b1 = I2CReceiveByte();	// Receve high byte
    184e:	f5 de       	rcall	.-534    	; 0x163a <I2CReceiveByte>
    1850:	80 93 70 02 	sts	0x0270, r24
	I2CSend0();
    1854:	ce de       	rcall	.-612    	; 0x15f2 <I2CSend0>
	tmp100_data.b0 = I2CReceiveByte();	// Receve low byte
    1856:	f1 de       	rcall	.-542    	; 0x163a <I2CReceiveByte>
    1858:	80 93 6f 02 	sts	0x026F, r24
	I2CSend1();							// Last byte
    185c:	cf de       	rcall	.-610    	; 0x15fc <I2CSend1>
	I2CSendStop();						// Stop the I2C comms
    185e:	c4 de       	rcall	.-632    	; 0x15e8 <I2CSendStop>

	//i2c_release();						// Release I2C port
}
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <ad5301>:
//-----------------------------------------------------------------------------------------
// 							Write data to the AD5301 DAC
//-----------------------------------------------------------------------------------------
//
void ad5301(uint8_t i2c_address, uint8_t value)
{
    1868:	1f 93       	push	r17
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	0f 92       	push	r0
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	16 2f       	mov	r17, r22
	data1_out = (value & 0xf0)>>4;		// Move upper 4 bits into lower 4 bits
	data2_out = (value & 0x0f)<<4;		// Move lower 4 bits into upper 4 bits

	//i2c_queue();						// Wait for I2C port to become free

	I2CSendStart();						// Start the I2C comms
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	b0 de       	rcall	.-672    	; 0x15da <I2CSendStart>
	I2CSendByte(i2c_address<<1);		// Send address of device
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	88 0f       	add	r24, r24
    187e:	c3 de       	rcall	.-634    	; 0x1606 <I2CSendByte>
	I2CSendByte(data1_out);				// Send a byte
    1880:	81 2f       	mov	r24, r17
    1882:	82 95       	swap	r24
    1884:	8f 70       	andi	r24, 0x0F	; 15
    1886:	bf de       	rcall	.-642    	; 0x1606 <I2CSendByte>
	I2CSendByte(data2_out);				// Send a byte
    1888:	81 2f       	mov	r24, r17
    188a:	82 95       	swap	r24
    188c:	80 7f       	andi	r24, 0xF0	; 240
    188e:	bb de       	rcall	.-650    	; 0x1606 <I2CSendByte>
	I2CSendStop();						// Stop the I2C comms
    1890:	ab de       	rcall	.-682    	; 0x15e8 <I2CSendStop>

	//i2c_release();						// Release I2C port
}
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	1f 91       	pop	r17
    189a:	08 95       	ret

0000189c <ad7991_poll>:
//-----------------------------------------------------------------------------------------
//
// This function reads all four A/D inputs and makes the data available in four
// global variables, ad7991_adc[4], set up in Mobo.c
void ad7991_poll(uint8_t i2c_address)
{
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	1f 93       	push	r17
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	0f 92       	push	r0
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
	//
	sint16_t ad7991;

	//i2c_queue();						// Wait for I2C port to become free

	I2CSendStart();						// Start the I2C comms
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	95 de       	rcall	.-726    	; 0x15da <I2CSendStart>
	I2CSendByte((i2c_address<<1)|0x01);	// Send address of device
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	88 0f       	add	r24, r24
    18b4:	81 60       	ori	r24, 0x01	; 1
    18b6:	a7 de       	rcall	.-690    	; 0x1606 <I2CSendByte>
	//I2C_SCL_HI;
	//_delay_us(10);;					// Give device some time to convert

	// Each A/D value consists of two bytes, whereas the first 4 bits contain the A/D address
	// and the rest contains a 12 bit value.  Grab value and left adjust:
	for (int i=0;i<4;i++)
    18b8:	ee 24       	eor	r14, r14
    18ba:	ff 24       	eor	r15, r15
	{
		ad7991.b1 = I2CReceiveByte();	// Receve high byte
    18bc:	be de       	rcall	.-644    	; 0x163a <I2CReceiveByte>
    18be:	18 2f       	mov	r17, r24
		I2CSend0();						// Send ack
    18c0:	98 de       	rcall	.-720    	; 0x15f2 <I2CSend0>
		ad7991.b0 = I2CReceiveByte();	// Receve low byte
    18c2:	bb de       	rcall	.-650    	; 0x163a <I2CReceiveByte>
		if (i < 3) I2CSend0();			// If not last byte, send ack
    18c4:	93 e0       	ldi	r25, 0x03	; 3
    18c6:	e9 16       	cp	r14, r25
    18c8:	f1 04       	cpc	r15, r1
    18ca:	19 f0       	breq	.+6      	; 0x18d2 <ad7991_poll+0x36>
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	91 de       	rcall	.-734    	; 0x15f2 <I2CSend0>
    18d0:	89 81       	ldd	r24, Y+1	; 0x01

		// Write left adjusted into global var uint16_t	ad7991_adc[4]
		if ((ad7991.b1>>4) < 4)			// If data not garbled
    18d2:	e1 2f       	mov	r30, r17
    18d4:	e2 95       	swap	r30
    18d6:	ef 70       	andi	r30, 0x0F	; 15
    18d8:	e4 30       	cpi	r30, 0x04	; 4
    18da:	98 f4       	brcc	.+38     	; 0x1902 <ad7991_poll+0x66>
		{
			ad7991_adc[ad7991.b1>>4].b1 = 
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	eb 59       	subi	r30, 0x9B	; 155
    18e4:	fd 4f       	sbci	r31, 0xFD	; 253
				((ad7991.b1 & 0x0f)<<4) + ((ad7991.b0 & 0xf0)>>4);
    18e6:	12 95       	swap	r17
    18e8:	10 7f       	andi	r17, 0xF0	; 240
    18ea:	98 2f       	mov	r25, r24
    18ec:	92 95       	swap	r25
    18ee:	9f 70       	andi	r25, 0x0F	; 15
		if (i < 3) I2CSend0();			// If not last byte, send ack

		// Write left adjusted into global var uint16_t	ad7991_adc[4]
		if ((ad7991.b1>>4) < 4)			// If data not garbled
		{
			ad7991_adc[ad7991.b1>>4].b1 = 
    18f0:	19 0f       	add	r17, r25
    18f2:	11 83       	std	Z+1, r17	; 0x01
				((ad7991.b1 & 0x0f)<<4) + ((ad7991.b0 & 0xf0)>>4);
			ad7991_adc[ad7991.b1>>4].b0 = (ad7991.b0 & 0x0f)<<4;
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	24 e0       	ldi	r18, 0x04	; 4
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	2a 95       	dec	r18
    18fe:	e1 f7       	brne	.-8      	; 0x18f8 <ad7991_poll+0x5c>
    1900:	80 83       	st	Z, r24
	//I2C_SCL_HI;
	//_delay_us(10);;					// Give device some time to convert

	// Each A/D value consists of two bytes, whereas the first 4 bits contain the A/D address
	// and the rest contains a 12 bit value.  Grab value and left adjust:
	for (int i=0;i<4;i++)
    1902:	08 94       	sec
    1904:	e1 1c       	adc	r14, r1
    1906:	f1 1c       	adc	r15, r1
    1908:	e4 e0       	ldi	r30, 0x04	; 4
    190a:	ee 16       	cp	r14, r30
    190c:	f1 04       	cpc	r15, r1
    190e:	b1 f6       	brne	.-84     	; 0x18bc <ad7991_poll+0x20>
			ad7991_adc[ad7991.b1>>4].b1 = 
				((ad7991.b1 & 0x0f)<<4) + ((ad7991.b0 & 0xf0)>>4);
			ad7991_adc[ad7991.b1>>4].b0 = (ad7991.b0 & 0x0f)<<4;
		}
	}
	I2CSend1();							// 1 Last byte
    1910:	75 de       	rcall	.-790    	; 0x15fc <I2CSend1>
	I2CSendStop();						// Stop the I2C comms
    1912:	6a de       	rcall	.-812    	; 0x15e8 <I2CSendStop>

	//i2c_release();						// Release I2C port
}	
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	1f 91       	pop	r17
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	08 95       	ret

00001922 <lcd_putchar_P>:
// A small trick necessary for not to overrun what little SRAM we have left
// (similar function in lcd.c, but it compiles 6 bytes leaner if placed here)
//-----------------------------------------------------------------------------
//
void lcd_putchar_P(const char *addr)
{
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	ec 01       	movw	r28, r24
	uint8_t c;

	while ((c = pgm_read_byte(addr++)))
    1928:	01 c0       	rjmp	.+2      	; 0x192c <lcd_putchar_P+0xa>
		lcd_data(c);
    192a:	aa d9       	rcall	.-3244   	; 0xc80 <lcd_data>
    192c:	fe 01       	movw	r30, r28
//
void lcd_putchar_P(const char *addr)
{
	uint8_t c;

	while ((c = pgm_read_byte(addr++)))
    192e:	21 96       	adiw	r28, 0x01	; 1
    1930:	84 91       	lpm	r24, Z+
    1932:	88 23       	and	r24, r24
    1934:	d1 f7       	brne	.-12     	; 0x192a <lcd_putchar_P+0x8>
		lcd_data(c);
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <lcd_display_freq_and_filters>:
//-------------------------------------------------------
// Display Frequency and Filters
//-------------------------------------------------------
//
void lcd_display_freq_and_filters(void)
{
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
	uint32_t dispFrq;
	uint16_t fMHz;
	uint32_t fHz;

	lcd_gotoxy(1,0);								// Second char, first line
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	a3 d9       	rcall	.-3258   	; 0xc90 <lcd_gotoxy>
		//frq = frq + R.LCD_RX_Offset;
		R.Freq[0] = R.Freq[0] + R.LCD_RX_Offset;
	}
	#endif

	dispFrq = (double) R.Freq[0] * 1000000.0 / _2(23);	// R.Freq / 2^21 / 4 = Lo frequency
    194a:	60 91 1d 01 	lds	r22, 0x011D
    194e:	70 91 1e 01 	lds	r23, 0x011E
    1952:	80 91 1f 01 	lds	r24, 0x011F
    1956:	90 91 20 01 	lds	r25, 0x0120
    195a:	84 d4       	rcall	.+2312   	; 0x2264 <__floatunsisf>
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	34 e2       	ldi	r19, 0x24	; 36
    1960:	44 e7       	ldi	r20, 0x74	; 116
    1962:	59 e4       	ldi	r21, 0x49	; 73
    1964:	e5 d4       	rcall	.+2506   	; 0x2330 <__mulsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	54 e3       	ldi	r21, 0x34	; 52
    196e:	e0 d4       	rcall	.+2496   	; 0x2330 <__mulsf3>
    1970:	4d d4       	rcall	.+2202   	; 0x220c <__fixunssfsi>
    1972:	06 2f       	mov	r16, r22
    1974:	17 2f       	mov	r17, r23
    1976:	28 2f       	mov	r18, r24
    1978:	39 2f       	mov	r19, r25

	#if PSDR_IQ_OFFSET68							// Display a fixed frequency offset during RX only.
	if(!(Status1 & TX_FLAG))
    197a:	80 91 7a 01 	lds	r24, 0x017A
    197e:	80 fd       	sbrc	r24, 0
    1980:	10 c0       	rjmp	.+32     	; 0x19a2 <lcd_display_freq_and_filters+0x66>
	{
		dispFrq = dispFrq + R.LCD_RX_Offset * 1000; // 1000.0 * _2(23);
    1982:	80 91 6b 01 	lds	r24, 0x016B
    1986:	99 27       	eor	r25, r25
    1988:	87 fd       	sbrc	r24, 7
    198a:	90 95       	com	r25
    198c:	68 ee       	ldi	r22, 0xE8	; 232
    198e:	73 e0       	ldi	r23, 0x03	; 3
    1990:	6b d5       	rcall	.+2774   	; 0x2468 <__mulhi3>
    1992:	aa 27       	eor	r26, r26
    1994:	97 fd       	sbrc	r25, 7
    1996:	a0 95       	com	r26
    1998:	ba 2f       	mov	r27, r26
    199a:	08 0f       	add	r16, r24
    199c:	19 1f       	adc	r17, r25
    199e:	2a 1f       	adc	r18, r26
    19a0:	3b 1f       	adc	r19, r27
	#endif

	fMHz = dispFrq / 1000000;
	fHz = dispFrq % 1000000;

	rprintf("X%3u.%06luMHz F%x-%x", fMHz,fHz,selectedFilters[0],selectedFilters[1]);
    19a2:	8d b7       	in	r24, 0x3d	; 61
    19a4:	9e b7       	in	r25, 0x3e	; 62
    19a6:	0d 97       	sbiw	r24, 0x0d	; 13
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	9e bf       	out	0x3e, r25	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	8d bf       	out	0x3d, r24	; 61
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	21 96       	adiw	r28, 0x01	; 1
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	ed b7       	in	r30, 0x3d	; 61
    19bc:	fe b7       	in	r31, 0x3e	; 62
    19be:	81 83       	std	Z+1, r24	; 0x01
    19c0:	8f e5       	ldi	r24, 0x5F	; 95
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
	{
		dispFrq = dispFrq + R.LCD_RX_Offset * 1000; // 1000.0 * _2(23);
	}
	#endif

	fMHz = dispFrq / 1000000;
    19c8:	c9 01       	movw	r24, r18
    19ca:	b8 01       	movw	r22, r16
    19cc:	20 e4       	ldi	r18, 0x40	; 64
    19ce:	32 e4       	ldi	r19, 0x42	; 66
    19d0:	4f e0       	ldi	r20, 0x0F	; 15
    19d2:	50 e0       	ldi	r21, 0x00	; 0
    19d4:	88 d5       	rcall	.+2832   	; 0x24e6 <__udivmodsi4>
    19d6:	3c 83       	std	Y+4, r19	; 0x04
    19d8:	2b 83       	std	Y+3, r18	; 0x03
	fHz = dispFrq % 1000000;

	rprintf("X%3u.%06luMHz F%x-%x", fMHz,fHz,selectedFilters[0],selectedFilters[1]);
    19da:	6d 83       	std	Y+5, r22	; 0x05
    19dc:	7e 83       	std	Y+6, r23	; 0x06
    19de:	8f 83       	std	Y+7, r24	; 0x07
    19e0:	98 87       	std	Y+8, r25	; 0x08
    19e2:	80 91 41 02 	lds	r24, 0x0241
    19e6:	89 87       	std	Y+9, r24	; 0x09
    19e8:	1a 86       	std	Y+10, r1	; 0x0a
    19ea:	80 91 42 02 	lds	r24, 0x0242
    19ee:	8b 87       	std	Y+11, r24	; 0x0b
    19f0:	1c 86       	std	Y+12, r1	; 0x0c
    19f2:	b4 d9       	rcall	.-3224   	; 0xd5c <rprintf2RamRom>
    19f4:	8d b7       	in	r24, 0x3d	; 61
    19f6:	9e b7       	in	r25, 0x3e	; 62
    19f8:	0d 96       	adiw	r24, 0x0d	; 13
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	9e bf       	out	0x3e, r25	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	8d bf       	out	0x3d, r24	; 61
}
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <lcd_display_P_SWR_V_C_T>:
//-------------------------------------------------------
// Display Power, SWR, Voltage, Current and Temperature
//-------------------------------------------------------
//
void lcd_display_P_SWR_V_C_T(void)
{
    1a0e:	cf 92       	push	r12
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <lcd_display_P_SWR_V_C_T+0x12>
    1a20:	0f 92       	push	r0
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
	#if PWR_PEAK_ENVELOPE							//PEP measurement. Highest value in buffer shown
	if (R.PEP_samples > PEP_MAX_PERIOD) R.PEP_samples = PEP_MAX_PERIOD;// Safety measure
    1a26:	80 91 68 01 	lds	r24, 0x0168
    1a2a:	85 31       	cpi	r24, 0x15	; 21
    1a2c:	18 f0       	brcs	.+6      	; 0x1a34 <lcd_display_P_SWR_V_C_T+0x26>
    1a2e:	84 e1       	ldi	r24, 0x14	; 20
    1a30:	80 93 68 01 	sts	0x0168, r24
	#endif

	lcd_gotoxy(0,1);								// First char, second line
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	2b d9       	rcall	.-3498   	; 0xc90 <lcd_gotoxy>
	#endif

	// Display "  Voltage and temperature" in second line
	#if DISP_FAHRENHEIT								// Display temperature in Fahrenheit
													// (threshold still set in deg C)
	rprintf("%3uF", tmp_F);
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <lcd_display_P_SWR_V_C_T+0x2e>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <lcd_display_P_SWR_V_C_T+0x30>
    1a3e:	0f 92       	push	r0
    1a40:	ed b7       	in	r30, 0x3d	; 61
    1a42:	fe b7       	in	r31, 0x3e	; 62
    1a44:	31 96       	adiw	r30, 0x01	; 1
    1a46:	01 e0       	ldi	r16, 0x01	; 1
    1a48:	ad b7       	in	r26, 0x3d	; 61
    1a4a:	be b7       	in	r27, 0x3e	; 62
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	0c 93       	st	X, r16
    1a50:	8a e5       	ldi	r24, 0x5A	; 90
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	92 83       	std	Z+2, r25	; 0x02
    1a56:	81 83       	std	Z+1, r24	; 0x01

	lcd_gotoxy(0,1);								// First char, second line

	#if DISP_FAHRENHEIT								// Display temperature in Fahrenheit
	uint16_t tmp_F;									// (threshold still set in deg C)
	tmp_F = ((tmp100_data.w>>7) * 9)/10 + 32;
    1a58:	80 91 6f 02 	lds	r24, 0x026F
    1a5c:	90 91 70 02 	lds	r25, 0x0270
    1a60:	88 0f       	add	r24, r24
    1a62:	89 2f       	mov	r24, r25
    1a64:	88 1f       	adc	r24, r24
    1a66:	99 0b       	sbc	r25, r25
    1a68:	91 95       	neg	r25
    1a6a:	69 e0       	ldi	r22, 0x09	; 9
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	fc d4       	rcall	.+2552   	; 0x2468 <__mulhi3>
    1a70:	4a e0       	ldi	r20, 0x0A	; 10
    1a72:	c4 2e       	mov	r12, r20
    1a74:	d1 2c       	mov	r13, r1
    1a76:	b6 01       	movw	r22, r12
    1a78:	22 d5       	rcall	.+2628   	; 0x24be <__udivmodhi4>
    1a7a:	60 5e       	subi	r22, 0xE0	; 224
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
	#endif

	// Display "  Voltage and temperature" in second line
	#if DISP_FAHRENHEIT								// Display temperature in Fahrenheit
													// (threshold still set in deg C)
	rprintf("%3uF", tmp_F);
    1a7e:	74 83       	std	Z+4, r23	; 0x04
    1a80:	63 83       	std	Z+3, r22	; 0x03
    1a82:	6c d9       	rcall	.-3368   	; 0xd5c <rprintf2RamRom>
	rprintf("%3d", tmp_C);
	lcd_data(0xdf); lcd_data('C');
	#endif
	
	// Prep Voltage readout.  Max voltage = 15.6V (5V * 14.7k/4.7k)
	uint16_t vdd_tenths = ((uint32_t) ad7991_adc[AD7991_PSU_VOLTAGE].w * 156) / 0xfff0;
    1a84:	60 91 6b 02 	lds	r22, 0x026B
    1a88:	70 91 6c 02 	lds	r23, 0x026C
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	2c e9       	ldi	r18, 0x9C	; 156
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	f9 d4       	rcall	.+2546   	; 0x248c <__mulsi3>
    1a9a:	20 ef       	ldi	r18, 0xF0	; 240
    1a9c:	3f ef       	ldi	r19, 0xFF	; 255
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	21 d5       	rcall	.+2626   	; 0x24e6 <__udivmodsi4>
    1aa4:	79 01       	movw	r14, r18
	uint16_t vdd = vdd_tenths / 10;
	vdd_tenths = vdd_tenths % 10;
	
	lcd_gotoxy(7,1);
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	87 e0       	ldi	r24, 0x07	; 7
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	ed d8       	rcall	.-3622   	; 0xc90 <lcd_gotoxy>
	rprintf("%2u.%1uV", vdd, vdd_tenths);
    1ab6:	2d b7       	in	r18, 0x3d	; 61
    1ab8:	3e b7       	in	r19, 0x3e	; 62
    1aba:	27 50       	subi	r18, 0x07	; 7
    1abc:	30 40       	sbci	r19, 0x00	; 0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	3e bf       	out	0x3e, r19	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	2d bf       	out	0x3d, r18	; 61
    1ac8:	ed b7       	in	r30, 0x3d	; 61
    1aca:	fe b7       	in	r31, 0x3e	; 62
    1acc:	31 96       	adiw	r30, 0x01	; 1
    1ace:	ad b7       	in	r26, 0x3d	; 61
    1ad0:	be b7       	in	r27, 0x3e	; 62
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	0c 93       	st	X, r16
    1ad6:	81 e5       	ldi	r24, 0x51	; 81
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	92 83       	std	Z+2, r25	; 0x02
    1adc:	81 83       	std	Z+1, r24	; 0x01
	lcd_data(0xdf); lcd_data('C');
	#endif
	
	// Prep Voltage readout.  Max voltage = 15.6V (5V * 14.7k/4.7k)
	uint16_t vdd_tenths = ((uint32_t) ad7991_adc[AD7991_PSU_VOLTAGE].w * 156) / 0xfff0;
	uint16_t vdd = vdd_tenths / 10;
    1ade:	c7 01       	movw	r24, r14
    1ae0:	b6 01       	movw	r22, r12
    1ae2:	ed d4       	rcall	.+2522   	; 0x24be <__udivmodhi4>
	vdd_tenths = vdd_tenths % 10;
	
	lcd_gotoxy(7,1);
	rprintf("%2u.%1uV", vdd, vdd_tenths);
    1ae4:	74 83       	std	Z+4, r23	; 0x04
    1ae6:	63 83       	std	Z+3, r22	; 0x03
    1ae8:	96 83       	std	Z+6, r25	; 0x06
    1aea:	85 83       	std	Z+5, r24	; 0x05
    1aec:	37 d9       	rcall	.-3474   	; 0xd5c <rprintf2RamRom>
	//
	//-------------------------------------------------------
	// During TX, Display PA current in second line of LCD
	//-------------------------------------------------------
	//
	if (Status1 & (PA_CAL | TX_FLAG))
    1aee:	80 91 7a 01 	lds	r24, 0x017A
    1af2:	81 74       	andi	r24, 0x41	; 65
    1af4:	2d b7       	in	r18, 0x3d	; 61
    1af6:	3e b7       	in	r19, 0x3e	; 62
    1af8:	29 5f       	subi	r18, 0xF9	; 249
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	3e bf       	out	0x3e, r19	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	2d bf       	out	0x3d, r18	; 61
    1b06:	88 23       	and	r24, r24
    1b08:	89 f1       	breq	.+98     	; 0x1b6c <lcd_display_P_SWR_V_C_T+0x15e>
	{
		// Fetch and normalize PA current
		uint16_t idd_ca = ad7991_adc[AD7991_PA_CURRENT].w / 262;
    1b0a:	80 91 65 02 	lds	r24, 0x0265
    1b0e:	90 91 66 02 	lds	r25, 0x0266
    1b12:	66 e0       	ldi	r22, 0x06	; 6
    1b14:	71 e0       	ldi	r23, 0x01	; 1
    1b16:	d3 d4       	rcall	.+2470   	; 0x24be <__udivmodhi4>
    1b18:	7b 01       	movw	r14, r22
		uint16_t idd = idd_ca/100; idd_ca = idd_ca%100;
	
		lcd_gotoxy(13,1);							// Second line, 13th position
    1b1a:	8d e0       	ldi	r24, 0x0D	; 13
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	b8 d8       	rcall	.-3728   	; 0xc90 <lcd_gotoxy>
		rprintf("%u.%02uA", idd, idd_ca);			// Display current while in transmit
    1b20:	8d b7       	in	r24, 0x3d	; 61
    1b22:	9e b7       	in	r25, 0x3e	; 62
    1b24:	07 97       	sbiw	r24, 0x07	; 7
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	9e bf       	out	0x3e, r25	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	8d bf       	out	0x3d, r24	; 61
    1b30:	ed b7       	in	r30, 0x3d	; 61
    1b32:	fe b7       	in	r31, 0x3e	; 62
    1b34:	31 96       	adiw	r30, 0x01	; 1
    1b36:	ad b7       	in	r26, 0x3d	; 61
    1b38:	be b7       	in	r27, 0x3e	; 62
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	0c 93       	st	X, r16
    1b3e:	88 e4       	ldi	r24, 0x48	; 72
    1b40:	91 e0       	ldi	r25, 0x01	; 1
    1b42:	92 83       	std	Z+2, r25	; 0x02
    1b44:	81 83       	std	Z+1, r24	; 0x01
	//
	if (Status1 & (PA_CAL | TX_FLAG))
	{
		// Fetch and normalize PA current
		uint16_t idd_ca = ad7991_adc[AD7991_PA_CURRENT].w / 262;
		uint16_t idd = idd_ca/100; idd_ca = idd_ca%100;
    1b46:	c7 01       	movw	r24, r14
    1b48:	64 e6       	ldi	r22, 0x64	; 100
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	b8 d4       	rcall	.+2416   	; 0x24be <__udivmodhi4>
	
		lcd_gotoxy(13,1);							// Second line, 13th position
		rprintf("%u.%02uA", idd, idd_ca);			// Display current while in transmit
    1b4e:	74 83       	std	Z+4, r23	; 0x04
    1b50:	63 83       	std	Z+3, r22	; 0x03
    1b52:	96 83       	std	Z+6, r25	; 0x06
    1b54:	85 83       	std	Z+5, r24	; 0x05
    1b56:	02 d9       	rcall	.-3580   	; 0xd5c <rprintf2RamRom>
    1b58:	2d b7       	in	r18, 0x3d	; 61
    1b5a:	3e b7       	in	r19, 0x3e	; 62
    1b5c:	29 5f       	subi	r18, 0xF9	; 249
    1b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	3e bf       	out	0x3e, r19	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	2d bf       	out	0x3d, r18	; 61
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <lcd_display_P_SWR_V_C_T+0x164>
	// Display alternate text during RX in second line of LCD
	//-------------------------------------------------------
	//
	else
	{
		lcd_putchar_P(PSTR("  Bias:"));				// Print string from flash rom
    1b6c:	80 e4       	ldi	r24, 0x40	; 64
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	d8 de       	rcall	.-592    	; 0x1922 <lcd_putchar_P>
	//
	//-------------------------------------------------------
	// Display Bias setting in second line of LCD
	//-------------------------------------------------------
	//
	const char bias[]= {'R','L','H'};
    1b72:	de 01       	movw	r26, r28
    1b74:	11 96       	adiw	r26, 0x01	; 1
    1b76:	e6 e7       	ldi	r30, 0x76	; 118
    1b78:	f1 e0       	ldi	r31, 0x01	; 1
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	01 90       	ld	r0, Z+
    1b7e:	0d 92       	st	X+, r0
    1b80:	81 50       	subi	r24, 0x01	; 1
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <lcd_display_P_SWR_V_C_T+0x16e>
	lcd_gotoxy(19,1);								// Second line, 19th position
    1b84:	83 e1       	ldi	r24, 0x13	; 19
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	83 d8       	rcall	.-3834   	; 0xc90 <lcd_gotoxy>
	lcd_data(bias[biasInit]);						// Print Bias status 'R'educed
    1b8a:	80 91 7c 01 	lds	r24, 0x017C
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e8 0f       	add	r30, r24
    1b92:	f1 1d       	adc	r31, r1
    1b94:	81 81       	ldd	r24, Z+1	; 0x01
    1b96:	74 d8       	rcall	.-3864   	; 0xc80 <lcd_data>
													// 'Low' or 'H'igh

	//-------------------------------------------------------
	// Display Stuff in third and fourth line of the LCD		
	//-------------------------------------------------------
	lcd_gotoxy(0,3);								// Fourth line, first position	
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	63 e0       	ldi	r22, 0x03	; 3
    1b9c:	79 d8       	rcall	.-3854   	; 0xc90 <lcd_gotoxy>
	//--------------------------------------------
	// Display a PA thermal runaway situation		
	//--------------------------------------------
	if(Status1 & TMP_ALARM)							// Thermal runaway, TX shutdown
    1b9e:	80 91 7a 01 	lds	r24, 0x017A
    1ba2:	83 ff       	sbrs	r24, 3
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <lcd_display_P_SWR_V_C_T+0x19e>
	{
		lcd_putchar_P(PSTR("Temperature Shutdown"));// A trick to print string from flash rom
    1ba6:	8b e2       	ldi	r24, 0x2B	; 43
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <lcd_display_P_SWR_V_C_T+0x1a6>
	//
	//-------------------------------------------------------
	// Display PA Bias tune indication
	//-------------------------------------------------------
	//
	else if(Status1 & PA_CAL)						// PA bias cal in progress flags
    1bac:	86 ff       	sbrs	r24, 6
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <lcd_display_P_SWR_V_C_T+0x1aa>
	{
		lcd_putchar_P(PSTR("PA Bias Calibrate"));	// Print string from flash rom rather than from SRAM
    1bb0:	89 e1       	ldi	r24, 0x19	; 25
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	b6 de       	rcall	.-660    	; 0x1922 <lcd_putchar_P>
    1bb6:	d5 c0       	rjmp	.+426    	; 0x1d62 <lcd_display_P_SWR_V_C_T+0x354>
	//
	//-------------------------------------------------------
	// Display stuff while in Transmit "TX" mode
	//-------------------------------------------------------
	//
	else if(Status1 & TX_FLAG)
    1bb8:	80 ff       	sbrs	r24, 0
    1bba:	d3 c0       	rjmp	.+422    	; 0x1d62 <lcd_display_P_SWR_V_C_T+0x354>
		//
		//-------------------------------------------------------
		// Power Output Bargraph in third line
		//-------------------------------------------------------
		//
		lcd_gotoxy(0,2);							// Third line
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	62 e0       	ldi	r22, 0x02	; 2
    1bc0:	67 d8       	rcall	.-3890   	; 0xc90 <lcd_gotoxy>
		uint16_t pow_tot, pow, pow_mw;

		// Prepare Power readout
		pow_tot = measured_Power(ad7991_adc[AD7991_POWER_OUT].w);// Power in mW (max 65535mW)
    1bc2:	80 91 67 02 	lds	r24, 0x0267
    1bc6:	90 91 68 02 	lds	r25, 0x0268
    1bca:	60 d1       	rcall	.+704    	; 0x1e8c <measured_Power>

		#if PWR_PEAK_ENVELOPE						//PEP measurement. Highest value in buffer shown
		static uint8_t i = 0;

		#if	PWR_PEP_ADJUST							// Option to adjust the number of samples in PEP measurement
		pow_avg[i] = pow_tot;						// Store value in ringbuffer
    1bcc:	20 91 3c 02 	lds	r18, 0x023C
    1bd0:	e2 2f       	mov	r30, r18
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	ec 5e       	subi	r30, 0xEC	; 236
    1bda:	fd 4f       	sbci	r31, 0xFD	; 253
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
		i++;
    1be0:	2f 5f       	subi	r18, 0xFF	; 255
    1be2:	20 93 3c 02 	sts	0x023C, r18
		if (i >= R.PEP_samples) i = 0;
    1be6:	80 91 68 01 	lds	r24, 0x0168
    1bea:	28 17       	cp	r18, r24
    1bec:	10 f0       	brcs	.+4      	; 0x1bf2 <lcd_display_P_SWR_V_C_T+0x1e4>
    1bee:	10 92 3c 02 	sts	0x023C, r1
    1bf2:	e4 e1       	ldi	r30, 0x14	; 20
    1bf4:	f2 e0       	ldi	r31, 0x02	; 2
//
//-------------------------------------------------------
// Display Power, SWR, Voltage, Current and Temperature
//-------------------------------------------------------
//
void lcd_display_P_SWR_V_C_T(void)
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	8e 0f       	add	r24, r30
    1bfe:	9f 1f       	adc	r25, r31
		#if	PWR_PEP_ADJUST							// Option to adjust the number of samples in PEP measurement
		pow_avg[i] = pow_tot;						// Store value in ringbuffer
		i++;
		if (i >= R.PEP_samples) i = 0;

		pow_tot = 0;
    1c00:	00 e0       	ldi	r16, 0x00	; 0
    1c02:	10 e0       	ldi	r17, 0x00	; 0
		for (uint8_t j = 0; j < R.PEP_samples; j++)	// Retrieve the largest value out of the measured window
    1c04:	06 c0       	rjmp	.+12     	; 0x1c12 <lcd_display_P_SWR_V_C_T+0x204>
		{
			if (pow_avg[j] > pow_tot) pow_tot = pow_avg[j];
    1c06:	21 91       	ld	r18, Z+
    1c08:	31 91       	ld	r19, Z+
    1c0a:	02 17       	cp	r16, r18
    1c0c:	13 07       	cpc	r17, r19
    1c0e:	08 f4       	brcc	.+2      	; 0x1c12 <lcd_display_P_SWR_V_C_T+0x204>
    1c10:	89 01       	movw	r16, r18
		pow_avg[i] = pow_tot;						// Store value in ringbuffer
		i++;
		if (i >= R.PEP_samples) i = 0;

		pow_tot = 0;
		for (uint8_t j = 0; j < R.PEP_samples; j++)	// Retrieve the largest value out of the measured window
    1c12:	e8 17       	cp	r30, r24
    1c14:	f9 07       	cpc	r31, r25
    1c16:	b9 f7       	brne	.-18     	; 0x1c06 <lcd_display_P_SWR_V_C_T+0x1f8>
		}
		#endif
		#endif

		// progress, maxprogress, len
		lcdProgressBar(pow_tot/100, R.PWR_fullscale*10, 12);
    1c18:	84 e6       	ldi	r24, 0x64	; 100
    1c1a:	e8 2e       	mov	r14, r24
    1c1c:	f1 2c       	mov	r15, r1
    1c1e:	c8 01       	movw	r24, r16
    1c20:	b7 01       	movw	r22, r14
    1c22:	4d d4       	rcall	.+2202   	; 0x24be <__udivmodhi4>
    1c24:	9b 01       	movw	r18, r22
    1c26:	80 91 66 01 	lds	r24, 0x0166
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	6a e0       	ldi	r22, 0x0A	; 10
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	1b d4       	rcall	.+2102   	; 0x2468 <__mulhi3>
    1c32:	bc 01       	movw	r22, r24
    1c34:	c9 01       	movw	r24, r18
    1c36:	4c e0       	ldi	r20, 0x0C	; 12
    1c38:	98 d2       	rcall	.+1328   	; 0x216a <lcdProgressBar>

		pow = pow_tot / 1000; 						// Watts
		pow_mw = pow_tot % 1000;					// milliWatts

		rprintf("P%2u.%03uW", pow, pow_mw);
    1c3a:	8d b7       	in	r24, 0x3d	; 61
    1c3c:	9e b7       	in	r25, 0x3e	; 62
    1c3e:	07 97       	sbiw	r24, 0x07	; 7
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	9e bf       	out	0x3e, r25	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	8d bf       	out	0x3d, r24	; 61
    1c4a:	ed b7       	in	r30, 0x3d	; 61
    1c4c:	fe b7       	in	r31, 0x3e	; 62
    1c4e:	31 96       	adiw	r30, 0x01	; 1
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	ad b7       	in	r26, 0x3d	; 61
    1c54:	be b7       	in	r27, 0x3e	; 62
    1c56:	11 96       	adiw	r26, 0x01	; 1
    1c58:	8c 93       	st	X, r24
    1c5a:	8e e0       	ldi	r24, 0x0E	; 14
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	92 83       	std	Z+2, r25	; 0x02
    1c60:	81 83       	std	Z+1, r24	; 0x01
		#endif

		// progress, maxprogress, len
		lcdProgressBar(pow_tot/100, R.PWR_fullscale*10, 12);

		pow = pow_tot / 1000; 						// Watts
    1c62:	c8 01       	movw	r24, r16
    1c64:	68 ee       	ldi	r22, 0xE8	; 232
    1c66:	73 e0       	ldi	r23, 0x03	; 3
    1c68:	2a d4       	rcall	.+2132   	; 0x24be <__udivmodhi4>
		pow_mw = pow_tot % 1000;					// milliWatts

		rprintf("P%2u.%03uW", pow, pow_mw);
    1c6a:	74 83       	std	Z+4, r23	; 0x04
    1c6c:	63 83       	std	Z+3, r22	; 0x03
    1c6e:	96 83       	std	Z+6, r25	; 0x06
    1c70:	85 83       	std	Z+5, r24	; 0x05
    1c72:	74 d8       	rcall	.-3864   	; 0xd5c <rprintf2RamRom>
		//
		//--------------------------------------------
		// Display SWR Bargraph in fourth line
		//--------------------------------------------
		//
		lcd_gotoxy(0,3);							// Fourth line
    1c74:	2d b7       	in	r18, 0x3d	; 61
    1c76:	3e b7       	in	r19, 0x3e	; 62
    1c78:	29 5f       	subi	r18, 0xF9	; 249
    1c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	3e bf       	out	0x3e, r19	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	2d bf       	out	0x3d, r18	; 61
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	63 e0       	ldi	r22, 0x03	; 3
    1c8a:	02 d8       	rcall	.-4092   	; 0xc90 <lcd_gotoxy>

		// Prepare SWR readout
		uint16_t swr, swr_hundredths, swr_tenths;
		swr = measured_SWR / 100;					// SWR
    1c8c:	20 91 63 02 	lds	r18, 0x0263
    1c90:	30 91 64 02 	lds	r19, 0x0264
    1c94:	c9 01       	movw	r24, r18
    1c96:	b7 01       	movw	r22, r14
    1c98:	12 d4       	rcall	.+2084   	; 0x24be <__udivmodhi4>
    1c9a:	8b 01       	movw	r16, r22
    1c9c:	7c 01       	movw	r14, r24
		swr_tenths = swr_hundredths / 10;			// sub decimal point, 1/10 accuracy

		// progress, maxprogress, len
		#if	BARGRAPH_SWR_SCALE						// Add option to adjust the Fullscale value for the SWR bargraph
		// possible bug fix for SWR lcdProgressBar exceeding range
		uint16_t display_SWR = ((measured_SWR-100) > R.SWR_fullscale*100) ? R.SWR_fullscale*100 : (measured_SWR-100);
    1c9e:	80 91 67 01 	lds	r24, 0x0167
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	64 e6       	ldi	r22, 0x64	; 100
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	df d3       	rcall	.+1982   	; 0x2468 <__mulhi3>
    1caa:	bc 01       	movw	r22, r24
    1cac:	24 56       	subi	r18, 0x64	; 100
    1cae:	30 40       	sbci	r19, 0x00	; 0
    1cb0:	98 2f       	mov	r25, r24
    1cb2:	49 2f       	mov	r20, r25
    1cb4:	57 2f       	mov	r21, r23
    1cb6:	ca 01       	movw	r24, r20
    1cb8:	28 17       	cp	r18, r24
    1cba:	39 07       	cpc	r19, r25
    1cbc:	08 f4       	brcc	.+2      	; 0x1cc0 <lcd_display_P_SWR_V_C_T+0x2b2>
    1cbe:	c9 01       	movw	r24, r18
		lcdProgressBar(display_SWR, R.SWR_fullscale*100, 12);
    1cc0:	4c e0       	ldi	r20, 0x0C	; 12
    1cc2:	53 d2       	rcall	.+1190   	; 0x216a <lcdProgressBar>
		#else
		display_SWR = ((measured_SWR-100) > R.SWR_fullscale*100) ? SWR_FULL_SCALE : (measured_SWR-100);
		lcdProgressBar(display_SWR - 100, SWR_FULL_SCALE, 12);
		#endif	

		lcd_putchar_P(PSTR("SWR"));					// Print string from flash rom
    1cc4:	8a e0       	ldi	r24, 0x0A	; 10
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	2c de       	rcall	.-936    	; 0x1922 <lcd_putchar_P>

		rprintf("%2u.", swr);						// Print the super decimal portion of the SWR
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <lcd_display_P_SWR_V_C_T+0x2be>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <lcd_display_P_SWR_V_C_T+0x2c0>
    1cce:	0f 92       	push	r0
    1cd0:	ed b7       	in	r30, 0x3d	; 61
    1cd2:	fe b7       	in	r31, 0x3e	; 62
    1cd4:	31 96       	adiw	r30, 0x01	; 1
    1cd6:	cc 24       	eor	r12, r12
    1cd8:	c3 94       	inc	r12
    1cda:	ad b7       	in	r26, 0x3d	; 61
    1cdc:	be b7       	in	r27, 0x3e	; 62
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	cc 92       	st	X, r12
    1ce2:	85 e0       	ldi	r24, 0x05	; 5
    1ce4:	91 e0       	ldi	r25, 0x01	; 1
    1ce6:	92 83       	std	Z+2, r25	; 0x02
    1ce8:	81 83       	std	Z+1, r24	; 0x01
    1cea:	14 83       	std	Z+4, r17	; 0x04
    1cec:	03 83       	std	Z+3, r16	; 0x03
    1cee:	36 d8       	rcall	.-3988   	; 0xd5c <rprintf2RamRom>
		//
		//--------------------------------------------
		// Display a SWR Alarm situation
		//--------------------------------------------
		//
		if(Status1 & SWR_ALARM)						// SWR Alarm flag set
    1cf0:	80 91 7a 01 	lds	r24, 0x017A
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	82 ff       	sbrs	r24, 2
    1d00:	16 c0       	rjmp	.+44     	; 0x1d2e <lcd_display_P_SWR_V_C_T+0x320>
		{
			if(swr >= 100)							// SWR more than 99
    1d02:	04 36       	cpi	r16, 0x64	; 100
    1d04:	11 05       	cpc	r17, r1
    1d06:	20 f0       	brcs	.+8      	; 0x1d10 <lcd_display_P_SWR_V_C_T+0x302>
				lcd_putchar_P(PSTR("  --"));
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	0a de       	rcall	.-1004   	; 0x1922 <lcd_putchar_P>
    1d0e:	08 c0       	rjmp	.+16     	; 0x1d20 <lcd_display_P_SWR_V_C_T+0x312>

		// Prepare SWR readout
		uint16_t swr, swr_hundredths, swr_tenths;
		swr = measured_SWR / 100;					// SWR
		swr_hundredths = measured_SWR % 100;		// sub decimal point, 1/100 accuracy
		swr_tenths = swr_hundredths / 10;			// sub decimal point, 1/10 accuracy
    1d10:	c7 01       	movw	r24, r14
    1d12:	6a e0       	ldi	r22, 0x0A	; 10
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	d3 d3       	rcall	.+1958   	; 0x24be <__udivmodhi4>
		if(Status1 & SWR_ALARM)						// SWR Alarm flag set
		{
			if(swr >= 100)							// SWR more than 99
				lcd_putchar_P(PSTR("  --"));
			else
				lcd_data(swr_tenths+0x30);			// Print the sub-decimal value of the SWR, single digit precision
    1d18:	86 2f       	mov	r24, r22
    1d1a:	80 5d       	subi	r24, 0xD0	; 208
    1d1c:	0e 94 40 06 	call	0xc80	; 0xc80 <lcd_data>
													// (a lean byte saving way to print a single decimal)

			lcd_data('A');							// A in SWRA indication
    1d20:	81 e4       	ldi	r24, 0x41	; 65
    1d22:	0e 94 40 06 	call	0xc80	; 0xc80 <lcd_data>
			lcd_command(LCD_DISP_ON_BLINK);			// Blinking block cursor ON
    1d26:	8d e0       	ldi	r24, 0x0D	; 13
    1d28:	0e 94 38 06 	call	0xc70	; 0xc70 <lcd_command>
    1d2c:	16 c0       	rjmp	.+44     	; 0x1d5a <lcd_display_P_SWR_V_C_T+0x34c>
		}
		else
		#endif//SWR_ALARM_FUNC
			rprintf("%02u", swr_hundredths);		// Print the sub-decimal value of the SWR, double digit precision
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <lcd_display_P_SWR_V_C_T+0x322>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <lcd_display_P_SWR_V_C_T+0x324>
    1d32:	0f 92       	push	r0
    1d34:	ed b7       	in	r30, 0x3d	; 61
    1d36:	fe b7       	in	r31, 0x3e	; 62
    1d38:	31 96       	adiw	r30, 0x01	; 1
    1d3a:	ad b7       	in	r26, 0x3d	; 61
    1d3c:	be b7       	in	r27, 0x3e	; 62
    1d3e:	11 96       	adiw	r26, 0x01	; 1
    1d40:	cc 92       	st	X, r12
    1d42:	8b ef       	ldi	r24, 0xFB	; 251
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	92 83       	std	Z+2, r25	; 0x02
    1d48:	81 83       	std	Z+1, r24	; 0x01
    1d4a:	f4 82       	std	Z+4, r15	; 0x04
    1d4c:	e3 82       	std	Z+3, r14	; 0x03
    1d4e:	06 d8       	rcall	.-4084   	; 0xd5c <rprintf2RamRom>
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0

		// In case of a blinking "SWR Alarm" cursor, put it on "A" in "SWR Alarm"
		lcd_gotoxy(19,3);
    1d5a:	83 e1       	ldi	r24, 0x13	; 19
    1d5c:	63 e0       	ldi	r22, 0x03	; 3
    1d5e:	0e 94 48 06 	call	0xc90	; 0xc90 <lcd_gotoxy>
	}
}	
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	08 95       	ret

00001d7a <lcd_display_TRX_stuff>:
// Display TX/RX Stuff
//-------------------------------------------------------
//
void lcd_display_TRX_stuff(void)
{
	lcd_clrscr();								// Clear Screen is a cheaper operation than
    1d7a:	0e 94 56 06 	call	0xcac	; 0xcac <lcd_clrscr>
												// writing blanks, though it causes flicker

	lcd_display_freq_and_filters();				// Update frequency display
    1d7e:	de dd       	rcall	.-1092   	; 0x193c <lcd_display_freq_and_filters>
	lcd_display_P_SWR_V_C_T();					// Update 2nd line, Temp, V, I...
    1d80:	46 de       	rcall	.-884    	; 0x1a0e <lcd_display_P_SWR_V_C_T>

	lcd_command(LCD_DISP_ON);					// Blinking block cursor OFF
    1d82:	8c e0       	ldi	r24, 0x0C	; 12
    1d84:	0e 94 38 06 	call	0xc70	; 0xc70 <lcd_command>

	lcd_gotoxy(0,0);							// First char, first line
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	0e 94 48 06 	call	0xc90	; 0xc90 <lcd_gotoxy>
	if(Status1 & TX_FLAG)						// TX or RX ?
    1d90:	80 91 7a 01 	lds	r24, 0x017A
    1d94:	80 ff       	sbrs	r24, 0
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <lcd_display_TRX_stuff+0x24>
	{
		lcd_data('T');
    1d98:	84 e5       	ldi	r24, 0x54	; 84
    1d9a:	0c 94 40 06 	jmp	0xc80	; 0xc80 <lcd_data>
	}
	else
	{
		lcd_data('R');
    1d9e:	82 e5       	ldi	r24, 0x52	; 82
    1da0:	0e 94 40 06 	call	0xc80	; 0xc80 <lcd_data>
    1da4:	e4 e1       	ldi	r30, 0x14	; 20
    1da6:	f2 e0       	ldi	r31, 0x02	; 2

		#if PWR_PEAK_ENVELOPE						//PEP measurement. Highest value in buffer shown
		for (uint8_t j = 0; j < PEP_MAX_PERIOD; j++)// Clear PEP storage during receive
		{
			pow_avg[j]=0;
    1da8:	11 92       	st	Z+, r1
    1daa:	11 92       	st	Z+, r1
	else
	{
		lcd_data('R');

		#if PWR_PEAK_ENVELOPE						//PEP measurement. Highest value in buffer shown
		for (uint8_t j = 0; j < PEP_MAX_PERIOD; j++)// Clear PEP storage during receive
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	ec 33       	cpi	r30, 0x3C	; 60
    1db0:	f8 07       	cpc	r31, r24
    1db2:	d1 f7       	brne	.-12     	; 0x1da8 <lcd_display_TRX_stuff+0x2e>
    1db4:	08 95       	ret

00001db6 <lcd_display_TRX_status_on_change>:
//
void lcd_display_TRX_status_on_change(void)
{
	static uint8_t tx_status = 1;					// Force run first time. Keep track of TRX status
	
	if (tx_status != (Status1 & TX_FLAG))			// Has there been a TX/RX change?
    1db6:	40 91 7a 01 	lds	r20, 0x017A
    1dba:	20 91 79 01 	lds	r18, 0x0179
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	84 2f       	mov	r24, r20
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	81 70       	andi	r24, 0x01	; 1
    1dc6:	90 70       	andi	r25, 0x00	; 0
    1dc8:	28 17       	cp	r18, r24
    1dca:	39 07       	cpc	r19, r25
    1dcc:	21 f0       	breq	.+8      	; 0x1dd6 <lcd_display_TRX_status_on_change+0x20>
	{
		tx_status = Status1 & TX_FLAG;
    1dce:	41 70       	andi	r20, 0x01	; 1
    1dd0:	40 93 79 01 	sts	0x0179, r20

		lcd_display_TRX_stuff();
    1dd4:	d2 cf       	rjmp	.-92     	; 0x1d7a <lcd_display_TRX_stuff>
    1dd6:	08 95       	ret

00001dd8 <lcd_display_Memory_Stored>:
#if ENCODER_INT_STYLE || ENCODER_SCAN_STYLE			// Shaft Encoder VFO function
void lcd_display_Memory_Stored(void)				// Display Memory Stored for a certain amount of time
{
	static int count = 0;							// Display for ENC_STORE_DISP * 100ms

	lcd_gotoxy(0,3);								// Fourth line
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	63 e0       	ldi	r22, 0x03	; 3
    1ddc:	0e 94 48 06 	call	0xc90	; 0xc90 <lcd_gotoxy>
	lcd_putchar_P(PSTR("VFO Memory Stored   "));	// Print string from flash rom rather than from SRAM
    1de0:	86 ee       	ldi	r24, 0xE6	; 230
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9e dd       	rcall	.-1220   	; 0x1922 <lcd_putchar_P>

	count++;
    1de6:	80 91 12 02 	lds	r24, 0x0212
    1dea:	90 91 13 02 	lds	r25, 0x0213
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	90 93 13 02 	sts	0x0213, r25
    1df4:	80 93 12 02 	sts	0x0212, r24
	if(count>=ENC_STORE_DISP)
    1df8:	84 31       	cpi	r24, 0x14	; 20
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	54 f0       	brlt	.+20     	; 0x1e12 <lcd_display_Memory_Stored+0x3a>
	{
		Status2 &= ~ENC_STORED;
    1dfe:	80 91 7b 01 	lds	r24, 0x017B
    1e02:	8b 7f       	andi	r24, 0xFB	; 251
    1e04:	80 93 7b 01 	sts	0x017B, r24
		count = 0;
    1e08:	10 92 13 02 	sts	0x0213, r1
    1e0c:	10 92 12 02 	sts	0x0212, r1
		lcd_display_TRX_stuff();
    1e10:	b4 cf       	rjmp	.-152    	; 0x1d7a <lcd_display_TRX_stuff>
    1e12:	08 95       	ret

00001e14 <SetFilter>:
#if CALC_BAND_MUL_ADD							// Band dependent Frequency Subtract and Multiply
uint8_t SetFilter(uint32_t freq)
#else
void SetFilter(uint32_t freq)
#endif
{
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
	//-------------------------------------------	
	// Set RX Band Pass filters
	//-------------------------------------------
	for (i = 0; i < 7; i++)
	{
		if (Freq.w1.w < R.FilterCrossOver[i].w) break;
    1e1e:	e8 2e       	mov	r14, r24
    1e20:	e7 01       	movw	r28, r14
    1e22:	7e 01       	movw	r14, r28
    1e24:	f9 2e       	mov	r15, r25
    1e26:	e7 01       	movw	r28, r14
    1e28:	e6 e4       	ldi	r30, 0x46	; 70
    1e2a:	f1 e0       	ldi	r31, 0x01	; 1
	Freq.dw = freq;								// Freq.w1 is 11.5bits
		
	//-------------------------------------------	
	// Set RX Band Pass filters
	//-------------------------------------------
	for (i = 0; i < 7; i++)
    1e2c:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (Freq.w1.w < R.FilterCrossOver[i].w) break;
    1e2e:	21 91       	ld	r18, Z+
    1e30:	31 91       	ld	r19, Z+
    1e32:	c2 17       	cp	r28, r18
    1e34:	d3 07       	cpc	r29, r19
    1e36:	18 f0       	brcs	.+6      	; 0x1e3e <SetFilter+0x2a>
	Freq.dw = freq;								// Freq.w1 is 11.5bits
		
	//-------------------------------------------	
	// Set RX Band Pass filters
	//-------------------------------------------
	for (i = 0; i < 7; i++)
    1e38:	1f 5f       	subi	r17, 0xFF	; 255
    1e3a:	17 30       	cpi	r17, 0x07	; 7
    1e3c:	c1 f7       	brne	.-16     	; 0x1e2e <SetFilter+0x1a>
	pcf_data_out = pcf_data_out & 0xf8;			// clear and leave upper 5 bits untouched
	MoboPCF_set(data);							// Combine the two and write out
	selectedFilters[0] = R.FilterNumber[i];		// Used for LCD Print indication
	#else
	//i = i & 0x07;								// We only want 3 bits
	pcf_data_out = pcf_data_out & 0xf8;			// clear and leave upper 5 bits untouched
    1e3e:	80 91 6f 01 	lds	r24, 0x016F
    1e42:	88 7f       	andi	r24, 0xF8	; 248
    1e44:	80 93 6f 01 	sts	0x016F, r24
	MoboPCF_set(i);								// Combine the two and write out
    1e48:	81 2f       	mov	r24, r17
    1e4a:	da dc       	rcall	.-1612   	; 0x1800 <MoboPCF_set>
	selectedFilters[0] = i;						// Used for LCD Print indication
    1e4c:	10 93 41 02 	sts	0x0241, r17
    1e50:	e6 e5       	ldi	r30, 0x56	; 86
    1e52:	f1 e0       	ldi	r31, 0x01	; 1
	#endif

	//-------------------------------------------
	// Set TX Low Pass filters
	//-------------------------------------------
	for (i = 0; i < TXF - 1; i++)
    1e54:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (Freq.w1.w < R.TXFilterCrossOver[i].w) break;
    1e56:	81 91       	ld	r24, Z+
    1e58:	91 91       	ld	r25, Z+
    1e5a:	c8 17       	cp	r28, r24
    1e5c:	d9 07       	cpc	r29, r25
    1e5e:	18 f0       	brcs	.+6      	; 0x1e66 <SetFilter+0x52>
	#endif

	//-------------------------------------------
	// Set TX Low Pass filters
	//-------------------------------------------
	for (i = 0; i < TXF - 1; i++)
    1e60:	1f 5f       	subi	r17, 0xFF	; 255
    1e62:	17 30       	cpi	r17, 0x07	; 7
    1e64:	c1 f7       	brne	.-16     	; 0x1e56 <SetFilter+0x42>
	#if SCRAMBLED_FILTERS						// Enable a non contiguous order of filters
	band_sel.w = 1<<R.TXFilterNumber[i];		// Set bit in a 16 bit register
	pcf8574_byte(R.PCF_I2C_lpf1_addr, band_sel.b0);
	selectedFilters[1] = R.TXFilterNumber[i];	// Used for LCD Print indication
	#else
	band_sel.w = 1<<i;							// Set bit in a 16 bit register
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	01 2e       	mov	r0, r17
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <SetFilter+0x5e>
    1e6e:	66 0f       	add	r22, r22
    1e70:	77 1f       	adc	r23, r23
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <SetFilter+0x5a>
	pcf8574_byte(R.PCF_I2C_lpf1_addr, band_sel.b0);
    1e76:	80 91 06 01 	lds	r24, 0x0106
    1e7a:	a4 dc       	rcall	.-1720   	; 0x17c4 <pcf8574_byte>
	selectedFilters[1] = i;						// Used for LCD Print indication
    1e7c:	10 93 42 02 	sts	0x0242, r17
	#endif

	#if CALC_BAND_MUL_ADD						// Band dependent Frequency Subtract and Multiply
	return freqBand;	
	#endif
}
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	1f 91       	pop	r17
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	08 95       	ret

00001e8c <measured_Power>:
	// Reference voltage is 5V, 
	// diode offset ~ .15V
	// R.PWR_Calibrate = Power meter calibration value
	uint32_t measured_P; 
	
	if (voltage > 0) voltage = voltage/0x10 + 82;				// If no input voltage, then we do not add offset voltage
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	39 f0       	breq	.+14     	; 0x1e9e <measured_Power+0x12>
    1e90:	24 e0       	ldi	r18, 0x04	; 4
    1e92:	96 95       	lsr	r25
    1e94:	87 95       	ror	r24
    1e96:	2a 95       	dec	r18
    1e98:	e1 f7       	brne	.-8      	; 0x1e92 <measured_Power+0x6>
    1e9a:	8e 5a       	subi	r24, 0xAE	; 174
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
																// voltage is a MSB adjusted 12 bit value, therefore 
																// dividing by 10 does not lose any information
																// 4096 = 5V,
																// 82 = 100mV, compensating for schottky diode loss
	// Formula roughly adjusted for the ratio in the SWR bridge
	measured_P = (uint32_t)voltage * R.PWR_Calibrate/84;
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	20 91 10 01 	lds	r18, 0x0110
    1ea8:	30 91 11 01 	lds	r19, 0x0111
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	ed d2       	rcall	.+1498   	; 0x248c <__mulsi3>
    1eb2:	24 e5       	ldi	r18, 0x54	; 84
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	15 d3       	rcall	.+1578   	; 0x24e6 <__udivmodsi4>
	measured_P = (measured_P*measured_P)/50000;
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	ca 01       	movw	r24, r20
    1ec0:	e5 d2       	rcall	.+1482   	; 0x248c <__mulsi3>
    1ec2:	20 e5       	ldi	r18, 0x50	; 80
    1ec4:	33 ec       	ldi	r19, 0xC3	; 195
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	0d d3       	rcall	.+1562   	; 0x24e6 <__udivmodsi4>
	return (uint16_t) measured_P;								// Return power in mW
}
    1ecc:	c9 01       	movw	r24, r18
    1ece:	08 95       	ret

00001ed0 <Test_SWR>:
// The global variable ad7991_adc[AD7991_POWER_OUT] contains a measurement of the
// Power transmitted,
// and the global variable ad7991_adc[AD7991_POWER_REF] contains a measurement of the
// Power reflected,
void Test_SWR(void)
{
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
	#if SWR_ALARM_FUNC											// SWR alarm function, activates a secondary PTT
	static uint8_t second_pass=0, timer=0;
	#endif//SWR_ALARM_FUNC										// SWR alarm function, activates a secondary PTT

	// There is no point in doing a SWR calculation, unless keyed and on the air
	if(!(Status1 & TMP_ALARM) && (Status1 &TX_FLAG))
    1eda:	10 91 7a 01 	lds	r17, 0x017A
    1ede:	13 fd       	sbrc	r17, 3
    1ee0:	6f c0       	rjmp	.+222    	; 0x1fc0 <Test_SWR+0xf0>
    1ee2:	10 ff       	sbrs	r17, 0
    1ee4:	6d c0       	rjmp	.+218    	; 0x1fc0 <Test_SWR+0xf0>
	{
		//-------------------------------------------------------------
		// Calculate SWR
		//-------------------------------------------------------------
		// Quick check for an invalid result 
		if (ad7991_adc[AD7991_POWER_OUT].w < V_MIN_TRIGGER*0x10)
    1ee6:	c0 91 67 02 	lds	r28, 0x0267
    1eea:	d0 91 68 02 	lds	r29, 0x0268
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	c0 30       	cpi	r28, 0x00	; 0
    1ef2:	d8 07       	cpc	r29, r24
    1ef4:	08 f1       	brcs	.+66     	; 0x1f38 <Test_SWR+0x68>
			swr = 100;											// Too little for valid measurement, SWR = 1.0
		else if (ad7991_adc[AD7991_POWER_REF].w >= ad7991_adc[AD7991_POWER_OUT].w)
    1ef6:	e0 90 69 02 	lds	r14, 0x0269
    1efa:	f0 90 6a 02 	lds	r15, 0x026A
    1efe:	ec 16       	cp	r14, r28
    1f00:	fd 06       	cpc	r15, r29
    1f02:	08 f5       	brcc	.+66     	; 0x1f46 <Test_SWR+0x76>

		// Standard SWR formula multiplied by 100, eg 270 = SWR of 2.7
		else
		{
			swr = (uint32_t) 100 * 
			((uint32_t)ad7991_adc[AD7991_POWER_OUT].w + (uint32_t)ad7991_adc[AD7991_POWER_REF].w)
    1f04:	b7 01       	movw	r22, r14
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9e 01       	movw	r18, r28
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	62 0f       	add	r22, r18
    1f12:	73 1f       	adc	r23, r19
    1f14:	84 1f       	adc	r24, r20
    1f16:	95 1f       	adc	r25, r21
			swr = 9990; 										// Infinite (or more than infinite) SWR:

		// Standard SWR formula multiplied by 100, eg 270 = SWR of 2.7
		else
		{
			swr = (uint32_t) 100 * 
    1f18:	24 e6       	ldi	r18, 0x64	; 100
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e0       	ldi	r20, 0x00	; 0
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	b5 d2       	rcall	.+1386   	; 0x248c <__mulsi3>
			((uint32_t)ad7991_adc[AD7991_POWER_OUT].w + (uint32_t)ad7991_adc[AD7991_POWER_REF].w)
				/
			(uint32_t)(ad7991_adc[AD7991_POWER_OUT].w - ad7991_adc[AD7991_POWER_REF].w);
    1f22:	9e 01       	movw	r18, r28
    1f24:	2e 19       	sub	r18, r14
    1f26:	3f 09       	sbc	r19, r15
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	50 e0       	ldi	r21, 0x00	; 0
		// Standard SWR formula multiplied by 100, eg 270 = SWR of 2.7
		else
		{
			swr = (uint32_t) 100 * 
			((uint32_t)ad7991_adc[AD7991_POWER_OUT].w + (uint32_t)ad7991_adc[AD7991_POWER_REF].w)
				/
    1f2c:	dc d2       	rcall	.+1464   	; 0x24e6 <__udivmodsi4>
			(uint32_t)(ad7991_adc[AD7991_POWER_OUT].w - ad7991_adc[AD7991_POWER_REF].w);
		}	
		if (swr < 9990)											// Set an upper bound to avoid overrrun.
    1f2e:	87 e2       	ldi	r24, 0x27	; 39
    1f30:	26 30       	cpi	r18, 0x06	; 6
    1f32:	38 07       	cpc	r19, r24
    1f34:	40 f4       	brcc	.+16     	; 0x1f46 <Test_SWR+0x76>
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <Test_SWR+0x6c>
		//-------------------------------------------------------------
		// Calculate SWR
		//-------------------------------------------------------------
		// Quick check for an invalid result 
		if (ad7991_adc[AD7991_POWER_OUT].w < V_MIN_TRIGGER*0x10)
			swr = 100;											// Too little for valid measurement, SWR = 1.0
    1f38:	24 e6       	ldi	r18, 0x64	; 100
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
			((uint32_t)ad7991_adc[AD7991_POWER_OUT].w + (uint32_t)ad7991_adc[AD7991_POWER_REF].w)
				/
			(uint32_t)(ad7991_adc[AD7991_POWER_OUT].w - ad7991_adc[AD7991_POWER_REF].w);
		}	
		if (swr < 9990)											// Set an upper bound to avoid overrrun.
			measured_SWR = swr;
    1f3c:	30 93 64 02 	sts	0x0264, r19
    1f40:	20 93 63 02 	sts	0x0263, r18
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <Test_SWR+0x82>
		else measured_SWR = 9990;		
    1f46:	86 e0       	ldi	r24, 0x06	; 6
    1f48:	97 e2       	ldi	r25, 0x27	; 39
    1f4a:	90 93 64 02 	sts	0x0264, r25
    1f4e:	80 93 63 02 	sts	0x0263, r24
		// If PTT is keyed, key the PTT2 line according to SWR status
		//-------------------------------------------------------------
		// On measured Power output and high SWR, force clear RXTX2 and seed timer

		// Compare power measured (in mW) with min Trigger value
		if ((measured_Power(ad7991_adc[AD7991_POWER_OUT].w) > R.P_Min_Trigger) 	
    1f52:	ce 01       	movw	r24, r28
    1f54:	9b df       	rcall	.-202    	; 0x1e8c <measured_Power>
    1f56:	20 91 0a 01 	lds	r18, 0x010A
    1f5a:	30 91 0b 01 	lds	r19, 0x010B
    1f5e:	28 17       	cp	r18, r24
    1f60:	39 07       	cpc	r19, r25
    1f62:	f0 f4       	brcc	.+60     	; 0x1fa0 <Test_SWR+0xd0>

			&& (measured_SWR > 10*R.SWR_Trigger)) 				// SWR Trigger value is a 10x value,
    1f64:	80 91 0e 01 	lds	r24, 0x010E
    1f68:	90 91 0f 01 	lds	r25, 0x010F
    1f6c:	6a e0       	ldi	r22, 0x0A	; 10
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	7b d2       	rcall	.+1270   	; 0x2468 <__mulhi3>
    1f72:	20 91 63 02 	lds	r18, 0x0263
    1f76:	30 91 64 02 	lds	r19, 0x0264
    1f7a:	82 17       	cp	r24, r18
    1f7c:	93 07       	cpc	r25, r19
    1f7e:	80 f4       	brcc	.+32     	; 0x1fa0 <Test_SWR+0xd0>
																// e.g. 27 corresponds to an SWR of 2.7.
		{
			if (!second_pass)									// First time, set flag, no action yet
    1f80:	80 91 3f 02 	lds	r24, 0x023F
    1f84:	88 23       	and	r24, r24
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <Test_SWR+0xc0>
				second_pass++;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	80 93 3f 02 	sts	0x023F, r24
    1f8e:	1d c0       	rjmp	.+58     	; 0x1fca <Test_SWR+0xfa>
			else												// There have been two or more consecutive measurements
																// with high SWR, take action
			{
				Status1 |= SWR_ALARM;							// Set SWR alarm flag
    1f90:	14 60       	ori	r17, 0x04	; 4
    1f92:	10 93 7a 01 	sts	0x017A, r17
				#if MOBO_STYLE_IO
				#if  REVERSE_PTT2_LOGIC							// Switch the PTT2 logic
				MoboPCF_clear(Mobo_PCF_TX2);					// Clear PTT2 line
				#else//not REVERSE_PTT2_LOGIC					// Normal PTT2 logic
				MoboPCF_set(Mobo_PCF_TX2);						// Set PTT2 line
    1f96:	80 e4       	ldi	r24, 0x40	; 64
    1f98:	33 dc       	rcall	.-1946   	; 0x1800 <MoboPCF_set>
				#endif//REVERSE_PTT2_LOGIC						// end of Switch the PTT2 logic
				#endif//MOBO_STYLE_IO
				timer = R.SWR_Protect_Timer;					// Seed SWR Alarm patience timer
    1f9a:	80 91 0c 01 	lds	r24, 0x010C
    1f9e:	0d c0       	rjmp	.+26     	; 0x1fba <Test_SWR+0xea>
			}
		}
		// If SWR OK and timer has been zeroed, set the PTT2 line
		else 
		{
			if (timer == 0)
    1fa0:	80 91 3e 02 	lds	r24, 0x023E
    1fa4:	88 23       	and	r24, r24
    1fa6:	41 f4       	brne	.+16     	; 0x1fb8 <Test_SWR+0xe8>
			{
				Status1 &= ~SWR_ALARM;							// Clear SWR alarm flag
    1fa8:	1b 7f       	andi	r17, 0xFB	; 251
    1faa:	10 93 7a 01 	sts	0x017A, r17
				#if MOBO_STYLE_IO
				#if  REVERSE_PTT2_LOGIC							// Switch the PTT2 logic
				MoboPCF_set(Mobo_PCF_TX2);						// Set PTT2 line
				#else//not REVERSE_PTT2_LOGIC					// Normal PTT2 logic
				MoboPCF_clear(Mobo_PCF_TX2);					// Clear PTT2 line
    1fae:	80 e4       	ldi	r24, 0x40	; 64
    1fb0:	1d dc       	rcall	.-1990   	; 0x17ec <MoboPCF_clear>
				#endif//REVERSE_PTT2_LOGIC						// end of Switch the PTT2 logic
				#endif//MOBO_STYLE_IO
				second_pass = 0;								// clear second pass flag
    1fb2:	10 92 3f 02 	sts	0x023F, r1
    1fb6:	09 c0       	rjmp	.+18     	; 0x1fca <Test_SWR+0xfa>
			}
			else
			{
				timer--;
    1fb8:	81 50       	subi	r24, 0x01	; 1
    1fba:	80 93 3e 02 	sts	0x023E, r24
    1fbe:	05 c0       	rjmp	.+10     	; 0x1fca <Test_SWR+0xfa>
	//-------------------------------------------------------------
	// Not Keyed - Clear PTT2 line
	//-------------------------------------------------------------
	else
	{
				Status1 &= ~SWR_ALARM;							// Clear SWR alarm flag
    1fc0:	1b 7f       	andi	r17, 0xFB	; 251
    1fc2:	10 93 7a 01 	sts	0x017A, r17
				#if MOBO_STYLE_IO
				#if  REVERSE_PTT2_LOGIC							// Switch the PTT2 logic
				MoboPCF_clear(Mobo_PCF_TX2);					// Clear PTT2 line
				#else//not REVERSE_PTT2_LOGIC					// Normal PTT2 logic
				MoboPCF_set(Mobo_PCF_TX2);						// Set PTT2 line
    1fc6:	80 e4       	ldi	r24, 0x40	; 64
    1fc8:	1b dc       	rcall	.-1994   	; 0x1800 <MoboPCF_set>
				#endif//REVERSE_PTT2_LOGIC						// end of Switch the PTT2 logic
				#endif//MOBO_STYLE_IO
	}
}
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	08 95       	ret

00001fd6 <PA_bias>:
//-----------------------------------------------------------------------------------------
//
void PA_bias(void)


{
    1fd6:	1f 93       	push	r17
	uint8_t static calibrate = 0;								// Current calibrate value

	switch (R.Bias_Select)
    1fd8:	10 91 12 01 	lds	r17, 0x0112
    1fdc:	11 30       	cpi	r17, 0x01	; 1
    1fde:	29 f0       	breq	.+10     	; 0x1fea <PA_bias+0x14>
    1fe0:	80 91 7a 01 	lds	r24, 0x017A
    1fe4:	12 30       	cpi	r17, 0x02	; 2
    1fe6:	29 f5       	brne	.+74     	; 0x2032 <PA_bias+0x5c>
    1fe8:	0d c0       	rjmp	.+26     	; 0x2004 <PA_bias+0x2e>
	{
		//-------------------------------------------------------------
		// Set RD16HHF1 Bias to LO setting, using stored calibrated value
		//-------------------------------------------------------------
		case 1:													// Set RD16HHF1 PA bias for Class AB
			if(biasInit != 1)									// Has this been done already?
    1fea:	80 91 7c 01 	lds	r24, 0x017C
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	29 f0       	breq	.+10     	; 0x1ffc <PA_bias+0x26>
				ad5301(R.AD5301_I2C_addr, R.cal_LO);			// No, set bias
    1ff2:	80 91 03 01 	lds	r24, 0x0103
    1ff6:	60 91 15 01 	lds	r22, 0x0115
    1ffa:	36 dc       	rcall	.-1940   	; 0x1868 <ad5301>
			biasInit = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	80 93 7c 01 	sts	0x017C, r24
			break;
    2002:	87 c0       	rjmp	.+270    	; 0x2112 <PA_bias+0x13c>
		//-------------------------------------------------------------
		// Set RD16HHF1 Bias to HI setting,  using stored calibrated value
		//-------------------------------------------------------------
		case 2:													// Set RD16HHF1 PA bias for Class A
			if (Status1 & SWR_ALARM)							// Whoops, we have a SWR situation
    2004:	82 ff       	sbrs	r24, 2
    2006:	08 c0       	rjmp	.+16     	; 0x2018 <PA_bias+0x42>
			{
				ad5301(R.AD5301_I2C_addr, R.cal_LO);			// Set lower bias setting
    2008:	80 91 03 01 	lds	r24, 0x0103
    200c:	60 91 15 01 	lds	r22, 0x0115
    2010:	2b dc       	rcall	.-1962   	; 0x1868 <ad5301>
				biasInit = 0;
    2012:	10 92 7c 01 	sts	0x017C, r1
    2016:	7d c0       	rjmp	.+250    	; 0x2112 <PA_bias+0x13c>
			}
			else if(biasInit != 2 )								// Has this been done already?
    2018:	80 91 7c 01 	lds	r24, 0x017C
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	09 f4       	brne	.+2      	; 0x2022 <PA_bias+0x4c>
    2020:	78 c0       	rjmp	.+240    	; 0x2112 <PA_bias+0x13c>
			{
				ad5301(R.AD5301_I2C_addr, R.cal_HI);				// No, set bias
    2022:	80 91 03 01 	lds	r24, 0x0103
    2026:	60 91 16 01 	lds	r22, 0x0116
    202a:	1e dc       	rcall	.-1988   	; 0x1868 <ad5301>
				biasInit = 2;
    202c:	10 93 7c 01 	sts	0x017C, r17
    2030:	70 c0       	rjmp	.+224    	; 0x2112 <PA_bias+0x13c>
			break;
		//-------------------------------------------------------------
		// Calibrate RD16HHF1 Bias 
		//-------------------------------------------------------------
		default:												// Calibrate RD16HHF1 PA bias
			if (!(Status1 & TMP_ALARM))							// Proceed if there are no inhibits
    2032:	83 fd       	sbrc	r24, 3
    2034:	6e c0       	rjmp	.+220    	; 0x2112 <PA_bias+0x13c>
			{
				Status1 |= TX_FLAG | PA_CAL;					// Set a couple of progress flags
    2036:	81 64       	ori	r24, 0x41	; 65
    2038:	80 93 7a 01 	sts	0x017A, r24

				// Switch to Transmit mode, set TX out
				#if MOBO_STYLE_IO
				MoboPCF_clear(Mobo_PCF_TX);
    203c:	80 e8       	ldi	r24, 0x80	; 128
    203e:	d6 db       	rcall	.-2132   	; 0x17ec <MoboPCF_clear>
				#if OLDSTYLE_IO
				IO_PORT_PTT_CWKEY |= IO_PTT;
				#endif//OLDSTYLE_IO

				// Is current larger or equal to setpoint for class AB?
				if((ad7991_adc[AD7991_PA_CURRENT].b1 >= R.Bias_LO) && !(Status1 & PA_CAL_LO))
    2040:	90 91 66 02 	lds	r25, 0x0266
    2044:	80 91 13 01 	lds	r24, 0x0113
    2048:	98 17       	cp	r25, r24
    204a:	90 f0       	brcs	.+36     	; 0x2070 <PA_bias+0x9a>
    204c:	80 91 7a 01 	lds	r24, 0x017A
    2050:	84 fd       	sbrc	r24, 4
    2052:	0e c0       	rjmp	.+28     	; 0x2070 <PA_bias+0x9a>
				{
					Status1 |= PA_CAL_LO;						// Set flag, were done with class AB
    2054:	80 61       	ori	r24, 0x10	; 16
    2056:	80 93 7a 01 	sts	0x017A, r24
					R.cal_LO = calibrate;						// We have bias, store
    205a:	80 91 3d 02 	lds	r24, 0x023D
    205e:	80 93 15 01 	sts	0x0115, r24
					// eeprom_write_block appears to take (14 bytes) less pgm space than eeprom_write_byte 
					eeprom_write_block(&R.cal_LO, &E.cal_LO, sizeof (uint8_t));
    2062:	85 e1       	ldi	r24, 0x15	; 21
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	65 e1       	ldi	r22, 0x15	; 21
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	90 d2       	rcall	.+1312   	; 0x2590 <__eewr_block_usb162>
				}
				
				// Is current larger or equal to setpoint for class A?
				if((ad7991_adc[AD7991_PA_CURRENT].b1 >= R.Bias_HI) && !(Status1 & PA_CAL_HI))
    2070:	90 91 66 02 	lds	r25, 0x0266
    2074:	80 91 14 01 	lds	r24, 0x0114
    2078:	98 17       	cp	r25, r24
    207a:	90 f0       	brcs	.+36     	; 0x20a0 <PA_bias+0xca>
    207c:	80 91 7a 01 	lds	r24, 0x017A
    2080:	85 fd       	sbrc	r24, 5
    2082:	0e c0       	rjmp	.+28     	; 0x20a0 <PA_bias+0xca>
				{
					Status1 |= PA_CAL_HI;						// Set flag, we're done with class A
    2084:	80 62       	ori	r24, 0x20	; 32
    2086:	80 93 7a 01 	sts	0x017A, r24
					R.cal_HI = calibrate;						// We have bias, store
    208a:	80 91 3d 02 	lds	r24, 0x023D
    208e:	80 93 16 01 	sts	0x0116, r24
					eeprom_write_block(&R.cal_HI, &E.cal_HI, sizeof (uint8_t));
    2092:	86 e1       	ldi	r24, 0x16	; 22
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	66 e1       	ldi	r22, 0x16	; 22
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	50 e0       	ldi	r21, 0x00	; 0
    209e:	78 d2       	rcall	.+1264   	; 0x2590 <__eewr_block_usb162>
				}
				
				// Have we reached the end of our rope?
				if(calibrate == 0xff)	
    20a0:	80 91 3d 02 	lds	r24, 0x023D
    20a4:	8f 3f       	cpi	r24, 0xFF	; 255
    20a6:	b9 f4       	brne	.+46     	; 0x20d6 <PA_bias+0x100>
				{
					Status1 |= PA_CAL_HI;						// Set flag as if done with class AB
    20a8:	80 91 7a 01 	lds	r24, 0x017A
    20ac:	80 62       	ori	r24, 0x20	; 32
    20ae:	80 93 7a 01 	sts	0x017A, r24
					R.cal_HI = R.cal_LO = 0;					// We have no valid bias setting
    20b2:	10 92 15 01 	sts	0x0115, r1
    20b6:	10 92 16 01 	sts	0x0116, r1
					eeprom_write_block(&R.cal_LO, &E.cal_LO, sizeof (uint8_t));	// store 0 for both Class A and Class AB
    20ba:	85 e1       	ldi	r24, 0x15	; 21
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	65 e1       	ldi	r22, 0x15	; 21
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	64 d2       	rcall	.+1224   	; 0x2590 <__eewr_block_usb162>
					eeprom_write_block(&R.cal_HI, &E.cal_HI, sizeof (uint8_t));
    20c8:	86 e1       	ldi	r24, 0x16	; 22
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	66 e1       	ldi	r22, 0x16	; 22
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	5d d2       	rcall	.+1210   	; 0x2590 <__eewr_block_usb162>
				}
				
				// Are we finished?
				if (Status1 & PA_CAL_HI)
    20d6:	80 91 7a 01 	lds	r24, 0x017A
    20da:	85 ff       	sbrs	r24, 5
    20dc:	12 c0       	rjmp	.+36     	; 0x2102 <PA_bias+0x12c>
				{
					Status1 &= ~(PA_CAL_LO | PA_CAL_HI | PA_CAL | TX_FLAG );// We're done, Clear all flags
    20de:	8e 78       	andi	r24, 0x8E	; 142
    20e0:	80 93 7a 01 	sts	0x017A, r24

					// Swtich back to Receive mode, key the TX down
					#if MOBO_STYLE_IO
					MoboPCF_set(Mobo_PCF_TX);
    20e4:	80 e8       	ldi	r24, 0x80	; 128
    20e6:	8c db       	rcall	.-2280   	; 0x1800 <MoboPCF_set>
					#endif//MOBO_STYLE_IO
					#if OLDSTYLE_IO
					IO_PORT_PTT_CWKEY &= ~IO_PTT;
					#endif//OLDSTYLE_IO

					calibrate = 0;								// Clear calibrate value (for next round)
    20e8:	10 92 3d 02 	sts	0x023D, r1
					R.Bias_Select = 2;							// Set bias select for class A and store
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	80 93 12 01 	sts	0x0112, r24
					eeprom_write_block(&R.Bias_Select, &E.Bias_Select, sizeof (uint8_t));
    20f2:	82 e1       	ldi	r24, 0x12	; 18
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	62 e1       	ldi	r22, 0x12	; 18
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	48 d2       	rcall	.+1168   	; 0x2590 <__eewr_block_usb162>
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <PA_bias+0x13c>
				}

				// Crank up the bias
				else
				{
					calibrate++;								// Crank up the bias by one notch
    2102:	60 91 3d 02 	lds	r22, 0x023D
    2106:	6f 5f       	subi	r22, 0xFF	; 255
    2108:	60 93 3d 02 	sts	0x023D, r22
					ad5301(R.AD5301_I2C_addr, calibrate);		// for the next round of measurements
    210c:	80 91 03 01 	lds	r24, 0x0103
    2110:	ab db       	rcall	.-2218   	; 0x1868 <ad5301>
				}
			}
	}
}
    2112:	1f 91       	pop	r17
    2114:	08 95       	ret

00002116 <lcdLoadCustomChar>:
	//	0x00, 0x0E, 0x13, 0x15, 0x19, 0x0E, 0x00, 0x00,	// 15. animated play icon frame 2
	//	0x00, 0x0E, 0x11, 0x1F, 0x11, 0x0E, 0x00, 0x00,	// 16. animated play icon frame 3
};

void lcdLoadCustomChar(uint8_t* lcdCustomCharArray, uint8_t romCharNum, uint8_t lcdCharNum)
{
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	1f 93       	push	r17
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	0f 92       	push	r0
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
    2126:	44 0f       	add	r20, r20
    2128:	44 0f       	add	r20, r20
    212a:	44 0f       	add	r20, r20
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes
    212c:	66 0f       	add	r22, r22
    212e:	66 0f       	add	r22, r22
    2130:	66 0f       	add	r22, r22
	//	0x00, 0x0E, 0x15, 0x15, 0x15, 0x0E, 0x00, 0x00,	// 14. animated play icon frame 1
	//	0x00, 0x0E, 0x13, 0x15, 0x19, 0x0E, 0x00, 0x00,	// 15. animated play icon frame 2
	//	0x00, 0x0E, 0x11, 0x1F, 0x11, 0x0E, 0x00, 0x00,	// 16. animated play icon frame 3
};

void lcdLoadCustomChar(uint8_t* lcdCustomCharArray, uint8_t romCharNum, uint8_t lcdCharNum)
    2132:	7c 01       	movw	r14, r24
    2134:	e6 0e       	add	r14, r22
    2136:	f1 1c       	adc	r15, r1
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    2138:	10 e0       	ldi	r17, 0x00	; 0
	//	0x00, 0x0E, 0x15, 0x15, 0x15, 0x0E, 0x00, 0x00,	// 14. animated play icon frame 1
	//	0x00, 0x0E, 0x13, 0x15, 0x19, 0x0E, 0x00, 0x00,	// 15. animated play icon frame 2
	//	0x00, 0x0E, 0x11, 0x1F, 0x11, 0x0E, 0x00, 0x00,	// 16. animated play icon frame 3
};

void lcdLoadCustomChar(uint8_t* lcdCustomCharArray, uint8_t romCharNum, uint8_t lcdCharNum)
    213a:	81 2f       	mov	r24, r17
    213c:	84 0f       	add	r24, r20

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
	{
		// set CG RAM address
		lcd_command((1<<LCD_CGRAM) | (lcdCharNum+i));
    213e:	80 64       	ori	r24, 0x40	; 64
    2140:	49 83       	std	Y+1, r20	; 0x01
    2142:	0e 94 38 06 	call	0xc70	; 0xc70 <lcd_command>
		// write character data
		lcd_data( pgm_read_byte(lcdCustomCharArray+romCharNum+i));
    2146:	f7 01       	movw	r30, r14
    2148:	84 91       	lpm	r24, Z+
    214a:	0e 94 40 06 	call	0xc80	; 0xc80 <lcd_data>
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
    214e:	1f 5f       	subi	r17, 0xFF	; 255
    2150:	08 94       	sec
    2152:	e1 1c       	adc	r14, r1
    2154:	f1 1c       	adc	r15, r1
    2156:	49 81       	ldd	r20, Y+1	; 0x01
    2158:	18 30       	cpi	r17, 0x08	; 8
    215a:	79 f7       	brne	.-34     	; 0x213a <lcdLoadCustomChar+0x24>
		// set CG RAM address
		lcd_command((1<<LCD_CGRAM) | (lcdCharNum+i));
		// write character data
		lcd_data( pgm_read_byte(lcdCustomCharArray+romCharNum+i));
	}
}
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	1f 91       	pop	r17
    2164:	ff 90       	pop	r15
    2166:	ef 90       	pop	r14
    2168:	08 95       	ret

0000216a <lcdProgressBar>:

void lcdProgressBar(uint16_t progress, uint16_t maxprogress, uint8_t length)
{
    216a:	cf 92       	push	r12
    216c:	df 92       	push	r13
    216e:	ef 92       	push	r14
    2170:	ff 92       	push	r15
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	0f 92       	push	r0
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	fc 01       	movw	r30, r24
    2182:	9b 01       	movw	r18, r22
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((uint32_t)(progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    2184:	cb 01       	movw	r24, r22
    2186:	e2 17       	cp	r30, r18
    2188:	f3 07       	cpc	r31, r19
    218a:	08 f4       	brcc	.+2      	; 0x218e <lcdProgressBar+0x24>
    218c:	cf 01       	movw	r24, r30
    218e:	66 e0       	ldi	r22, 0x06	; 6
    2190:	70 e0       	ldi	r23, 0x00	; 0
    2192:	6a d1       	rcall	.+724    	; 0x2468 <__mulhi3>
    2194:	64 2f       	mov	r22, r20
    2196:	70 e0       	ldi	r23, 0x00	; 0
    2198:	67 d1       	rcall	.+718    	; 0x2468 <__mulhi3>
    219a:	b9 01       	movw	r22, r18
    219c:	90 d1       	rcall	.+800    	; 0x24be <__udivmodhi4>
    219e:	6b 01       	movw	r12, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    21a0:	cb 01       	movw	r24, r22
    21a2:	66 e0       	ldi	r22, 0x06	; 6
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	8b d1       	rcall	.+790    	; 0x24be <__udivmodhi4>
    21a8:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((uint32_t)(progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    21aa:	00 e0       	ldi	r16, 0x00	; 0
    21ac:	10 e0       	ldi	r17, 0x00	; 0
    21ae:	ff 24       	eor	r15, r15
    21b0:	15 c0       	rjmp	.+42     	; 0x21dc <lcdProgressBar+0x72>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    21b2:	98 01       	movw	r18, r16
    21b4:	2b 5f       	subi	r18, 0xFB	; 251
    21b6:	3f 4f       	sbci	r19, 0xFF	; 255
    21b8:	c2 16       	cp	r12, r18
    21ba:	d3 06       	cpc	r13, r19
    21bc:	28 f4       	brcc	.+10     	; 0x21c8 <lcdProgressBar+0x5e>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    21be:	c0 16       	cp	r12, r16
    21c0:	d1 06       	cpc	r13, r17
    21c2:	20 f4       	brcc	.+8      	; 0x21cc <lcdProgressBar+0x62>
			{
				// this is an empty block
				// use space character?
				c = 0;
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <lcdProgressBar+0x64>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    21c8:	85 e0       	ldi	r24, 0x05	; 5
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <lcdProgressBar+0x64>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    21cc:	8e 2d       	mov	r24, r14
			// this is a full block
			c = 5;
		}
		
		// write character to display
		lcd_data(c);
    21ce:	49 83       	std	Y+1, r20	; 0x01
    21d0:	0e 94 40 06 	call	0xc80	; 0xc80 <lcd_data>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((uint32_t)(progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    21d4:	f3 94       	inc	r15
    21d6:	0a 5f       	subi	r16, 0xFA	; 250
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	49 81       	ldd	r20, Y+1	; 0x01
    21dc:	f4 16       	cp	r15, r20
    21de:	48 f3       	brcs	.-46     	; 0x21b2 <lcdProgressBar+0x48>
		
		// write character to display
		lcd_data(c);
	}

}
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	df 90       	pop	r13
    21f0:	cf 90       	pop	r12
    21f2:	08 95       	ret

000021f4 <lcd_bargraph_init>:

void lcd_bargraph_init(void)
{
    21f4:	1f 93       	push	r17
	// load the first 6 custom characters
	for (uint8_t i=0; i<6; i++)
    21f6:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcdLoadCustomChar((uint8_t*)LcdCustomChar,i,i);
    21f8:	84 e7       	ldi	r24, 0x74	; 116
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	61 2f       	mov	r22, r17
    21fe:	41 2f       	mov	r20, r17
    2200:	8a df       	rcall	.-236    	; 0x2116 <lcdLoadCustomChar>
}

void lcd_bargraph_init(void)
{
	// load the first 6 custom characters
	for (uint8_t i=0; i<6; i++)
    2202:	1f 5f       	subi	r17, 0xFF	; 255
    2204:	16 30       	cpi	r17, 0x06	; 6
    2206:	c1 f7       	brne	.-16     	; 0x21f8 <lcd_bargraph_init+0x4>
	{
		lcdLoadCustomChar((uint8_t*)LcdCustomChar,i,i);
	}
}
    2208:	1f 91       	pop	r17
    220a:	08 95       	ret

0000220c <__fixunssfsi>:
    220c:	70 d0       	rcall	.+224    	; 0x22ee <__fp_splitA>
    220e:	88 f0       	brcs	.+34     	; 0x2232 <__fixunssfsi+0x26>
    2210:	9f 57       	subi	r25, 0x7F	; 127
    2212:	90 f0       	brcs	.+36     	; 0x2238 <__fixunssfsi+0x2c>
    2214:	b9 2f       	mov	r27, r25
    2216:	99 27       	eor	r25, r25
    2218:	b7 51       	subi	r27, 0x17	; 23
    221a:	a0 f0       	brcs	.+40     	; 0x2244 <__fixunssfsi+0x38>
    221c:	d1 f0       	breq	.+52     	; 0x2252 <__fixunssfsi+0x46>
    221e:	66 0f       	add	r22, r22
    2220:	77 1f       	adc	r23, r23
    2222:	88 1f       	adc	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	1a f0       	brmi	.+6      	; 0x222e <__fixunssfsi+0x22>
    2228:	ba 95       	dec	r27
    222a:	c9 f7       	brne	.-14     	; 0x221e <__fixunssfsi+0x12>
    222c:	12 c0       	rjmp	.+36     	; 0x2252 <__fixunssfsi+0x46>
    222e:	b1 30       	cpi	r27, 0x01	; 1
    2230:	81 f0       	breq	.+32     	; 0x2252 <__fixunssfsi+0x46>
    2232:	77 d0       	rcall	.+238    	; 0x2322 <__fp_zero>
    2234:	b1 e0       	ldi	r27, 0x01	; 1
    2236:	08 95       	ret
    2238:	74 c0       	rjmp	.+232    	; 0x2322 <__fp_zero>
    223a:	67 2f       	mov	r22, r23
    223c:	78 2f       	mov	r23, r24
    223e:	88 27       	eor	r24, r24
    2240:	b8 5f       	subi	r27, 0xF8	; 248
    2242:	39 f0       	breq	.+14     	; 0x2252 <__fixunssfsi+0x46>
    2244:	b9 3f       	cpi	r27, 0xF9	; 249
    2246:	cc f3       	brlt	.-14     	; 0x223a <__fixunssfsi+0x2e>
    2248:	86 95       	lsr	r24
    224a:	77 95       	ror	r23
    224c:	67 95       	ror	r22
    224e:	b3 95       	inc	r27
    2250:	d9 f7       	brne	.-10     	; 0x2248 <__fixunssfsi+0x3c>
    2252:	3e f4       	brtc	.+14     	; 0x2262 <__fixunssfsi+0x56>
    2254:	90 95       	com	r25
    2256:	80 95       	com	r24
    2258:	70 95       	com	r23
    225a:	61 95       	neg	r22
    225c:	7f 4f       	sbci	r23, 0xFF	; 255
    225e:	8f 4f       	sbci	r24, 0xFF	; 255
    2260:	9f 4f       	sbci	r25, 0xFF	; 255
    2262:	08 95       	ret

00002264 <__floatunsisf>:
    2264:	e8 94       	clt
    2266:	09 c0       	rjmp	.+18     	; 0x227a <__floatsisf+0x12>

00002268 <__floatsisf>:
    2268:	97 fb       	bst	r25, 7
    226a:	3e f4       	brtc	.+14     	; 0x227a <__floatsisf+0x12>
    226c:	90 95       	com	r25
    226e:	80 95       	com	r24
    2270:	70 95       	com	r23
    2272:	61 95       	neg	r22
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	8f 4f       	sbci	r24, 0xFF	; 255
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	99 23       	and	r25, r25
    227c:	a9 f0       	breq	.+42     	; 0x22a8 <__floatsisf+0x40>
    227e:	f9 2f       	mov	r31, r25
    2280:	96 e9       	ldi	r25, 0x96	; 150
    2282:	bb 27       	eor	r27, r27
    2284:	93 95       	inc	r25
    2286:	f6 95       	lsr	r31
    2288:	87 95       	ror	r24
    228a:	77 95       	ror	r23
    228c:	67 95       	ror	r22
    228e:	b7 95       	ror	r27
    2290:	f1 11       	cpse	r31, r1
    2292:	f8 cf       	rjmp	.-16     	; 0x2284 <__floatsisf+0x1c>
    2294:	fa f4       	brpl	.+62     	; 0x22d4 <__floatsisf+0x6c>
    2296:	bb 0f       	add	r27, r27
    2298:	11 f4       	brne	.+4      	; 0x229e <__floatsisf+0x36>
    229a:	60 ff       	sbrs	r22, 0
    229c:	1b c0       	rjmp	.+54     	; 0x22d4 <__floatsisf+0x6c>
    229e:	6f 5f       	subi	r22, 0xFF	; 255
    22a0:	7f 4f       	sbci	r23, 0xFF	; 255
    22a2:	8f 4f       	sbci	r24, 0xFF	; 255
    22a4:	9f 4f       	sbci	r25, 0xFF	; 255
    22a6:	16 c0       	rjmp	.+44     	; 0x22d4 <__floatsisf+0x6c>
    22a8:	88 23       	and	r24, r24
    22aa:	11 f0       	breq	.+4      	; 0x22b0 <__floatsisf+0x48>
    22ac:	96 e9       	ldi	r25, 0x96	; 150
    22ae:	11 c0       	rjmp	.+34     	; 0x22d2 <__floatsisf+0x6a>
    22b0:	77 23       	and	r23, r23
    22b2:	21 f0       	breq	.+8      	; 0x22bc <__floatsisf+0x54>
    22b4:	9e e8       	ldi	r25, 0x8E	; 142
    22b6:	87 2f       	mov	r24, r23
    22b8:	76 2f       	mov	r23, r22
    22ba:	05 c0       	rjmp	.+10     	; 0x22c6 <__floatsisf+0x5e>
    22bc:	66 23       	and	r22, r22
    22be:	71 f0       	breq	.+28     	; 0x22dc <__floatsisf+0x74>
    22c0:	96 e8       	ldi	r25, 0x86	; 134
    22c2:	86 2f       	mov	r24, r22
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	2a f0       	brmi	.+10     	; 0x22d4 <__floatsisf+0x6c>
    22ca:	9a 95       	dec	r25
    22cc:	66 0f       	add	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	da f7       	brpl	.-10     	; 0x22ca <__floatsisf+0x62>
    22d4:	88 0f       	add	r24, r24
    22d6:	96 95       	lsr	r25
    22d8:	87 95       	ror	r24
    22da:	97 f9       	bld	r25, 7
    22dc:	08 95       	ret

000022de <__fp_split3>:
    22de:	57 fd       	sbrc	r21, 7
    22e0:	90 58       	subi	r25, 0x80	; 128
    22e2:	44 0f       	add	r20, r20
    22e4:	55 1f       	adc	r21, r21
    22e6:	59 f0       	breq	.+22     	; 0x22fe <__fp_splitA+0x10>
    22e8:	5f 3f       	cpi	r21, 0xFF	; 255
    22ea:	71 f0       	breq	.+28     	; 0x2308 <__fp_splitA+0x1a>
    22ec:	47 95       	ror	r20

000022ee <__fp_splitA>:
    22ee:	88 0f       	add	r24, r24
    22f0:	97 fb       	bst	r25, 7
    22f2:	99 1f       	adc	r25, r25
    22f4:	61 f0       	breq	.+24     	; 0x230e <__fp_splitA+0x20>
    22f6:	9f 3f       	cpi	r25, 0xFF	; 255
    22f8:	79 f0       	breq	.+30     	; 0x2318 <__fp_splitA+0x2a>
    22fa:	87 95       	ror	r24
    22fc:	08 95       	ret
    22fe:	12 16       	cp	r1, r18
    2300:	13 06       	cpc	r1, r19
    2302:	14 06       	cpc	r1, r20
    2304:	55 1f       	adc	r21, r21
    2306:	f2 cf       	rjmp	.-28     	; 0x22ec <__fp_split3+0xe>
    2308:	46 95       	lsr	r20
    230a:	f1 df       	rcall	.-30     	; 0x22ee <__fp_splitA>
    230c:	08 c0       	rjmp	.+16     	; 0x231e <__fp_splitA+0x30>
    230e:	16 16       	cp	r1, r22
    2310:	17 06       	cpc	r1, r23
    2312:	18 06       	cpc	r1, r24
    2314:	99 1f       	adc	r25, r25
    2316:	f1 cf       	rjmp	.-30     	; 0x22fa <__fp_splitA+0xc>
    2318:	86 95       	lsr	r24
    231a:	71 05       	cpc	r23, r1
    231c:	61 05       	cpc	r22, r1
    231e:	08 94       	sec
    2320:	08 95       	ret

00002322 <__fp_zero>:
    2322:	e8 94       	clt

00002324 <__fp_szero>:
    2324:	bb 27       	eor	r27, r27
    2326:	66 27       	eor	r22, r22
    2328:	77 27       	eor	r23, r23
    232a:	cb 01       	movw	r24, r22
    232c:	97 f9       	bld	r25, 7
    232e:	08 95       	ret

00002330 <__mulsf3>:
    2330:	0a d0       	rcall	.+20     	; 0x2346 <__mulsf3x>
    2332:	80 c0       	rjmp	.+256    	; 0x2434 <__fp_round>
    2334:	71 d0       	rcall	.+226    	; 0x2418 <__fp_pscA>
    2336:	28 f0       	brcs	.+10     	; 0x2342 <__mulsf3+0x12>
    2338:	76 d0       	rcall	.+236    	; 0x2426 <__fp_pscB>
    233a:	18 f0       	brcs	.+6      	; 0x2342 <__mulsf3+0x12>
    233c:	95 23       	and	r25, r21
    233e:	09 f0       	breq	.+2      	; 0x2342 <__mulsf3+0x12>
    2340:	62 c0       	rjmp	.+196    	; 0x2406 <__fp_inf>
    2342:	67 c0       	rjmp	.+206    	; 0x2412 <__fp_nan>
    2344:	ef cf       	rjmp	.-34     	; 0x2324 <__fp_szero>

00002346 <__mulsf3x>:
    2346:	cb df       	rcall	.-106    	; 0x22de <__fp_split3>
    2348:	a8 f3       	brcs	.-22     	; 0x2334 <__mulsf3+0x4>

0000234a <__mulsf3_pse>:
    234a:	99 23       	and	r25, r25
    234c:	d9 f3       	breq	.-10     	; 0x2344 <__mulsf3+0x14>
    234e:	55 23       	and	r21, r21
    2350:	c9 f3       	breq	.-14     	; 0x2344 <__mulsf3+0x14>
    2352:	95 0f       	add	r25, r21
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	55 1f       	adc	r21, r21
    2358:	aa 27       	eor	r26, r26
    235a:	ee 27       	eor	r30, r30
    235c:	ff 27       	eor	r31, r31
    235e:	bb 27       	eor	r27, r27
    2360:	00 24       	eor	r0, r0
    2362:	08 94       	sec
    2364:	67 95       	ror	r22
    2366:	20 f4       	brcc	.+8      	; 0x2370 <__mulsf3_pse+0x26>
    2368:	e2 0f       	add	r30, r18
    236a:	f3 1f       	adc	r31, r19
    236c:	b4 1f       	adc	r27, r20
    236e:	0a 1e       	adc	r0, r26
    2370:	22 0f       	add	r18, r18
    2372:	33 1f       	adc	r19, r19
    2374:	44 1f       	adc	r20, r20
    2376:	aa 1f       	adc	r26, r26
    2378:	66 95       	lsr	r22
    237a:	a9 f7       	brne	.-22     	; 0x2366 <__mulsf3_pse+0x1c>
    237c:	77 95       	ror	r23
    237e:	30 f4       	brcc	.+12     	; 0x238c <__mulsf3_pse+0x42>
    2380:	f3 0f       	add	r31, r19
    2382:	b4 1f       	adc	r27, r20
    2384:	0a 1e       	adc	r0, r26
    2386:	12 1e       	adc	r1, r18
    2388:	08 f4       	brcc	.+2      	; 0x238c <__mulsf3_pse+0x42>
    238a:	63 95       	inc	r22
    238c:	33 0f       	add	r19, r19
    238e:	44 1f       	adc	r20, r20
    2390:	aa 1f       	adc	r26, r26
    2392:	22 1f       	adc	r18, r18
    2394:	76 95       	lsr	r23
    2396:	99 f7       	brne	.-26     	; 0x237e <__mulsf3_pse+0x34>
    2398:	87 95       	ror	r24
    239a:	20 f4       	brcc	.+8      	; 0x23a4 <__mulsf3_pse+0x5a>
    239c:	b4 0f       	add	r27, r20
    239e:	0a 1e       	adc	r0, r26
    23a0:	12 1e       	adc	r1, r18
    23a2:	63 1f       	adc	r22, r19
    23a4:	44 0f       	add	r20, r20
    23a6:	aa 1f       	adc	r26, r26
    23a8:	22 1f       	adc	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	86 95       	lsr	r24
    23ae:	a9 f7       	brne	.-22     	; 0x239a <__mulsf3_pse+0x50>
    23b0:	86 2f       	mov	r24, r22
    23b2:	71 2d       	mov	r23, r1
    23b4:	60 2d       	mov	r22, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	9f 57       	subi	r25, 0x7F	; 127
    23ba:	50 40       	sbci	r21, 0x00	; 0
    23bc:	8a f0       	brmi	.+34     	; 0x23e0 <__mulsf3_pse+0x96>
    23be:	e1 f0       	breq	.+56     	; 0x23f8 <__mulsf3_pse+0xae>
    23c0:	88 23       	and	r24, r24
    23c2:	4a f0       	brmi	.+18     	; 0x23d6 <__mulsf3_pse+0x8c>
    23c4:	ee 0f       	add	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	bb 1f       	adc	r27, r27
    23ca:	66 1f       	adc	r22, r22
    23cc:	77 1f       	adc	r23, r23
    23ce:	88 1f       	adc	r24, r24
    23d0:	91 50       	subi	r25, 0x01	; 1
    23d2:	50 40       	sbci	r21, 0x00	; 0
    23d4:	a9 f7       	brne	.-22     	; 0x23c0 <__mulsf3_pse+0x76>
    23d6:	9e 3f       	cpi	r25, 0xFE	; 254
    23d8:	51 05       	cpc	r21, r1
    23da:	70 f0       	brcs	.+28     	; 0x23f8 <__mulsf3_pse+0xae>
    23dc:	14 c0       	rjmp	.+40     	; 0x2406 <__fp_inf>
    23de:	a2 cf       	rjmp	.-188    	; 0x2324 <__fp_szero>
    23e0:	5f 3f       	cpi	r21, 0xFF	; 255
    23e2:	ec f3       	brlt	.-6      	; 0x23de <__mulsf3_pse+0x94>
    23e4:	98 3e       	cpi	r25, 0xE8	; 232
    23e6:	dc f3       	brlt	.-10     	; 0x23de <__mulsf3_pse+0x94>
    23e8:	86 95       	lsr	r24
    23ea:	77 95       	ror	r23
    23ec:	67 95       	ror	r22
    23ee:	b7 95       	ror	r27
    23f0:	f7 95       	ror	r31
    23f2:	e7 95       	ror	r30
    23f4:	9f 5f       	subi	r25, 0xFF	; 255
    23f6:	c1 f7       	brne	.-16     	; 0x23e8 <__mulsf3_pse+0x9e>
    23f8:	fe 2b       	or	r31, r30
    23fa:	88 0f       	add	r24, r24
    23fc:	91 1d       	adc	r25, r1
    23fe:	96 95       	lsr	r25
    2400:	87 95       	ror	r24
    2402:	97 f9       	bld	r25, 7
    2404:	08 95       	ret

00002406 <__fp_inf>:
    2406:	97 f9       	bld	r25, 7
    2408:	9f 67       	ori	r25, 0x7F	; 127
    240a:	80 e8       	ldi	r24, 0x80	; 128
    240c:	70 e0       	ldi	r23, 0x00	; 0
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	08 95       	ret

00002412 <__fp_nan>:
    2412:	9f ef       	ldi	r25, 0xFF	; 255
    2414:	80 ec       	ldi	r24, 0xC0	; 192
    2416:	08 95       	ret

00002418 <__fp_pscA>:
    2418:	00 24       	eor	r0, r0
    241a:	0a 94       	dec	r0
    241c:	16 16       	cp	r1, r22
    241e:	17 06       	cpc	r1, r23
    2420:	18 06       	cpc	r1, r24
    2422:	09 06       	cpc	r0, r25
    2424:	08 95       	ret

00002426 <__fp_pscB>:
    2426:	00 24       	eor	r0, r0
    2428:	0a 94       	dec	r0
    242a:	12 16       	cp	r1, r18
    242c:	13 06       	cpc	r1, r19
    242e:	14 06       	cpc	r1, r20
    2430:	05 06       	cpc	r0, r21
    2432:	08 95       	ret

00002434 <__fp_round>:
    2434:	09 2e       	mov	r0, r25
    2436:	03 94       	inc	r0
    2438:	00 0c       	add	r0, r0
    243a:	11 f4       	brne	.+4      	; 0x2440 <__fp_round+0xc>
    243c:	88 23       	and	r24, r24
    243e:	52 f0       	brmi	.+20     	; 0x2454 <__fp_round+0x20>
    2440:	bb 0f       	add	r27, r27
    2442:	40 f4       	brcc	.+16     	; 0x2454 <__fp_round+0x20>
    2444:	bf 2b       	or	r27, r31
    2446:	11 f4       	brne	.+4      	; 0x244c <__fp_round+0x18>
    2448:	60 ff       	sbrs	r22, 0
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <__fp_round+0x20>
    244c:	6f 5f       	subi	r22, 0xFF	; 255
    244e:	7f 4f       	sbci	r23, 0xFF	; 255
    2450:	8f 4f       	sbci	r24, 0xFF	; 255
    2452:	9f 4f       	sbci	r25, 0xFF	; 255
    2454:	08 95       	ret

00002456 <__mulqi3>:
    2456:	00 24       	eor	r0, r0

00002458 <__mulqi3_loop>:
    2458:	80 fd       	sbrc	r24, 0
    245a:	06 0e       	add	r0, r22
    245c:	66 0f       	add	r22, r22
    245e:	11 f0       	breq	.+4      	; 0x2464 <__mulqi3_exit>
    2460:	86 95       	lsr	r24
    2462:	d1 f7       	brne	.-12     	; 0x2458 <__mulqi3_loop>

00002464 <__mulqi3_exit>:
    2464:	80 2d       	mov	r24, r0
    2466:	08 95       	ret

00002468 <__mulhi3>:
    2468:	55 27       	eor	r21, r21
    246a:	00 24       	eor	r0, r0

0000246c <__mulhi3_loop>:
    246c:	80 ff       	sbrs	r24, 0
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <__mulhi3_skip1>
    2470:	06 0e       	add	r0, r22
    2472:	57 1f       	adc	r21, r23

00002474 <__mulhi3_skip1>:
    2474:	66 0f       	add	r22, r22
    2476:	77 1f       	adc	r23, r23
    2478:	61 15       	cp	r22, r1
    247a:	71 05       	cpc	r23, r1
    247c:	21 f0       	breq	.+8      	; 0x2486 <__mulhi3_exit>
    247e:	96 95       	lsr	r25
    2480:	87 95       	ror	r24
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	99 f7       	brne	.-26     	; 0x246c <__mulhi3_loop>

00002486 <__mulhi3_exit>:
    2486:	95 2f       	mov	r25, r21
    2488:	80 2d       	mov	r24, r0
    248a:	08 95       	ret

0000248c <__mulsi3>:
    248c:	ff 27       	eor	r31, r31
    248e:	ee 27       	eor	r30, r30
    2490:	bb 27       	eor	r27, r27
    2492:	aa 27       	eor	r26, r26

00002494 <__mulsi3_loop>:
    2494:	60 ff       	sbrs	r22, 0
    2496:	04 c0       	rjmp	.+8      	; 0x24a0 <__mulsi3_skip1>
    2498:	a2 0f       	add	r26, r18
    249a:	b3 1f       	adc	r27, r19
    249c:	e4 1f       	adc	r30, r20
    249e:	f5 1f       	adc	r31, r21

000024a0 <__mulsi3_skip1>:
    24a0:	22 0f       	add	r18, r18
    24a2:	33 1f       	adc	r19, r19
    24a4:	44 1f       	adc	r20, r20
    24a6:	55 1f       	adc	r21, r21
    24a8:	96 95       	lsr	r25
    24aa:	87 95       	ror	r24
    24ac:	77 95       	ror	r23
    24ae:	67 95       	ror	r22
    24b0:	89 f7       	brne	.-30     	; 0x2494 <__mulsi3_loop>
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	76 07       	cpc	r23, r22
    24b6:	71 f7       	brne	.-36     	; 0x2494 <__mulsi3_loop>

000024b8 <__mulsi3_exit>:
    24b8:	cf 01       	movw	r24, r30
    24ba:	bd 01       	movw	r22, r26
    24bc:	08 95       	ret

000024be <__udivmodhi4>:
    24be:	aa 1b       	sub	r26, r26
    24c0:	bb 1b       	sub	r27, r27
    24c2:	51 e1       	ldi	r21, 0x11	; 17
    24c4:	07 c0       	rjmp	.+14     	; 0x24d4 <__udivmodhi4_ep>

000024c6 <__udivmodhi4_loop>:
    24c6:	aa 1f       	adc	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	a6 17       	cp	r26, r22
    24cc:	b7 07       	cpc	r27, r23
    24ce:	10 f0       	brcs	.+4      	; 0x24d4 <__udivmodhi4_ep>
    24d0:	a6 1b       	sub	r26, r22
    24d2:	b7 0b       	sbc	r27, r23

000024d4 <__udivmodhi4_ep>:
    24d4:	88 1f       	adc	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	5a 95       	dec	r21
    24da:	a9 f7       	brne	.-22     	; 0x24c6 <__udivmodhi4_loop>
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	08 95       	ret

000024e6 <__udivmodsi4>:
    24e6:	a1 e2       	ldi	r26, 0x21	; 33
    24e8:	1a 2e       	mov	r1, r26
    24ea:	aa 1b       	sub	r26, r26
    24ec:	bb 1b       	sub	r27, r27
    24ee:	fd 01       	movw	r30, r26
    24f0:	0d c0       	rjmp	.+26     	; 0x250c <__udivmodsi4_ep>

000024f2 <__udivmodsi4_loop>:
    24f2:	aa 1f       	adc	r26, r26
    24f4:	bb 1f       	adc	r27, r27
    24f6:	ee 1f       	adc	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	a2 17       	cp	r26, r18
    24fc:	b3 07       	cpc	r27, r19
    24fe:	e4 07       	cpc	r30, r20
    2500:	f5 07       	cpc	r31, r21
    2502:	20 f0       	brcs	.+8      	; 0x250c <__udivmodsi4_ep>
    2504:	a2 1b       	sub	r26, r18
    2506:	b3 0b       	sbc	r27, r19
    2508:	e4 0b       	sbc	r30, r20
    250a:	f5 0b       	sbc	r31, r21

0000250c <__udivmodsi4_ep>:
    250c:	66 1f       	adc	r22, r22
    250e:	77 1f       	adc	r23, r23
    2510:	88 1f       	adc	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	1a 94       	dec	r1
    2516:	69 f7       	brne	.-38     	; 0x24f2 <__udivmodsi4_loop>
    2518:	60 95       	com	r22
    251a:	70 95       	com	r23
    251c:	80 95       	com	r24
    251e:	90 95       	com	r25
    2520:	9b 01       	movw	r18, r22
    2522:	ac 01       	movw	r20, r24
    2524:	bd 01       	movw	r22, r26
    2526:	cf 01       	movw	r24, r30
    2528:	08 95       	ret

0000252a <__divmodsi4>:
    252a:	97 fb       	bst	r25, 7
    252c:	09 2e       	mov	r0, r25
    252e:	05 26       	eor	r0, r21
    2530:	0e d0       	rcall	.+28     	; 0x254e <__divmodsi4_neg1>
    2532:	57 fd       	sbrc	r21, 7
    2534:	04 d0       	rcall	.+8      	; 0x253e <__divmodsi4_neg2>
    2536:	d7 df       	rcall	.-82     	; 0x24e6 <__udivmodsi4>
    2538:	0a d0       	rcall	.+20     	; 0x254e <__divmodsi4_neg1>
    253a:	00 1c       	adc	r0, r0
    253c:	38 f4       	brcc	.+14     	; 0x254c <__divmodsi4_exit>

0000253e <__divmodsi4_neg2>:
    253e:	50 95       	com	r21
    2540:	40 95       	com	r20
    2542:	30 95       	com	r19
    2544:	21 95       	neg	r18
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	4f 4f       	sbci	r20, 0xFF	; 255
    254a:	5f 4f       	sbci	r21, 0xFF	; 255

0000254c <__divmodsi4_exit>:
    254c:	08 95       	ret

0000254e <__divmodsi4_neg1>:
    254e:	f6 f7       	brtc	.-4      	; 0x254c <__divmodsi4_exit>
    2550:	90 95       	com	r25
    2552:	80 95       	com	r24
    2554:	70 95       	com	r23
    2556:	61 95       	neg	r22
    2558:	7f 4f       	sbci	r23, 0xFF	; 255
    255a:	8f 4f       	sbci	r24, 0xFF	; 255
    255c:	9f 4f       	sbci	r25, 0xFF	; 255
    255e:	08 95       	ret

00002560 <__eerd_block_usb162>:
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22

00002564 <__eerd_blraw_usb162>:
    2564:	fc 01       	movw	r30, r24
    2566:	f9 99       	sbic	0x1f, 1	; 31
    2568:	fe cf       	rjmp	.-4      	; 0x2566 <__eerd_blraw_usb162+0x2>
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <__eerd_blraw_usb162+0x14>
    256c:	f2 bd       	out	0x22, r31	; 34
    256e:	e1 bd       	out	0x21, r30	; 33
    2570:	f8 9a       	sbi	0x1f, 0	; 31
    2572:	31 96       	adiw	r30, 0x01	; 1
    2574:	00 b4       	in	r0, 0x20	; 32
    2576:	0d 92       	st	X+, r0
    2578:	41 50       	subi	r20, 0x01	; 1
    257a:	50 40       	sbci	r21, 0x00	; 0
    257c:	b8 f7       	brcc	.-18     	; 0x256c <__eerd_blraw_usb162+0x8>
    257e:	08 95       	ret

00002580 <__eerd_byte_usb162>:
    2580:	f9 99       	sbic	0x1f, 1	; 31
    2582:	fe cf       	rjmp	.-4      	; 0x2580 <__eerd_byte_usb162>
    2584:	92 bd       	out	0x22, r25	; 34
    2586:	81 bd       	out	0x21, r24	; 33
    2588:	f8 9a       	sbi	0x1f, 0	; 31
    258a:	99 27       	eor	r25, r25
    258c:	80 b5       	in	r24, 0x20	; 32
    258e:	08 95       	ret

00002590 <__eewr_block_usb162>:
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	02 c0       	rjmp	.+4      	; 0x259a <__eewr_block_usb162+0xa>
    2596:	2d 91       	ld	r18, X+
    2598:	05 d0       	rcall	.+10     	; 0x25a4 <__eewr_r18_usb162>
    259a:	41 50       	subi	r20, 0x01	; 1
    259c:	50 40       	sbci	r21, 0x00	; 0
    259e:	d8 f7       	brcc	.-10     	; 0x2596 <__eewr_block_usb162+0x6>
    25a0:	08 95       	ret

000025a2 <__eewr_byte_usb162>:
    25a2:	26 2f       	mov	r18, r22

000025a4 <__eewr_r18_usb162>:
    25a4:	f9 99       	sbic	0x1f, 1	; 31
    25a6:	fe cf       	rjmp	.-4      	; 0x25a4 <__eewr_r18_usb162>
    25a8:	1f ba       	out	0x1f, r1	; 31
    25aa:	92 bd       	out	0x22, r25	; 34
    25ac:	81 bd       	out	0x21, r24	; 33
    25ae:	20 bd       	out	0x20, r18	; 32
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	fa 9a       	sbi	0x1f, 2	; 31
    25b6:	f9 9a       	sbi	0x1f, 1	; 31
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	01 96       	adiw	r24, 0x01	; 1
    25bc:	08 95       	ret

000025be <_exit>:
    25be:	f8 94       	cli

000025c0 <__stop_program>:
    25c0:	ff cf       	rjmp	.-2      	; 0x25c0 <__stop_program>
